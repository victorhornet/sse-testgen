# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser.common as module_0
import enum as module_1
import builtins as module_2

def test_case_0():
    str_0 = '5['
    list_0 = [str_0, str_0]
    docstring_style_0 = module_0.DocstringStyle.AUTO
    docstring_param_0 = module_0.DocstringParam(list_0, str_0, str_0, str_0, docstring_style_0, docstring_style_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['5[', '5[']
    assert docstring_param_0.description == '5['
    assert docstring_param_0.arg_name == '5['
    assert docstring_param_0.type_name == '5['
    assert docstring_param_0.is_optional == module_0.DocstringStyle.AUTO
    assert docstring_param_0.default == module_0.DocstringStyle.AUTO
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_0 = None
    docstring_returns_0 = module_0.DocstringReturns(list_0, none_type_0, list_0, none_type_0, none_type_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['5[', '5[']
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name == ['5[', '5[']
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name is None
    dict_0 = {}
    parse_error_0 = module_0.ParseError(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'Numpydoc section parser.\n\n    :param title: section title. For most sections, this is a heading like\n                  "Parameters" which appears on its own line, underlined by\n                  en-dashes (\'-\') on the following line.\n    :param key: meta key string. In the parsed ``DocstringMeta`` instance this\n                will be the first element of the ``args`` attribute list.\n    '
    docstring_meta_0 = module_0.DocstringMeta(str_0, str_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_1 = 'LU%Vfvs8H2.)t.s09{=7'
    rendering_style_0 = module_0.RenderingStyle.COMPACT
    list_0 = [str_1]
    rendering_style_0.__getitem__(list_0, str_1)

def test_case_2():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_raises_0 = module_0.DocstringRaises(docstring_0, docstring_0, docstring_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert f'{type(docstring_raises_0.args).__module__}.{type(docstring_raises_0.args).__qualname__}' == 'docstring_parser.common.Docstring'
    assert f'{type(docstring_raises_0.description).__module__}.{type(docstring_raises_0.description).__qualname__}' == 'docstring_parser.common.Docstring'
    assert f'{type(docstring_raises_0.type_name).__module__}.{type(docstring_raises_0.type_name).__qualname__}' == 'docstring_parser.common.Docstring'
    docstring_style_0 = module_0.DocstringStyle.NUMPYDOC
    docstring_style_1 = module_0.DocstringStyle.NUMPYDOC
    str_0 = 'Yield'
    docstring_example_0 = module_0.DocstringExample(docstring_raises_0, str_0, docstring_raises_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert f'{type(docstring_example_0.args).__module__}.{type(docstring_example_0.args).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert f'{type(docstring_example_0.description).__module__}.{type(docstring_example_0.description).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_example_0.snippet == 'Yield'
    none_type_0 = None
    str_1 = '1,A'
    list_0 = [str_0, str_1, str_1, str_0]
    docstring_param_0 = module_0.DocstringParam(list_0, str_1, docstring_raises_0, docstring_raises_0, none_type_0, str_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['Yield', '1,A', '1,A', 'Yield']
    assert docstring_param_0.description == '1,A'
    assert f'{type(docstring_param_0.arg_name).__module__}.{type(docstring_param_0.arg_name).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert f'{type(docstring_param_0.type_name).__module__}.{type(docstring_param_0.type_name).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == 'Yield'
    docstring_returns_0 = module_0.DocstringReturns(none_type_0, none_type_0, none_type_0, docstring_style_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args is None
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator == module_0.DocstringStyle.NUMPYDOC
    assert docstring_returns_0.return_name is None
    list_1 = []
    docstring_meta_0 = module_0.DocstringMeta(list_1, docstring_style_1)

def test_case_3():
    str_0 = 'SD+<7; c\rq=rx[akum'
    str_1 = 'Receives'
    str_2 = 'A{A`W9^'
    list_0 = [str_0, str_1, str_2]
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_2)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_example_0 = module_0.DocstringExample(list_0, str_1, str_1)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['SD+<7; c\rq=rx[akum', 'Receives', 'A{A`W9^']
    assert docstring_example_0.description == 'Receives'
    assert docstring_example_0.snippet == 'Receives'

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'CpNZduM,J,B`B2'
    str_1 = '1+^\x0c\t6:\t'
    list_0 = [str_0, str_1, str_1]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_1)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['CpNZduM,J,B`B2', '1+^\x0c\t6:\t', '1+^\x0c\t6:\t']
    assert docstring_deprecated_0.description == 'CpNZduM,J,B`B2'
    assert docstring_deprecated_0.version == '1+^\x0c\t6:\t'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    module_1.EnumMeta()

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'ZB\tHeX9i'
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_1 = "*KbO1x'fWL]\t"
    list_0 = [str_0, str_1]
    parse_error_0 = module_0.ParseError(*list_0)
    bool_0 = True
    docstring_param_0 = module_0.DocstringParam(list_0, list_0, str_1, str_0, bool_0, list_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['ZB\tHeX9i', "*KbO1x'fWL]\t"]
    assert docstring_param_0.description == ['ZB\tHeX9i', "*KbO1x'fWL]\t"]
    assert docstring_param_0.arg_name == "*KbO1x'fWL]\t"
    assert docstring_param_0.type_name == 'ZB\tHeX9i'
    assert docstring_param_0.is_optional is True
    assert docstring_param_0.default == ['ZB\tHeX9i', "*KbO1x'fWL]\t"]
    none_type_0 = None
    docstring_param_1 = module_0.DocstringParam(none_type_0, none_type_0, str_0, none_type_0, none_type_0, list_0)
    assert docstring_param_1.args is None
    assert docstring_param_1.description is None
    list_0.__reversed__(list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    docstring_style_0 = module_0.DocstringStyle.EPYDOC
    str_0 = '37ZPS^d!|U9aF:i8gz<>'
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(docstring_style_0, docstring_style_0, str_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == module_0.DocstringStyle.EPYDOC
    assert docstring_example_0.description == '37ZPS^d!|U9aF:i8gz<>'
    assert docstring_example_0.snippet == module_0.DocstringStyle.EPYDOC
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_meta_0 = module_0.DocstringMeta(docstring_style_0, none_type_0)
    parse_error_0 = module_0.ParseError()
    docstring_example_1 = module_0.DocstringExample(str_0, parse_error_0, parse_error_0)
    assert docstring_example_1.args == '37ZPS^d!|U9aF:i8gz<>'
    str_1 = 'J\\\nS}6A/DJd,#'
    list_0 = [str_1]
    str_2 = 'k\n<6'
    docstring_param_0 = module_0.DocstringParam(list_0, list_0, str_2, str_1, str_1, str_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['J\\\nS}6A/DJd,#']
    assert docstring_param_0.description == ['J\\\nS}6A/DJd,#']
    assert docstring_param_0.arg_name == 'k\n<6'
    assert docstring_param_0.type_name == 'J\\\nS}6A/DJd,#'
    assert docstring_param_0.is_optional == 'J\\\nS}6A/DJd,#'
    assert docstring_param_0.default == 'J\\\nS}6A/DJd,#'
    docstring_deprecated_0 = module_0.DocstringDeprecated(none_type_0, none_type_0, str_1)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version == 'J\\\nS}6A/DJd,#'
    str_3 = '/&BW#:Tc`e@@'
    str_4 = 'TVtQHW'
    docstring_example_2 = module_0.DocstringExample(list_0, str_0, none_type_0)
    assert docstring_example_2.args == ['J\\\nS}6A/DJd,#']
    parse_error_1 = module_0.ParseError()
    list_1 = [str_0, str_3, str_4, str_4]
    docstring_example_3 = module_0.DocstringExample(list_1, str_4, str_3)
    assert docstring_example_3.args == ['37ZPS^d!|U9aF:i8gz<>', '/&BW#:Tc`e@@', 'TVtQHW', 'TVtQHW']
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_deprecated_1 = module_0.DocstringDeprecated(docstring_example_3, none_type_0, str_1)
    assert f'{type(docstring_deprecated_1.args).__module__}.{type(docstring_deprecated_1.args).__qualname__}' == 'docstring_parser.common.DocstringExample'
    module_1.unique(none_type_0)

def test_case_7():
    str_0 = '&K'
    list_0 = [str_0, str_0]
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_0, str_0, list_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['&K', '&K']
    assert docstring_returns_0.description == '&K'
    assert docstring_returns_0.type_name == '&K'
    assert docstring_returns_0.is_generator == ['&K', '&K']
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_1 = [str_0]
    docstring_example_0 = module_0.DocstringExample(list_1, str_0, list_1)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['&K']
    assert docstring_example_0.description == ['&K']
    assert docstring_example_0.snippet == '&K'
    str_1 = 'U;A\n\tVt'
    str_2 = 'oL],UX\x0bA\x0cM#&Rkp'
    list_2 = [str_1, str_2]
    bool_0 = True
    docstring_returns_1 = module_0.DocstringReturns(list_2, str_1, str_1, bool_0)
    assert docstring_returns_1.args == ['U;A\n\tVt', 'oL],UX\x0bA\x0cM#&Rkp']
    assert docstring_returns_1.description == 'U;A\n\tVt'
    str_3 = '%;kKLANQ\x0cH]/6=?G'
    str_4 = '}[:jGa-['
    rendering_style_0 = module_0.RenderingStyle.EXPANDED
    docstring_meta_0 = module_0.DocstringMeta(list_2, str_1)
    list_3 = [str_3, str_3, str_4]
    str_5 = '8|\x0cW'
    docstring_returns_2 = module_0.DocstringReturns(rendering_style_0, str_3, str_5, bool_0)
    assert docstring_returns_2.args == module_0.RenderingStyle.EXPANDED
    assert docstring_returns_2.description == '%;kKLANQ\x0cH]/6=?G'
    docstring_meta_1 = module_0.DocstringMeta(str_2, rendering_style_0)
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_2, str_4, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['U;A\n\tVt', 'oL],UX\x0bA\x0cM#&Rkp']
    assert docstring_deprecated_0.description == '}[:jGa-['
    assert docstring_deprecated_0.version is None
    bool_1 = True
    docstring_raises_0 = module_0.DocstringRaises(str_4, rendering_style_0, str_3)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == '}[:jGa-['
    assert docstring_raises_0.description == module_0.RenderingStyle.EXPANDED
    assert docstring_raises_0.type_name == '%;kKLANQ\x0cH]/6=?G'
    none_type_1 = None
    str_6 = ''
    docstring_param_0 = module_0.DocstringParam(none_type_1, str_4, str_6, str_1, none_type_1, list_2)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args is None
    assert docstring_param_0.description == '}[:jGa-['
    assert docstring_param_0.arg_name == ''
    assert docstring_param_0.type_name == 'U;A\n\tVt'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == ['U;A\n\tVt', 'oL],UX\x0bA\x0cM#&Rkp']
    docstring_returns_3 = module_0.DocstringReturns(list_3, str_4, str_4, bool_1, str_4)
    assert docstring_returns_3.args == ['%;kKLANQ\x0cH]/6=?G', '%;kKLANQ\x0cH]/6=?G', '}[:jGa-[']
    assert docstring_returns_3.description == '}[:jGa-['
    docstring_returns_4 = module_0.DocstringReturns(rendering_style_0, docstring_returns_3, none_type_0, str_4)
    assert docstring_returns_4.args == module_0.RenderingStyle.EXPANDED
    assert f'{type(docstring_returns_4.description).__module__}.{type(docstring_returns_4.description).__qualname__}' == 'docstring_parser.common.DocstringReturns'

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'gE'
    str_1 = 'g\rL$*dEuXfyV'
    dict_0 = {str_1: str_0, str_1: str_1}
    module_0.ParseError(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = -3188.0
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(float_0, none_type_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_0 = []
    module_1.unique(list_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    parse_error_0 = module_0.ParseError()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_0 = "&E`RQjCMn\n'Y"
    list_0 = [str_0, str_0]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(list_0, str_0, str_0, parse_error_0, none_type_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ["&E`RQjCMn\n'Y", "&E`RQjCMn\n'Y"]
    assert docstring_param_0.description == "&E`RQjCMn\n'Y"
    assert docstring_param_0.arg_name == "&E`RQjCMn\n'Y"
    assert f'{type(docstring_param_0.type_name).__module__}.{type(docstring_param_0.type_name).__qualname__}' == 'docstring_parser.common.ParseError'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, parse_error_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ["&E`RQjCMn\n'Y", "&E`RQjCMn\n'Y"]
    assert f'{type(docstring_example_0.description).__module__}.{type(docstring_example_0.description).__qualname__}' == 'docstring_parser.common.ParseError'
    assert docstring_example_0.snippet == "&E`RQjCMn\n'Y"
    docstring_meta_0 = module_0.DocstringMeta(none_type_0, parse_error_0)
    docstring_param_1 = module_0.DocstringParam(list_0, docstring_meta_0, parse_error_0, str_0, none_type_0, none_type_0)
    assert docstring_param_1.args == ["&E`RQjCMn\n'Y", "&E`RQjCMn\n'Y"]
    assert f'{type(docstring_param_1.description).__module__}.{type(docstring_param_1.description).__qualname__}' == 'docstring_parser.common.DocstringMeta'
    docstring_deprecated_0 = module_0.DocstringDeprecated(parse_error_0, docstring_param_1, docstring_example_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert f'{type(docstring_deprecated_0.args).__module__}.{type(docstring_deprecated_0.args).__qualname__}' == 'docstring_parser.common.ParseError'
    assert f'{type(docstring_deprecated_0.description).__module__}.{type(docstring_deprecated_0.description).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert f'{type(docstring_deprecated_0.version).__module__}.{type(docstring_deprecated_0.version).__qualname__}' == 'docstring_parser.common.DocstringExample'
    docstring_raises_0 = module_0.DocstringRaises(none_type_0, str_0, none_type_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description == "&E`RQjCMn\n'Y"
    assert docstring_raises_0.type_name is None
    docstring_deprecated_1 = module_0.DocstringDeprecated(docstring_param_0, docstring_example_0, none_type_0)
    assert f'{type(docstring_deprecated_1.args).__module__}.{type(docstring_deprecated_1.args).__qualname__}' == 'docstring_parser.common.DocstringParam'
    bool_0 = True
    docstring_returns_0 = module_0.DocstringReturns(docstring_param_1, docstring_param_1, docstring_deprecated_1, bool_0, docstring_param_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert f'{type(docstring_returns_0.args).__module__}.{type(docstring_returns_0.args).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert f'{type(docstring_returns_0.description).__module__}.{type(docstring_returns_0.description).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert f'{type(docstring_returns_0.type_name).__module__}.{type(docstring_returns_0.type_name).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_returns_0.is_generator is True
    assert f'{type(docstring_returns_0.return_name).__module__}.{type(docstring_returns_0.return_name).__qualname__}' == 'docstring_parser.common.DocstringParam'
    docstring_meta_1 = module_0.DocstringMeta(docstring_example_0, list_0)
    docstring_returns_1 = module_0.DocstringReturns(none_type_0, str_0, docstring_meta_0, docstring_deprecated_1)
    assert docstring_returns_1.args is None
    assert docstring_returns_1.description == "&E`RQjCMn\n'Y"
    docstring_param_2 = module_0.DocstringParam(docstring_example_0, docstring_meta_1, docstring_meta_1, none_type_0, none_type_0, none_type_0)
    assert f'{type(docstring_param_2.args).__module__}.{type(docstring_param_2.args).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert f'{type(docstring_param_2.description).__module__}.{type(docstring_param_2.description).__qualname__}' == 'docstring_parser.common.DocstringMeta'
    str_1 = 'm'
    docstring_0 = module_0.Docstring(docstring_meta_0)
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_2 = 'u+N](GN\n h_}a#\tI6c'
    dict_0 = {str_1: docstring_0, str_2: list_0}
    docstring_1 = module_0.Docstring(none_type_0)
    module_0.ParseError(**dict_0)

def test_case_11():
    str_0 = 'receives'
    str_1 = 'fuDenL_i$N'
    str_2 = ">'_?m*l!AhnEV<6"
    str_3 = 'hoN*#@"Q^!R{U!l'
    docstring_deprecated_0 = module_0.DocstringDeprecated(str_1, str_1, str_2)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == 'fuDenL_i$N'
    assert docstring_deprecated_0.description == 'fuDenL_i$N'
    assert docstring_deprecated_0.version == ">'_?m*l!AhnEV<6"
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_0 = [str_1, str_0, str_2, str_3]
    docstring_param_0 = module_0.DocstringParam(list_0, str_0, str_1, str_2, str_2, str_3)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['fuDenL_i$N', 'receives', ">'_?m*l!AhnEV<6", 'hoN*#@"Q^!R{U!l']
    assert docstring_param_0.description == 'receives'
    assert docstring_param_0.arg_name == 'fuDenL_i$N'
    assert docstring_param_0.type_name == ">'_?m*l!AhnEV<6"
    assert docstring_param_0.is_optional == ">'_?m*l!AhnEV<6"
    assert docstring_param_0.default == 'hoN*#@"Q^!R{U!l'
    str_4 = 'ad\x0bv[\\Jl?;5+?]?P\nGTd'
    none_type_0 = None
    str_5 = '~W'
    docstring_deprecated_1 = module_0.DocstringDeprecated(none_type_0, str_3, str_5)
    assert docstring_deprecated_1.args is None
    list_1 = [str_0, str_4, str_4, str_0]
    str_6 = '^('
    list_2 = [str_6]
    docstring_example_0 = module_0.DocstringExample(list_2, list_2, str_1)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['^(']
    assert docstring_example_0.description == 'fuDenL_i$N'
    assert docstring_example_0.snippet == ['^(']
    docstring_deprecated_2 = module_0.DocstringDeprecated(list_1, str_4, str_0)
    assert docstring_deprecated_2.args == ['receives', 'ad\x0bv[\\Jl?;5+?]?P\nGTd', 'ad\x0bv[\\Jl?;5+?]?P\nGTd', 'receives']
    docstring_meta_0 = module_0.DocstringMeta(docstring_deprecated_2, str_4)
    docstring_example_1 = module_0.DocstringExample(list_1, str_0, list_1)
    assert docstring_example_1.args == ['receives', 'ad\x0bv[\\Jl?;5+?]?P\nGTd', 'ad\x0bv[\\Jl?;5+?]?P\nGTd', 'receives']
    with pytest.raises(TypeError):
        list_0.__new__(none_type_0, list_1, list_2, docstring_deprecated_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    rendering_style_0 = module_0.RenderingStyle.EXPANDED
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    rendering_style_0.__bool__()

@pytest.mark.xfail(strict=True)
def test_case_13():
    list_0 = []
    docstring_meta_0 = module_0.DocstringMeta(list_0, list_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, none_type_0, list_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version == []
    none_type_1 = None
    docstring_deprecated_1 = module_0.DocstringDeprecated(none_type_1, list_0, none_type_1)
    assert docstring_deprecated_1.args is None
    docstring_meta_1 = module_0.DocstringMeta(list_0, none_type_1)
    rendering_style_0 = module_0.RenderingStyle.EXPANDED
    none_type_2 = None
    docstring_raises_0 = module_0.DocstringRaises(none_type_2, none_type_2, none_type_2)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None
    str_0 = '\x0b3G'
    str_1 = ''
    str_2 = 'references'
    str_3 = '-.'
    docstring_param_0 = module_0.DocstringParam(list_0, str_0, str_3, none_type_1, none_type_1, none_type_2)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == []
    assert docstring_param_0.description == '\x0b3G'
    assert docstring_param_0.arg_name == '-.'
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    list_1 = [str_0, str_1, str_2]
    docstring_deprecated_2 = module_0.DocstringDeprecated(list_1, str_1, str_0)
    assert docstring_deprecated_2.args == ['\x0b3G', '', 'references']
    dict_0 = {str_1: rendering_style_0, str_2: none_type_1}
    module_0.ParseError(**dict_0)

def test_case_14():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_1 = module_0.Docstring()
    str_0 = '{*_;J'
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(none_type_0, str_0, docstring_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description == '{*_;J'
    assert f'{type(docstring_raises_0.type_name).__module__}.{type(docstring_raises_0.type_name).__qualname__}' == 'docstring_parser.common.Docstring'
    list_0 = [str_0, str_0, str_0]
    docstring_raises_1 = module_0.DocstringRaises(list_0, list_0, str_0)
    assert docstring_raises_1.args == ['{*_;J', '{*_;J', '{*_;J']
    docstring_deprecated_0 = module_0.DocstringDeprecated(docstring_raises_0, docstring_raises_0, str_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert f'{type(docstring_deprecated_0.args).__module__}.{type(docstring_deprecated_0.args).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert f'{type(docstring_deprecated_0.description).__module__}.{type(docstring_deprecated_0.description).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_deprecated_0.version == '{*_;J'
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_0, none_type_0, docstring_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['{*_;J', '{*_;J', '{*_;J']
    assert docstring_returns_0.description == '{*_;J'
    assert docstring_returns_0.type_name is None
    assert f'{type(docstring_returns_0.is_generator).__module__}.{type(docstring_returns_0.is_generator).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_returns_0.return_name is None
    bool_0 = False
    str_1 = 'c'
    docstring_style_0 = module_0.DocstringStyle.REST
    bool_1 = False
    docstring_returns_1 = module_0.DocstringReturns(str_0, str_1, str_0, bool_1)
    assert docstring_returns_1.args == '{*_;J'
    assert docstring_returns_1.description == 'c'
    list_1 = [str_1]
    docstring_param_0 = module_0.DocstringParam(list_1, str_0, str_1, str_1, bool_0, bool_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['c']
    assert docstring_param_0.description == '{*_;J'
    assert docstring_param_0.arg_name == 'c'
    assert docstring_param_0.type_name == 'c'
    assert docstring_param_0.is_optional is False
    assert docstring_param_0.default is False
    docstring_returns_2 = module_0.DocstringReturns(list_0, list_0, str_0, bool_0)
    assert docstring_returns_2.args == ['{*_;J', '{*_;J', '{*_;J']
    assert docstring_returns_2.description == ['{*_;J', '{*_;J', '{*_;J']
    docstring_raises_2 = module_0.DocstringRaises(list_0, docstring_param_0, docstring_style_0)
    assert docstring_raises_2.args == ['{*_;J', '{*_;J', '{*_;J']
    docstring_raises_3 = module_0.DocstringRaises(list_0, docstring_1, str_0)
    assert docstring_raises_3.args == ['{*_;J', '{*_;J', '{*_;J']

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "Initialize self.\n\n        :param args: list of arguments. The exact content of this variable is\n                     dependent on the kind of docstring; it's used to distinguish between\n                     custom docstring meta information items.\n        :param description: associated docstring description.\n        "
    set_0 = {str_0, str_0, str_0}
    module_1.unique(set_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    module_1.EnumMeta()

@pytest.mark.xfail(strict=True)
def test_case_17():
    list_0 = []
    str_0 = 'F#NR:_\rvzOHBVhhQ:`\t'
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description == 'F#NR:_\rvzOHBVhhQ:`\t'
    assert docstring_deprecated_0.version == 'F#NR:_\rvzOHBVhhQ:`\t'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_0 = None
    str_1 = 'C$*q@\\WHK6sWG*\x0b</Y|['
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    list_1 = [str_1, str_1, str_1, str_1]
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_1, str_1, str_1)
    assert docstring_deprecated_1.args == ['C$*q@\\WHK6sWG*\x0b</Y|[', 'C$*q@\\WHK6sWG*\x0b</Y|[', 'C$*q@\\WHK6sWG*\x0b</Y|[', 'C$*q@\\WHK6sWG*\x0b</Y|[']
    docstring_deprecated_2 = module_0.DocstringDeprecated(none_type_0, none_type_0, none_type_0)
    assert docstring_deprecated_2.args is None
    str_2 = '{e\rJ*Z-,\\{'
    list_2 = [str_2]
    docstring_example_0 = module_0.DocstringExample(list_2, str_1, docstring_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['{e\rJ*Z-,\\{']
    assert f'{type(docstring_example_0.description).__module__}.{type(docstring_example_0.description).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_example_0.snippet == 'C$*q@\\WHK6sWG*\x0b</Y|['
    str_3 = 'cT[~vZI[]?Nj*;61?k#'
    docstring_1 = module_0.Docstring()
    docstring_raises_0 = module_0.DocstringRaises(none_type_0, str_3, str_3)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description == 'cT[~vZI[]?Nj*;61?k#'
    assert docstring_raises_0.type_name == 'cT[~vZI[]?Nj*;61?k#'
    list_0.__call__(none_type_0, docstring_example_0, module=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '-'
    str_1 = ' ~ZJ'
    list_0 = [str_0, str_1, str_1, str_1]
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    bytes_0 = b'_\xf5\xf3\x02\x8d\xdf\x8e$\x1f\n\x01\x92\x98d\x89\x8c\xf2\x15N5'
    str_2 = 'TzKh]~GZXVJ\x0cD!)dm?:a'
    list_1 = [str_2]
    str_3 = 'value'
    docstring_param_0 = module_0.DocstringParam(list_1, bytes_0, str_3, str_2, bytes_0, str_3)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['TzKh]~GZXVJ\x0cD!)dm?:a']
    assert docstring_param_0.description == b'_\xf5\xf3\x02\x8d\xdf\x8e$\x1f\n\x01\x92\x98d\x89\x8c\xf2\x15N5'
    assert docstring_param_0.arg_name == 'value'
    assert docstring_param_0.type_name == 'TzKh]~GZXVJ\x0cD!)dm?:a'
    assert docstring_param_0.is_optional == b'_\xf5\xf3\x02\x8d\xdf\x8e$\x1f\n\x01\x92\x98d\x89\x8c\xf2\x15N5'
    assert docstring_param_0.default == 'value'
    str_4 = '$ikns;woen\\+6\n)X?)9B'
    docstring_example_0 = module_0.DocstringExample(list_1, str_4, str_3)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['TzKh]~GZXVJ\x0cD!)dm?:a']
    assert docstring_example_0.description == 'value'
    assert docstring_example_0.snippet == '$ikns;woen\\+6\n)X?)9B'
    docstring_deprecated_0 = module_0.DocstringDeprecated(bytes_0, str_4, str_4)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == b'_\xf5\xf3\x02\x8d\xdf\x8e$\x1f\n\x01\x92\x98d\x89\x8c\xf2\x15N5'
    assert docstring_deprecated_0.description == '$ikns;woen\\+6\n)X?)9B'
    assert docstring_deprecated_0.version == '$ikns;woen\\+6\n)X?)9B'
    tuple_0 = ()
    docstring_meta_1 = module_0.DocstringMeta(tuple_0, tuple_0)
    none_type_0 = None
    module_1.EnumMeta(*none_type_0)

def test_case_19():
    str_0 = '5`&StZ\x0bMI. '
    list_0 = [str_0, str_0]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(list_0, list_0, str_0, none_type_0, none_type_0, str_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['5`&StZ\x0bMI. ', '5`&StZ\x0bMI. ']
    assert docstring_param_0.description == ['5`&StZ\x0bMI. ', '5`&StZ\x0bMI. ']
    assert docstring_param_0.arg_name == '5`&StZ\x0bMI. '
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == '5`&StZ\x0bMI. '
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_1 = 'cShwZ\x0btaA/(Qwo0{\t0'
    docstring_deprecated_0 = module_0.DocstringDeprecated(str_0, str_0, str_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == '5`&StZ\x0bMI. '
    assert docstring_deprecated_0.description == '5`&StZ\x0bMI. '
    assert docstring_deprecated_0.version == '5`&StZ\x0bMI. '
    str_2 = 'Other Parameters'
    list_1 = [str_0, str_1, str_2]
    str_3 = '\ttV'
    docstring_param_1 = module_0.DocstringParam(list_1, list_1, str_3, str_1, str_3, str_2)
    assert docstring_param_1.args == ['5`&StZ\x0bMI. ', 'cShwZ\x0btaA/(Qwo0{\t0', 'Other Parameters']
    assert docstring_param_1.description == ['5`&StZ\x0bMI. ', 'cShwZ\x0btaA/(Qwo0{\t0', 'Other Parameters']
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_1, str_2, str_0)
    assert docstring_deprecated_1.args == ['5`&StZ\x0bMI. ', 'cShwZ\x0btaA/(Qwo0{\t0', 'Other Parameters']
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    dict_0 = {}
    parse_error_0 = module_0.ParseError(**dict_0)
    parse_error_1 = module_0.ParseError()

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'k| ?NMs'
    str_1 = "_^yA@\t'yQo8nhBe>W<V"
    list_0 = [str_0, str_0, str_1, str_1]
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, str_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['k| ?NMs', 'k| ?NMs', "_^yA@\t'yQo8nhBe>W<V", "_^yA@\t'yQo8nhBe>W<V"]
    assert docstring_example_0.description == 'k| ?NMs'
    assert docstring_example_0.snippet == 'k| ?NMs'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    enum_dict_0 = module_1._EnumDict()
    module_1.EnumMeta()

def test_case_21():
    list_0 = []
    str_0 = 'w5!{'
    docstring_example_0 = module_0.DocstringExample(list_0, list_0, str_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == []
    assert docstring_example_0.description == 'w5!{'
    assert docstring_example_0.snippet == []
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(list_0, none_type_0)
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = 798
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(int_0, int_0, int_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == 798
    assert docstring_returns_0.description == 798
    assert docstring_returns_0.type_name == 798
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_0 = None
    bool_1 = False
    docstring_returns_1 = module_0.DocstringReturns(none_type_0, none_type_0, none_type_0, bool_1)
    assert docstring_returns_1.args is None
    assert docstring_returns_1.description is None
    module_0.ParseError(*docstring_returns_1)

def test_case_23():
    str_0 = '6oBUOC\x0cAXlSB;6_%iX?V'
    list_0 = [str_0, str_0, str_0, str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['6oBUOC\x0cAXlSB;6_%iX?V', '6oBUOC\x0cAXlSB;6_%iX?V', '6oBUOC\x0cAXlSB;6_%iX?V', '6oBUOC\x0cAXlSB;6_%iX?V']
    assert docstring_deprecated_0.description == '6oBUOC\x0cAXlSB;6_%iX?V'
    assert docstring_deprecated_0.version == '6oBUOC\x0cAXlSB;6_%iX?V'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}

@pytest.mark.xfail(strict=True)
def test_case_24():
    docstring_style_0 = module_0.DocstringStyle.NUMPYDOC
    none_type_0 = None
    str_0 = 'd'
    dict_0 = {str_0: none_type_0, str_0: docstring_style_0}
    module_0.ParseError(*none_type_0, **dict_0)

def test_case_25():
    str_0 = '*NKRjA'
    list_0 = [str_0]
    bool_0 = False
    docstring_raises_0 = module_0.DocstringRaises(list_0, bool_0, bool_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == ['*NKRjA']
    assert docstring_raises_0.description is False
    assert docstring_raises_0.type_name is False
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}

def test_case_26():
    str_0 = 'nW$S)VNJsnS:0,"~u|#'
    str_1 = '-Z_'
    list_0 = [str_0, str_0, str_0, str_1]
    docstring_raises_0 = module_0.DocstringRaises(list_0, list_0, str_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == ['nW$S)VNJsnS:0,"~u|#', 'nW$S)VNJsnS:0,"~u|#', 'nW$S)VNJsnS:0,"~u|#', '-Z_']
    assert docstring_raises_0.description == ['nW$S)VNJsnS:0,"~u|#', 'nW$S)VNJsnS:0,"~u|#', 'nW$S)VNJsnS:0,"~u|#', '-Z_']
    assert docstring_raises_0.type_name == '-Z_'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = '"'
    list_0 = [str_0, str_0]
    str_1 = 'b:g'
    dict_0 = {str_1: str_1}
    module_0.ParseError(*list_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = '*{8*{\x0cqhGu(e@Z \n-`q\n'
    str_1 = 'j0 (#G?{BY'
    str_2 = '\\i+~UH_e~Z5h])eD3P'
    list_0 = [str_0, str_0, str_1, str_2]
    str_3 = 'pnMB'
    str_4 = 'Note'
    list_1 = [str_1, str_3, str_4]
    docstring_meta_0 = module_0.DocstringMeta(str_0, str_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_0 = None
    parse_error_0 = module_0.ParseError(*list_1)
    docstring_example_0 = module_0.DocstringExample(list_1, str_3, none_type_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['j0 (#G?{BY', 'pnMB', 'Note']
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet == 'pnMB'
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_1, str_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['*{8*{\x0cqhGu(e@Z \n-`q\n', '*{8*{\x0cqhGu(e@Z \n-`q\n', 'j0 (#G?{BY', '\\i+~UH_e~Z5h])eD3P']
    assert docstring_returns_0.description == 'j0 (#G?{BY'
    assert docstring_returns_0.type_name == '*{8*{\x0cqhGu(e@Z \n-`q\n'
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name is None
    str_5 = 'y#^Sz68LIV!'
    list_2 = [str_0, str_5]
    docstring_example_1 = module_0.DocstringExample(list_2, str_0, list_2)
    assert docstring_example_1.args == ['*{8*{\x0cqhGu(e@Z \n-`q\n', 'y#^Sz68LIV!']
    list_2.__setattr__(docstring_example_1, docstring_example_1, str_5)

@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    module_1.unique(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    set_0 = set()
    list_0 = []
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, none_type_0, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_1 = None
    docstring_meta_0 = module_0.DocstringMeta(set_0, none_type_1)
    bool_0 = True
    str_0 = '/f\x0bEG- '
    bool_1 = True
    docstring_returns_0 = module_0.DocstringReturns(set_0, none_type_1, str_0, bool_1)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == {*()}
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name == '/f\x0bEG- '
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name is None
    docstring_example_0 = module_0.DocstringExample(list_0, none_type_0, none_type_1)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == []
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None
    docstring_meta_1 = module_0.DocstringMeta(bool_0, str_0)
    str_1 = '|N{S /'
    list_1 = [str_0, str_0, str_1]
    docstring_meta_2 = module_0.DocstringMeta(list_1, none_type_1)
    docstring_raises_0 = module_0.DocstringRaises(none_type_0, str_1, str_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description == '|N{S /'
    assert docstring_raises_0.type_name == '|N{S /'
    docstring_returns_1 = module_0.DocstringReturns(list_0, none_type_0, docstring_deprecated_0, bool_1)
    assert docstring_returns_1.args == []
    assert docstring_returns_1.description is None
    module_1.EnumMeta()

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "4'"
    list_0 = [str_0]
    str_1 = 'b$)D%H'
    docstring_param_0 = module_0.DocstringParam(list_0, str_0, str_1, str_0, str_1, str_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ["4'"]
    assert docstring_param_0.description == "4'"
    assert docstring_param_0.arg_name == 'b$)D%H'
    assert docstring_param_0.type_name == "4'"
    assert docstring_param_0.is_optional == 'b$)D%H'
    assert docstring_param_0.default == "4'"
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_2 = "='obC\x0bXiYS2el"
    none_type_0 = None
    str_3 = 'Raise'
    dict_0 = {str_2: none_type_0, str_3: none_type_0, str_3: none_type_0}
    module_0.ParseError(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = '\n'
    str_1 = 'inw\x0bbjDQ]'
    list_0 = [str_0, str_0, str_1]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(list_0, str_1, list_0, str_1, none_type_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['\n', '\n', 'inw\x0bbjDQ]']
    assert docstring_param_0.description == 'inw\x0bbjDQ]'
    assert docstring_param_0.arg_name == ['\n', '\n', 'inw\x0bbjDQ]']
    assert docstring_param_0.type_name == 'inw\x0bbjDQ]'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_0.__getitem__(str_1, docstring_param_0)

def test_case_33():
    exception_0 = module_2.Exception()
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(exception_0, exception_0, none_type_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert f'{type(docstring_example_0.args).__module__}.{type(docstring_example_0.args).__qualname__}' == 'builtins.Exception'
    assert docstring_example_0.description is None
    assert f'{type(docstring_example_0.snippet).__module__}.{type(docstring_example_0.snippet).__qualname__}' == 'builtins.Exception'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_1 = None
    str_0 = 'HqW/G2_h?0'
    str_1 = '\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)'
    docstring_param_0 = module_0.DocstringParam(none_type_1, str_0, str_1, str_1, none_type_1, str_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args is None
    assert docstring_param_0.description == 'HqW/G2_h?0'
    assert docstring_param_0.arg_name == '\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)'
    assert docstring_param_0.type_name == '\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == '\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)'
    docstring_0 = module_0.Docstring(str_1)
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_2 = 'o[ +]^:+m8.g\t8gx+'
    str_3 = "o]2_]';w"
    list_0 = [str_1, str_2, str_3]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, docstring_param_0, str_2)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)', 'o[ +]^:+m8.g\t8gx+', "o]2_]';w"]
    assert f'{type(docstring_deprecated_0.description).__module__}.{type(docstring_deprecated_0.description).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_deprecated_0.version == 'o[ +]^:+m8.g\t8gx+'
    list_1 = []
    docstring_returns_0 = module_0.DocstringReturns(str_2, str_2, str_1, none_type_1)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == 'o[ +]^:+m8.g\t8gx+'
    assert docstring_returns_0.description == 'o[ +]^:+m8.g\t8gx+'
    assert docstring_returns_0.type_name == '\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)'
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name is None
    auto_0 = module_1.auto()
    docstring_example_1 = module_0.DocstringExample(list_0, docstring_deprecated_0, docstring_deprecated_0)
    assert docstring_example_1.args == ['\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)', 'o[ +]^:+m8.g\t8gx+', "o]2_]';w"]
    bool_0 = True
    docstring_meta_0 = module_0.DocstringMeta(list_1, none_type_1)
    exception_1 = module_2.Exception()
    docstring_returns_1 = module_0.DocstringReturns(docstring_deprecated_0, list_0, str_0, bool_0, exception_1)
    assert f'{type(docstring_returns_1.args).__module__}.{type(docstring_returns_1.args).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_returns_1.description == ['\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)', 'o[ +]^:+m8.g\t8gx+', "o]2_]';w"]
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_1, str_0, auto_0)
    assert docstring_deprecated_1.args == []

def test_case_34():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_0 = 'mF|L&_Z|"Yy-P>'
    str_1 = 'q'
    list_0 = [str_0, str_1]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['mF|L&_Z|"Yy-P>', 'q']
    assert docstring_deprecated_0.description == 'mF|L&_Z|"Yy-P>'
    assert docstring_deprecated_0.version == 'mF|L&_Z|"Yy-P>'
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_0, str_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == ['mF|L&_Z|"Yy-P>', 'q']
    assert docstring_raises_0.description == 'mF|L&_Z|"Yy-P>'
    assert docstring_raises_0.type_name == 'q'
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(docstring_deprecated_0, none_type_0, str_0, str_0, none_type_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert f'{type(docstring_param_0.args).__module__}.{type(docstring_param_0.args).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == 'mF|L&_Z|"Yy-P>'
    assert docstring_param_0.type_name == 'mF|L&_Z|"Yy-P>'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_1, docstring_deprecated_0, none_type_0, str_1)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['mF|L&_Z|"Yy-P>', 'q']
    assert docstring_returns_0.description == 'q'
    assert f'{type(docstring_returns_0.type_name).__module__}.{type(docstring_returns_0.type_name).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name == 'q'
    list_1 = []
    docstring_1 = module_0.Docstring()
    none_type_1 = None
    bool_0 = True
    docstring_returns_1 = module_0.DocstringReturns(list_1, list_1, none_type_1, bool_0)
    assert docstring_returns_1.args == []
    assert docstring_returns_1.description == []
    docstring_raises_1 = module_0.DocstringRaises(list_1, none_type_1, docstring_returns_1)
    assert docstring_raises_1.args == []

def test_case_35():
    str_0 = 'o<q(OSftrdJFm1P@E1Nr'
    list_0 = [str_0, str_0]
    none_type_0 = None
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(list_0, none_type_0, list_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['o<q(OSftrdJFm1P@E1Nr', 'o<q(OSftrdJFm1P@E1Nr']
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name == ['o<q(OSftrdJFm1P@E1Nr', 'o<q(OSftrdJFm1P@E1Nr']
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name is None
    parse_error_0 = module_0.ParseError()
    docstring_style_0 = module_0.DocstringStyle.NUMPYDOC
    none_type_1 = None
    bool_1 = False
    docstring_1 = module_0.Docstring(none_type_0)
    docstring_returns_1 = module_0.DocstringReturns(docstring_style_0, docstring_style_0, none_type_1, bool_1)
    assert docstring_returns_1.args == module_0.DocstringStyle.NUMPYDOC
    assert docstring_returns_1.description == module_0.DocstringStyle.NUMPYDOC
    rendering_style_0 = module_0.RenderingStyle.CLEAN
    list_1 = []
    str_1 = 'B[&8W7L'
    docstring_param_0 = module_0.DocstringParam(list_1, none_type_1, docstring_style_0, str_1, none_type_1, bool_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == []
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == module_0.DocstringStyle.NUMPYDOC
    assert docstring_param_0.type_name == 'B[&8W7L'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is False
    none_type_2 = None
    rendering_style_1 = module_0.RenderingStyle.EXPANDED
    docstring_returns_2 = module_0.DocstringReturns(list_1, str_1, list_1, none_type_2)
    assert docstring_returns_2.args == []
    assert docstring_returns_2.description == 'B[&8W7L'
    bool_2 = True
    docstring_param_1 = module_0.DocstringParam(docstring_returns_2, none_type_2, docstring_style_0, rendering_style_1, bool_2, rendering_style_0)
    assert f'{type(docstring_param_1.args).__module__}.{type(docstring_param_1.args).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_param_1.description is None
    docstring_2 = module_0.Docstring(none_type_2)
    docstring_meta_0 = module_0.DocstringMeta(none_type_2, none_type_2)

def test_case_36():
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(none_type_0, none_type_0, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    bool_0 = True
    docstring_meta_0 = module_0.DocstringMeta(docstring_deprecated_0, none_type_0)
    docstring_returns_0 = module_0.DocstringReturns(none_type_0, none_type_0, none_type_0, bool_0, none_type_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args is None
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name is None
    str_0 = '}/U Ghz'
    list_0 = [str_0]
    docstring_meta_1 = module_0.DocstringMeta(docstring_deprecated_0, none_type_0)
    docstring_raises_0 = module_0.DocstringRaises(list_0, none_type_0, list_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == ['}/U Ghz']
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name == ['}/U Ghz']

@pytest.mark.xfail(strict=True)
def test_case_37():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    rendering_style_0 = module_0.RenderingStyle.CLEAN
    str_0 = '.D~Q\n~bd>,\x0cI'
    docstring_meta_0 = module_0.DocstringMeta(rendering_style_0, rendering_style_0)
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(rendering_style_0, docstring_meta_0, none_type_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == module_0.RenderingStyle.CLEAN
    assert f'{type(docstring_raises_0.description).__module__}.{type(docstring_raises_0.description).__qualname__}' == 'docstring_parser.common.DocstringMeta'
    assert docstring_raises_0.type_name is None
    str_1 = '\tO`D0l'
    docstring_deprecated_0 = module_0.DocstringDeprecated(str_1, none_type_0, str_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == '\tO`D0l'
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version == '.D~Q\n~bd>,\x0cI'
    str_2 = 'receives'
    list_0 = [str_0, str_1, str_2, str_1]
    docstring_example_0 = module_0.DocstringExample(list_0, str_2, str_1)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['.D~Q\n~bd>,\x0cI', '\tO`D0l', 'receives', '\tO`D0l']
    assert docstring_example_0.description == '\tO`D0l'
    assert docstring_example_0.snippet == 'receives'
    str_3 = 'WAM*:Z9Gh'
    docstring_style_0 = module_0.DocstringStyle.NUMPYDOC
    docstring_style_1 = module_0.DocstringStyle.EPYDOC
    docstring_param_0 = module_0.DocstringParam(list_0, docstring_0, docstring_style_1, none_type_0, none_type_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['.D~Q\n~bd>,\x0cI', '\tO`D0l', 'receives', '\tO`D0l']
    assert f'{type(docstring_param_0.description).__module__}.{type(docstring_param_0.description).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_param_0.arg_name == module_0.DocstringStyle.EPYDOC
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    docstring_meta_1 = module_0.DocstringMeta(docstring_0, str_1)
    docstring_example_1 = module_0.DocstringExample(str_1, docstring_0, str_2)
    assert docstring_example_1.args == '\tO`D0l'
    str_4 = 'param'
    list_1 = [str_3, str_4]
    docstring_raises_1 = module_0.DocstringRaises(list_1, str_4, list_1)
    assert docstring_raises_1.args == ['WAM*:Z9Gh', 'param']
    docstring_style_0.__getitem__(docstring_raises_0, docstring_meta_0)

def test_case_38():
    str_0 = 'JYm'
    list_0 = [str_0]
    none_type_0 = None
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_1 = 'Tj=}Pv4fuO!C_/m@\tM'
    docstring_param_0 = module_0.DocstringParam(list_0, none_type_0, str_1, str_1, none_type_0, str_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['JYm']
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == 'Tj=}Pv4fuO!C_/m@\tM'
    assert docstring_param_0.type_name == 'Tj=}Pv4fuO!C_/m@\tM'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == 'Tj=}Pv4fuO!C_/m@\tM'
    docstring_deprecated_0 = module_0.DocstringDeprecated(docstring_param_0, none_type_0, str_1)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert f'{type(docstring_deprecated_0.args).__module__}.{type(docstring_deprecated_0.args).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version == 'Tj=}Pv4fuO!C_/m@\tM'
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_0, docstring_deprecated_0, docstring_param_0)
    assert docstring_deprecated_1.args == ['JYm']
    docstring_1 = module_0.Docstring()

def test_case_39():
    str_0 = 'DQ'
    str_1 = "`'\tIv [&^:5:V"
    str_2 = 'sm9Kh$J6S"MlLeH]'
    list_0 = [str_0, str_1, str_2]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(str_1, str_2, list_0, str_2, none_type_0, str_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == "`'\tIv [&^:5:V"
    assert docstring_param_0.description == 'sm9Kh$J6S"MlLeH]'
    assert docstring_param_0.arg_name == ['DQ', "`'\tIv [&^:5:V", 'sm9Kh$J6S"MlLeH]']
    assert docstring_param_0.type_name == 'sm9Kh$J6S"MlLeH]'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == "`'\tIv [&^:5:V"
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_param_1 = module_0.DocstringParam(list_0, str_2, str_0, str_1, str_1, str_2)
    assert docstring_param_1.args == ['DQ', "`'\tIv [&^:5:V", 'sm9Kh$J6S"MlLeH]']
    assert docstring_param_1.description == 'sm9Kh$J6S"MlLeH]'
    list_1 = [str_0]
    docstring_example_0 = module_0.DocstringExample(list_1, str_0, list_1)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['DQ']
    assert docstring_example_0.description == ['DQ']
    assert docstring_example_0.snippet == 'DQ'
    bool_0 = True
    docstring_returns_0 = module_0.DocstringReturns(list_1, str_0, str_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['DQ']
    assert docstring_returns_0.description == 'DQ'
    assert docstring_returns_0.type_name == 'DQ'
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name is None
    docstring_style_0 = module_0.DocstringStyle.REST
    parse_error_0 = module_0.ParseError()
    parse_error_1 = module_0.ParseError()
    str_3 = "M3:v9yf'e^)Q8"
    none_type_1 = None
    docstring_param_2 = module_0.DocstringParam(parse_error_0, docstring_style_0, docstring_style_0, str_3, none_type_1, str_3)
    assert f'{type(docstring_param_2.args).__module__}.{type(docstring_param_2.args).__qualname__}' == 'docstring_parser.common.ParseError'
    assert docstring_param_2.description == module_0.DocstringStyle.REST
    str_4 = "c6lE\nNnI ]')/PZ.gx1"
    docstring_param_3 = module_0.DocstringParam(docstring_style_0, docstring_param_2, str_4, str_4, parse_error_0, str_4)
    assert docstring_param_3.args == module_0.DocstringStyle.REST
    assert f'{type(docstring_param_3.description).__module__}.{type(docstring_param_3.description).__qualname__}' == 'docstring_parser.common.DocstringParam'
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    bool_1 = True
    docstring_returns_1 = module_0.DocstringReturns(docstring_style_0, docstring_style_0, parse_error_0, bool_1)
    assert docstring_returns_1.args == module_0.DocstringStyle.REST
    assert docstring_returns_1.description == module_0.DocstringStyle.REST

@pytest.mark.xfail(strict=True)
def test_case_40():
    bool_0 = True
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(bool_0, none_type_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_style_0 = module_0.DocstringStyle.EPYDOC
    module_1.unique(docstring_style_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = 'For sections like returns or yields.'
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.unique(list_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    list_0 = []
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, none_type_0, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    module_1.EnumMeta()

def test_case_43():
    str_0 = 'Params'
    str_1 = 'DR]u0R41'
    list_0 = [str_0, str_1, str_1]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(list_0, str_1, list_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['Params', 'DR]u0R41', 'DR]u0R41']
    assert docstring_param_0.description == 'DR]u0R41'
    assert docstring_param_0.arg_name == ['Params', 'DR]u0R41', 'DR]u0R41']
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_2 = '>U#'
    docstring_0 = module_0.Docstring(str_2)
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'

def test_case_44():
    pass

@pytest.mark.xfail(strict=True)
def test_case_45():
    list_0 = []
    docstring_meta_0 = module_0.DocstringMeta(list_0, list_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    rendering_style_0 = module_0.RenderingStyle.CLEAN
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(docstring_meta_0, docstring_0, none_type_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert f'{type(docstring_example_0.args).__module__}.{type(docstring_example_0.args).__qualname__}' == 'docstring_parser.common.DocstringMeta'
    assert docstring_example_0.description is None
    assert f'{type(docstring_example_0.snippet).__module__}.{type(docstring_example_0.snippet).__qualname__}' == 'docstring_parser.common.Docstring'
    str_0 = 'ln'
    list_1 = [str_0]
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(list_1, str_0, rendering_style_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['ln']
    assert docstring_returns_0.description == 'ln'
    assert docstring_returns_0.type_name == module_0.RenderingStyle.CLEAN
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name is None
    docstring_0.__setitem__(rendering_style_0, docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = False
    docstring_0 = module_0.Docstring(bool_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_0 = '-$Lg<(+'
    list_0 = [str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['-$Lg<(+']
    assert docstring_deprecated_0.description == '-$Lg<(+'
    assert docstring_deprecated_0.version == '-$Lg<(+'
    docstring_example_0 = module_0.DocstringExample(str_0, bool_0, list_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == '-$Lg<(+'
    assert docstring_example_0.description == ['-$Lg<(+']
    assert docstring_example_0.snippet is False
    none_type_0 = None
    module_1.unique(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = ''
    rendering_style_0 = module_0.RenderingStyle.EXPANDED
    rendering_style_0.__setattr__(rendering_style_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = ' ya9'
    list_0 = [str_0, str_0, str_0]
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_0 = None
    parse_error_0 = module_0.ParseError()
    docstring_meta_1 = module_0.DocstringMeta(list_0, none_type_0)
    list_1 = []
    none_type_1 = None
    docstring_returns_0 = module_0.DocstringReturns(list_1, none_type_1, none_type_1, none_type_1)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == []
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name is None
    str_1 = '{m4R_x'
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_1, str_1, str_1)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description == '{m4R_x'
    assert docstring_deprecated_0.version == '{m4R_x'
    docstring_meta_2 = module_0.DocstringMeta(list_1, list_1)
    parse_error_1 = module_0.ParseError()
    docstring_meta_3 = module_0.DocstringMeta(list_1, none_type_0)
    module_1.unique(docstring_meta_2)

def test_case_49():
    str_0 = ''
    str_1 = ''
    list_0 = [str_1, str_0]
    str_2 = 'p+\nhg[G6bD\x0biIWOl'
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_2)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_1 = [str_0]
    docstring_example_0 = module_0.DocstringExample(list_1, str_0, str_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['']
    assert docstring_example_0.description == ''
    assert docstring_example_0.snippet == ''
    docstring_meta_1 = module_0.DocstringMeta(list_1, str_0)
    with pytest.raises(TypeError):
        list_1.__contains__(list_1, list_0)