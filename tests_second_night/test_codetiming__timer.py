# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import codetiming._timer as module_0
import collections as module_1

def test_case_0():
    timer_error_0 = module_0.TimerError()
    timer_0 = module_0.Timer()
    assert timer_0.text == 'Elapsed time: {:0.4f} seconds'
    assert module_0.Timer.text == 'Elapsed time: {:0.4f} seconds'
    timer_1 = timer_0.__enter__()
    assert f'{type(timer_1).__module__}.{type(timer_1).__qualname__}' == 'codetiming._timer.Timer'
    assert timer_1.name is None
    assert timer_1.text == 'Elapsed time: {:0.4f} seconds'
    none_type_0 = timer_0.__exit__()
    assert timer_0.last == pytest.approx(0.00020358400070108473, abs=0.01, rel=0.01)
    assert timer_1.last == pytest.approx(0.00020358400070108473, abs=0.01, rel=0.01)
    str_0 = ',(\r[x*&B_2'
    timer_2 = module_0.Timer(str_0)
    assert timer_2.text == 'Elapsed time: {:0.4f} seconds'
    none_type_1 = timer_1.start()
    with pytest.raises(module_0.TimerError):
        timer_0.start()

def test_case_1():
    timer_0 = module_0.Timer()
    assert timer_0.text == 'Elapsed time: {:0.4f} seconds'
    assert module_0.Timer.text == 'Elapsed time: {:0.4f} seconds'
    timer_1 = timer_0.__enter__()
    assert f'{type(timer_1).__module__}.{type(timer_1).__qualname__}' == 'codetiming._timer.Timer'
    assert timer_1.name is None
    assert timer_1.text == 'Elapsed time: {:0.4f} seconds'
    none_type_0 = timer_1.__exit__()
    assert timer_0.last == pytest.approx(0.00013062500511296093, abs=0.01, rel=0.01)
    assert timer_1.last == pytest.approx(0.00013062500511296093, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_2():
    timer_0 = module_0.Timer()
    assert timer_0.text == 'Elapsed time: {:0.4f} seconds'
    assert module_0.Timer.text == 'Elapsed time: {:0.4f} seconds'
    timer_0.__exit__()

@pytest.mark.xfail(strict=True)
def test_case_3():
    timer_error_0 = module_0.TimerError()
    none_type_0 = None
    timer_0 = module_0.Timer(logger=none_type_0)
    assert timer_0.text == 'Elapsed time: {:0.4f} seconds'
    assert module_0.Timer.text == 'Elapsed time: {:0.4f} seconds'
    timer_1 = timer_0.__enter__()
    assert f'{type(timer_1).__module__}.{type(timer_1).__qualname__}' == 'codetiming._timer.Timer'
    assert timer_1.name is None
    assert timer_1.text == 'Elapsed time: {:0.4f} seconds'
    assert timer_1.logger is None
    none_type_1 = timer_1.__exit__()
    assert timer_0.last == pytest.approx(0.0001951669983100146, abs=0.01, rel=0.01)
    assert timer_1.last == pytest.approx(0.0001951669983100146, abs=0.01, rel=0.01)
    str_0 = 'P\'"yBbg\x0boH].-`(.T'
    timer_2 = module_0.Timer(text=str_0)
    user_dict_0 = module_1.UserDict()
    user_dict_0.pop(timer_2)

def test_case_4():
    timer_error_0 = module_0.TimerError()
    timer_0 = module_0.Timer(timer_error_0)
    assert timer_0.text == 'Elapsed time: {:0.4f} seconds'
    assert module_0.Timer.text == 'Elapsed time: {:0.4f} seconds'
    timer_1 = timer_0.__enter__()
    assert f'{type(timer_1).__module__}.{type(timer_1).__qualname__}' == 'codetiming._timer.Timer'
    assert f'{type(timer_1.name).__module__}.{type(timer_1.name).__qualname__}' == 'codetiming._timer.TimerError'
    assert timer_1.text == 'Elapsed time: {:0.4f} seconds'
    none_type_0 = timer_1.__exit__()
    assert timer_0.last == pytest.approx(0.00014808300329605117, abs=0.01, rel=0.01)
    assert timer_1.last == pytest.approx(0.00014808300329605117, abs=0.01, rel=0.01)
    timer_2 = module_0.Timer(logger=none_type_0)
    assert timer_2.text == 'Elapsed time: {:0.4f} seconds'