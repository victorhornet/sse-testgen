# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser.rest as module_0
import docstring_parser.common as module_1
import inspect as module_2
import token as module_3
import tokenize as module_4
import ast as module_5
import re as module_6

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'XMy>_'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'XMy>_'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = "hv\t*'x\t-"
    str_2 = 'HeBTkW0}}x#\rm#d=C>#:'
    docstring_1 = module_0.parse(str_2)
    assert docstring_1.short_description == 'HeBTkW0}}x#\rm#d=C>#:'
    docstring_2 = module_0.parse(str_1)
    assert docstring_2.short_description == "hv      *'x     -"
    str_3 = module_0.compose(docstring_0, str_0)
    assert str_3 == 'XMy>_'
    module_0.parse(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'Note'
    var_0 = module_2.isfunction(str_0)
    var_1 = var_0.__eq__(str_0)
    var_1.delimit(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'c6@(1b\nulQ!ZrP7lM'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'c6@(1b'
    assert docstring_0.long_description == 'ulQ!ZrP7lM'
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = 'w6b>Sz50G\x0bg>xk '
    module_2.getouterframes(str_1)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '+rX'
    module_3.ISNONTERMINAL(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_4.tokenize(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 727.48
    var_0 = module_2.ismethod(float_0)
    var_1 = var_0.__eq__(float_0)
    var_1.isalpha()

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    str_0 = '3i:]U'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '3i:]U'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == '3i:]U'
    docstring_0.insert(none_type_0, docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "EkO; C.H#$'!{+CY2LG"
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == "EkO; C.H#$'!{+CY2LG"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    module_5.copy_location(str_0, docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'A'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'A'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = "V&{K9+e7)#p,'jlF"
    docstring_1 = module_0.parse(str_1)
    assert docstring_1.short_description == "V&{K9+e7)#p,'jlF"
    docstring_2 = module_0.parse(str_1)
    assert docstring_2.short_description == "V&{K9+e7)#p,'jlF"
    str_2 = module_0.compose(docstring_1)
    assert str_2 == "V&{K9+e7)#p,'jlF"
    str_3 = "S'MtvWIjzo}\re4[R;"
    docstring_3 = module_0.parse(str_3)
    assert docstring_3.short_description == "S'MtvWIjzo}\re4[R;"
    docstring_4 = module_0.parse(str_2)
    assert docstring_4.short_description == "V&{K9+e7)#p,'jlF"
    module_2.getclasstree(str_2)

def test_case_9():
    str_0 = '{qOu)F\x0cAMX\'@JDxK$"X'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '{qOu)F\x0cAMX\'@JDxK$"X'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    module_0.compose(none_type_0, indent=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'dhC0OG<MGUGT@/'
    var_0 = module_5.get_source_segment(str_0, str_0)
    module_0.compose(var_0)

def test_case_12():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    with pytest.raises(TypeError):
        module_2.getfullargspec(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '\r'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    module_0.parse(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'rog5S'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'rog5S'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    none_type_0 = None
    docstring_1 = module_0.parse(none_type_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    docstring_2 = module_0.parse(str_0)
    assert docstring_2.short_description == 'rog5S'
    none_type_1 = None
    str_1 = '?m/1'
    docstring_3 = module_0.parse(str_1)
    assert docstring_3.short_description == '?m/1'
    module_0.compose(none_type_1, docstring_2)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'jb\x0c$9}}cw?tWBxX'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'jb\x0c$9}}cw?tWBxX'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == 'jb\x0c$9}}cw?tWBxX'
    str_1 = 'g;'
    docstring_2 = module_0.parse(str_1)
    assert docstring_2.short_description == 'g;'
    var_0 = module_2.isbuiltin(docstring_2)
    var_0.update(docstring_1)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'Z!eQ'
    module_0.compose(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    var_0 = module_2.isasyncgen(none_type_0)
    var_0.__copy__()

@pytest.mark.xfail(strict=True)
def test_case_18():
    var_0 = module_6.purge()
    module_0.compose(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = '1`xvAbP]\tH9)mYEJr'
    module_4.tokenize(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'pi jY1mR"h=%'
    var_0 = module_2.isroutine(str_0)
    module_0.compose(str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '_FWvSP\x0c5: M}EO;'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '_FWvSP\x0c5: M}EO;'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    none_type_0 = None
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = 'Gb6dRmk]A'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'Gb6dRmk]A'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == 'Gb6dRmk]A'
    bytes_0 = b'\xf3(`\x8ca\x0b\xc4+\xe9U\x90\xdf\xa8\xdc&)\xde%-'
    docstring_2 = module_0.parse(str_0)
    assert docstring_2.short_description == 'Gb6dRmk]A'
    var_0 = module_2.isawaitable(bytes_0)
    module_0.compose(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = 'I*>r1>p_Aw'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'I*>r1>p_Aw'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    none_type_0 = None
    module_2.getgeneratorstate(none_type_0)

def test_case_25():
    str_0 = 'N;,Vpq^EC'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'N;,Vpq^EC'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = '".'
    str_2 = module_0.compose(docstring_0, indent=str_1)
    assert str_2 == 'N;,Vpq^EC'

@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    module_2.walktree(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = ";\rW5d 6'mk"
    module_0.compose(str_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    str_0 = '\\I3bi'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '\\I3bi'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(none_type_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    docstring_2 = module_0.parse(none_type_0)
    module_0.compose(str_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_0 = '\x0bW]"fs|qoyA\t"'
    docstring_1 = module_0.parse(str_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description == 'W]"fs|qoyA     "'
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    none_type_1 = None
    module_5.parse(none_type_1, type_comments=none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = '}!C<;K_]_]OCbgh1oe2'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '}!C<;K_]_]OCbgh1oe2'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    none_type_0 = None
    str_1 = 't|7&2S,E)8y?RYe'
    str_2 = module_0.compose(docstring_0, indent=str_1)
    assert str_2 == '}!C<;K_]_]OCbgh1oe2'
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == '}!C<;K_]_]OCbgh1oe2'
    module_2.walktree(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = 'BRP^`)C}\tEI1z&;i'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'BRP^`)C}        EI1z&;i'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == 'BRP^`)C}        EI1z&;i'
    docstring_2 = module_0.parse(str_0)
    assert docstring_2.short_description == 'BRP^`)C}        EI1z&;i'
    none_type_0 = None
    module_0.compose(none_type_0, indent=docstring_1)

def test_case_32():
    str_0 = 'Reference'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'Reference'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST

@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_0 = 'title key type'
    str_1 = module_0.compose(docstring_0)
    assert str_1 == ''
    docstring_1 = module_0.parse(str_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description == 'title key type'
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    var_0 = module_2.isroutine(none_type_0)
    var_0.index(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    module_2.signature(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    module_6.template(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    module_0.compose(none_type_0, indent=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = False
    var_0 = module_2.iscoroutinefunction(bool_0)
    module_0.compose(var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    str_0 = 'value'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'value'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = '"^\'$9lU\n$N*\x0c'
    docstring_1 = module_0.parse(str_1)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description == '"^\'$9lU'
    assert docstring_1.long_description == '$N*'
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    str_2 = 'Z7$S?6CeyKzI|'
    docstring_2 = module_0.parse(none_type_0)
    assert f'{type(docstring_2).__module__}.{type(docstring_2).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_2.short_description is None
    assert docstring_2.long_description is None
    assert docstring_2.blank_after_short_description is False
    assert docstring_2.blank_after_long_description is False
    assert docstring_2.meta == []
    assert docstring_2.style == module_1.DocstringStyle.REST
    module_0.compose(none_type_0, indent=str_2)

def test_case_39():
    str_0 = '11d( H{aphZ\r+UkDGZj'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '11d( H{aphZ\r+UkDGZj'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = module_0.compose(docstring_0)
    assert str_1 == '11d( H{aphZ\r+UkDGZj'
    with pytest.raises(TypeError):
        module_2.getfile(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = 'Idy"[Lx|9'
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(str_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description == 'Idy"[Lx|9'
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    docstring_2 = module_0.parse(none_type_0)
    str_1 = module_0.compose(docstring_0)
    assert str_1 == ''
    module_0.parse(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = '/MrIq'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '/MrIq'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = 'APQ<^gUK$<E'
    docstring_1 = module_0.parse(str_1)
    assert docstring_1.short_description == 'APQ<^gUK$<E'
    str_2 = module_0.compose(docstring_1, docstring_1)
    assert str_2 == 'APQ<^gUK$<E'
    str_3 = module_0.compose(docstring_1, str_1, str_1)
    assert str_3 == 'APQ<^gUK$<E'
    none_type_0 = None
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    none_type_0 = None
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = 'J"3v'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'J"3v'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = '1\\rXNo'
    none_type_0 = None
    docstring_1 = module_0.parse(none_type_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    docstring_2 = module_0.parse(str_1)
    assert docstring_2.short_description == '1\\rXNo'
    module_0.compose(str_1, str_1)

@pytest.mark.xfail(strict=True)
def test_case_44():
    none_type_0 = None
    module_0.compose(none_type_0)

def test_case_45():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST

@pytest.mark.xfail(strict=True)
def test_case_46():
    none_type_0 = None
    var_0 = module_2.isasyncgenfunction(none_type_0)
    docstring_0 = module_0.parse(var_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_0 = '\x0b(BH,O4'
    docstring_1 = module_0.parse(str_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description == '(BH,O4'
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    module_0.compose(var_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = 'O!5kAC3t=\x0b_v4y\tf'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'O!5kAC3t=\x0b_v4y  f'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    none_type_0 = None
    module_2.indentsize(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    set_0 = set()
    var_0 = module_4.generate_tokens(set_0)
    module_0.compose(var_0)

def test_case_49():
    str_0 = 'JD%E&a:rl>z|iT*'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'JD%E&a:rl>z|iT*'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == 'JD%E&a:rl>z|iT*'
    str_1 = module_0.compose(docstring_1, str_0)
    assert str_1 == 'JD%E&a:rl>z|iT*'
    str_2 = module_0.compose(docstring_1, docstring_1)
    assert str_2 == 'JD%E&a:rl>z|iT*'
    with pytest.raises(TypeError):
        module_2.getgeneratorlocals(str_0)