# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser.numpydoc as module_0
import inspect as module_1
import tokenize as module_2
import ast as module_3
import docstring_parser.common as module_4
import re as module_5
import collections as module_6

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'E1;GT,t)5\x0c*}?Dr;n&'
    section_0 = module_0.Section(str_0, str_0)
    assert f'{type(module_0.Section.title_pattern).__module__}.{type(module_0.Section.title_pattern).__qualname__}' == 'builtins.property'
    var_0 = module_1.isawaitable(section_0)
    var_0.visit_Constant(section_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_1.getargvalues(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '%^3\\~'
    section_0 = module_0.Section(str_0, str_0)
    assert f'{type(module_0.Section.title_pattern).__module__}.{type(module_0.Section.title_pattern).__qualname__}' == 'builtins.property'
    module_1.stack(section_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 728
    module_2.tokenize(int_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'FvFA)bEZs:30gc'
    sphinx_section_0 = module_0._SphinxSection(str_0, str_0)
    assert f'{type(module_0._SphinxSection.title_pattern).__module__}.{type(module_0._SphinxSection.title_pattern).__qualname__}' == 'builtins.property'
    iterable_0 = sphinx_section_0.parse(str_0)
    none_type_0 = None
    none_type_1 = None
    var_0 = module_3.iter_fields(none_type_1)
    var_0.__contains__(none_type_0)

def test_case_5():
    none_type_0 = None
    str_0 = '!<<{h;rN'
    yields_section_0 = module_0.YieldsSection(none_type_0, str_0)
    assert module_0.YieldsSection.is_generator is True

def test_case_6():
    str_0 = '^wBr>]b'
    str_1 = '6o_Td\t<O5'
    examples_section_0 = module_0.ExamplesSection(str_0, str_1)
    str_2 = 'inh2du'
    iterable_0 = examples_section_0.parse(str_2)
    str_3 = 'K2z8{CRbcp'
    iterable_1 = examples_section_0.parse(str_3)
    str_4 = 'GmPs{85Z0m5w'
    k_v_section_0 = module_0._KVSection(str_1, str_4)
    deprecation_section_0 = module_0.DeprecationSection(str_1, str_1)
    iterable_2 = examples_section_0.parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'c39N'
    sphinx_section_0 = module_0._SphinxSection(str_0, str_0)
    assert f'{type(module_0._SphinxSection.title_pattern).__module__}.{type(module_0._SphinxSection.title_pattern).__qualname__}' == 'builtins.property'
    iterable_0 = sphinx_section_0.parse(str_0)
    raises_section_0 = module_0.RaisesSection(str_0, str_0)
    param_section_0 = module_0.ParamSection(str_0, raises_section_0)
    module_1.getargvalues(iterable_0)

def test_case_8():
    none_type_0 = None
    returns_section_0 = module_0.ReturnsSection(none_type_0, none_type_0)
    str_0 = '\x0cb||>Tz?Ab\t\r~'
    yields_section_0 = module_0.YieldsSection(returns_section_0, str_0)
    assert module_0.YieldsSection.is_generator is True
    with pytest.raises(AttributeError):
        module_1.getattr_static(none_type_0, yields_section_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '54'
    none_type_0 = None
    yields_section_0 = module_0.YieldsSection(none_type_0, str_0)
    assert module_0.YieldsSection.is_generator is True
    module_1.walktree(str_0, str_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    str_0 = ';83p|6D'
    none_type_0 = None
    var_0 = module_1.formatargspec(str_0, kwonlyargs=str_0, formatvarargs=none_type_0, formatannotation=none_type_0)
    var_0.__and__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '>gZZZ[\\Xjcj'
    returns_section_0 = module_0.ReturnsSection(str_0, str_0)
    raises_section_0 = module_0.RaisesSection(str_0, str_0)
    iterable_0 = raises_section_0.parse(str_0)
    none_type_0 = None
    iterable_1 = raises_section_0.parse(none_type_0)
    var_0 = module_1.getmodule(none_type_0)
    var_0.visit_Ellipsis(var_0)

def test_case_12():
    str_0 = 'n%cl]\rlOhl~O\x0cm3|tJ\n{'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'n%cl]\rlOhl~O\x0cm3|tJ'
    assert docstring_0.long_description == '{'
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC

def test_case_13():
    str_0 = 'MHyg^#3ZlK\x0b?'
    returns_section_0 = module_0.ReturnsSection(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    str_0 = ''
    param_section_0 = module_0.ParamSection(none_type_0, str_0)
    param_section_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '2He^W5nHi`gt'
    none_type_0 = None
    examples_section_0 = module_0.ExamplesSection(str_0, none_type_0)
    module_1.getsourcefile(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'sMTRK4,l o sa":9LU/'
    raises_section_0 = module_0.RaisesSection(str_0, str_0)
    yields_section_0 = module_0.YieldsSection(raises_section_0, str_0)
    assert module_0.YieldsSection.is_generator is True
    str_1 = '~Rgm3#},Q>x_j{-U}G&'
    iterable_0 = raises_section_0.parse(str_1)
    deprecation_section_0 = module_0.DeprecationSection(str_1, str_1)
    iterable_1 = deprecation_section_0.parse(str_1)
    str_2 = '439H3m1\r*v1yy*do\x0c\\2'
    iterable_2 = deprecation_section_0.parse(str_2)
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    module_1.getargvalues(numpydoc_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'Parser for numpydoc parameter sections.\n\n    E.g. any section that looks like this:\n        arg_name\n            arg_description\n        arg_2 : type, optional\n            descriptions can also span...\n            ... multiple lines\n    '
    returns_section_0 = module_0.ReturnsSection(str_0, str_0)
    yields_section_0 = module_0.YieldsSection(returns_section_0, str_0)
    assert module_0.YieldsSection.is_generator is True
    examples_section_0 = module_0.ExamplesSection(str_0, yields_section_0)
    param_section_0 = module_0.ParamSection(str_0, str_0)
    none_type_0 = None
    iterable_0 = returns_section_0.parse(none_type_0)
    var_0 = module_3.iter_fields(str_0)
    str_1 = 'Attributes'
    iterable_1 = returns_section_0.parse(str_1)
    iterable_2 = yields_section_0.parse(var_0)
    deprecation_section_0 = module_0.DeprecationSection(var_0, returns_section_0)
    iterable_3 = param_section_0.parse(str_0)
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'Parser for numpydoc parameter sections.'
    assert docstring_0.long_description == 'E.g. any section that looks like this:\n    arg_name\n        arg_description\n    arg_2 : type, optional\n        descriptions can also span...\n        ... multiple lines'
    assert docstring_0.blank_after_short_description is True
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    k_v_section_0 = module_0._KVSection(docstring_0, str_0)
    iterable_4 = k_v_section_0.parse(yields_section_0)
    raises_section_0 = module_0.RaisesSection(str_0, returns_section_0)
    numpydoc_parser_0 = module_0.NumpydocParser()
    section_0 = module_0.Section(str_0, str_0)
    var_1 = module_1.isgenerator(docstring_0)
    examples_section_1 = module_0.ExamplesSection(var_1, var_1)
    var_2 = var_1.__repr__()
    var_2.visit_MatchClass(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '.VCj'
    str_1 = '\n\n'
    returns_section_0 = module_0.ReturnsSection(str_0, str_1)
    none_type_0 = None
    str_2 = '^[^\\s].*$'
    k_v_section_0 = module_0._KVSection(none_type_0, returns_section_0)
    var_0 = module_1.unwrap(none_type_0)
    param_section_0 = module_0.ParamSection(str_0, var_0)
    section_0 = module_0.Section(str_1, str_2)
    assert f'{type(module_0.Section.title_pattern).__module__}.{type(module_0.Section.title_pattern).__qualname__}' == 'builtins.property'
    iterable_0 = section_0.parse(returns_section_0)
    var_0.visit_ImportFrom(str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    module_1.signature(none_type_0, follow_wrapped=none_type_0, globals=none_type_0, eval_str=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    bool_0 = True
    module_0.parse(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    sphinx_section_0 = module_0._SphinxSection(none_type_0, none_type_0)
    assert f'{type(module_0._SphinxSection.title_pattern).__module__}.{type(module_0._SphinxSection.title_pattern).__qualname__}' == 'builtins.property'
    str_0 = 'U(eaKQc-KH!L]'
    str_1 = 'E\\\rlN\nU[-W\x0b)q'
    iterable_0 = sphinx_section_0.parse(str_1)
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'U(eaKQc-KH!L]'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    docstring_1 = module_0.parse(none_type_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_4.DocstringStyle.NUMPYDOC
    module_0.compose(none_type_0, sphinx_section_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'i_B%'
    str_1 = '|j&T|O\rKZ#\x0bDL'
    section_0 = module_0.Section(str_0, str_1)
    assert f'{type(module_0.Section.title_pattern).__module__}.{type(module_0.Section.title_pattern).__qualname__}' == 'builtins.property'
    str_2 = '~QJ2N7\x0c]k_s'
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_2)
    str_3 = '\r0l@Si$st2O&@F2'
    iterable_0 = section_0.parse(str_3)
    str_4 = 'v^Dm'
    var_0 = module_1.isgetsetdescriptor(str_4)
    str_5 = 'e ~sh'
    var_0.add_section(str_5)

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    var_0 = module_1.isfunction(none_type_0)
    var_0.count(var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = 'vg*f=mnyl?B:_'
    none_type_0 = None
    returns_section_0 = module_0.ReturnsSection(none_type_0, str_0)
    examples_section_0 = module_0.ExamplesSection(str_0, str_0)
    str_1 = ']'
    docstring_0 = module_0.parse(str_1)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == ']'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    str_2 = 'a<|s{x1%\t#:n_%'
    str_3 = '^vhUl}#\nkh'
    iterable_0 = returns_section_0.parse(str_3)
    section_0 = module_0.Section(str_2, str_2)
    none_type_1 = None
    str_4 = 'Warnings'
    k_v_section_0 = module_0._KVSection(none_type_1, str_4)
    docstring_1 = module_0.parse(none_type_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_4.DocstringStyle.NUMPYDOC
    str_5 = 'EG:8xX}?@vSGZ'
    yields_section_0 = module_0.YieldsSection(str_2, str_5)
    assert module_0.YieldsSection.is_generator is True
    var_0 = module_5.purge()
    var_0.visit_Subscript(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = 'O.>s"=eO U<{v+{M'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'O.>s"=eO U<{v+{M'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    var_0 = module_1.ismethod(str_0)
    var_1 = var_0.__bool__()
    numpydoc_parser_0 = module_0.NumpydocParser()
    var_1.__iter__()

def test_case_26():
    str_0 = '_z\tb"yS q\x0b?W([4'
    with pytest.raises(ValueError):
        module_6.namedtuple(str_0, str_0, rename=str_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    none_type_0 = None
    var_0 = module_1.currentframe()
    var_0.parse(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b'\xfe\xdc\xd2\x95'
    str_0 = 'r'
    var_0 = module_1.indentsize(bytes_0)
    var_0.scan(str_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    str_0 = 'z8_;)C1bvr%*v.'
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    docstring_1 = module_0.parse(str_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description == 'z8_;)C1bvr%*v.'
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_4.DocstringStyle.NUMPYDOC
    str_1 = '.'
    section_0 = module_0.Section(none_type_0, str_1)
    section_0.setdefault(none_type_0)

def test_case_30():
    none_type_0 = None
    yields_section_0 = module_0.YieldsSection(none_type_0, none_type_0)
    assert module_0.YieldsSection.is_generator is True
    str_0 = 'No specification for "'
    with pytest.raises(TypeError):
        module_1.getfullargspec(str_0)

def test_case_31():
    str_0 = 'Related'
    yields_section_0 = module_0.YieldsSection(str_0, str_0)
    assert module_0.YieldsSection.is_generator is True

@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    var_0 = module_1.ismethoddescriptor(none_type_0)
    var_0.__delitem__(none_type_0)

def test_case_33():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    str_0 = 'type'
    docstring_0 = numpydoc_parser_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'type'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC

@pytest.mark.xfail(strict=True)
def test_case_34():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    str_0 = 'sBZ|uRK@%B9sq8'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'sBZ|uRK@%B9sq8'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    section_0 = module_0.Section(str_0, str_0)
    str_1 = '/Dd&uGuMO_rn$AR0'
    sphinx_section_0 = module_0._SphinxSection(docstring_0, str_1)
    module_0.compose(numpydoc_parser_0, numpydoc_parser_0, str_0)

def test_case_35():
    str_0 = '`~\\g0py {<eVoxUkN'
    none_type_0 = None
    returns_section_0 = module_0.ReturnsSection(str_0, none_type_0)
    section_0 = module_0.Section(str_0, str_0)
    assert f'{type(module_0.Section.title_pattern).__module__}.{type(module_0.Section.title_pattern).__qualname__}' == 'builtins.property'
    raises_section_0 = module_0.RaisesSection(returns_section_0, str_0)
    str_1 = 'EpnZqJ18j'
    iterable_0 = returns_section_0.parse(str_1)
    iterable_1 = raises_section_0.parse(iterable_0)
    str_2 = 'R&@.(R#R7AU][\x0c'
    deprecation_section_0 = module_0.DeprecationSection(str_2, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    module_5.fullmatch(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = '1W='
    yields_section_0 = module_0.YieldsSection(str_0, str_0)
    assert module_0.YieldsSection.is_generator is True
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    str_1 = '&;)L*agS@S(3?['
    raises_section_0 = module_0.RaisesSection(str_1, numpydoc_parser_0)
    none_type_0 = None
    numpydoc_parser_1 = module_0.NumpydocParser(none_type_0)
    str_2 = 'raises'
    docstring_0 = numpydoc_parser_0.parse(str_2)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'raises'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    numpydoc_parser_1.add_section(raises_section_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = '4{c}Dp'
    str_1 = '7<;@d3D;'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
    return_0 = module_3.Return(**dict_0)
    var_0 = module_1.getcomments(return_0)
    var_0.removeprefix(str_0)

def test_case_39():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_1.getfullargspec(none_type_0)

def test_case_40():
    none_type_0 = None
    str_0 = '/1wo$+ 1>}G'
    str_1 = '[ \t\r\x0c\x0b]*$'
    section_0 = module_0.Section(str_1, str_1)
    assert f'{type(module_0.Section.title_pattern).__module__}.{type(module_0.Section.title_pattern).__qualname__}' == 'builtins.property'
    iterable_0 = section_0.parse(str_1)
    yields_section_0 = module_0.YieldsSection(str_0, str_1)
    assert module_0.YieldsSection.is_generator is True
    sphinx_section_0 = module_0._SphinxSection(yields_section_0, none_type_0)
    assert f'{type(module_0._SphinxSection.title_pattern).__module__}.{type(module_0._SphinxSection.title_pattern).__qualname__}' == 'builtins.property'
    str_2 = ''
    iterable_1 = section_0.parse(str_1)
    raises_section_0 = module_0.RaisesSection(none_type_0, str_2)
    with pytest.raises(TypeError):
        module_1.get_annotations(iterable_0, globals=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    str_0 = 'T2\tx!~q7YDWvq]E%'
    none_type_0 = None
    var_0 = module_1.iscode(str_0)
    var_1 = var_0.__bool__()
    var_1.count(none_type_0, end=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = '#1['
    param_section_0 = module_0.ParamSection(str_0, str_0)
    iterable_0 = param_section_0.parse(str_0)
    none_type_0 = None
    examples_section_0 = module_0.ExamplesSection(str_0, none_type_0)
    iterable_1 = param_section_0.parse(str_0)
    module_3.literal_eval(iterable_0)

def test_case_43():
    str_0 = '^\\s+'
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '^\\s+'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    with pytest.raises(TypeError):
        module_1.getcallargs(docstring_0, *str_0)

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = 'sRubQu`|M3. '
    yields_section_0 = module_0.YieldsSection(str_0, str_0)
    assert module_0.YieldsSection.is_generator is True
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    yields_section_0.removeprefix(yields_section_0)

@pytest.mark.xfail(strict=True)
def test_case_45():
    none_type_0 = None
    module_5.match(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = 'exception'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'exception'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_4.DocstringStyle.NUMPYDOC
    docstring_0.visit_Compare(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    none_type_0 = None
    var_0 = module_1.isclass(none_type_0)
    var_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = "'\rk39HQiRW0:"
    module_1.getgeneratorstate(str_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    str_0 = 'SkpbVQ{/#J#fKDNL!'
    str_1 = 'XK\r1q*y((wCg['
    none_type_0 = None
    yields_section_0 = module_0.YieldsSection(none_type_0, str_1)
    assert module_0.YieldsSection.is_generator is True
    str_2 = '+[M^b>|'
    iterable_0 = yields_section_0.parse(str_0)
    raises_section_0 = module_0.RaisesSection(str_2, yields_section_0)
    iterable_1 = yields_section_0.parse(yields_section_0)
    var_0 = module_1.getmodule(none_type_0, none_type_0)
    var_0.isprintable()