# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser.rest as module_0
import docstring_parser.common as module_1
import ast as module_2
import inspect as module_3
import re as module_4
import tokenize as module_5

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'E\x0cPJsDU-M>Mi<z\r\tu'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'E\x0cPJsDU-M>Mi<z\r        u'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = module_0.compose(docstring_0, docstring_0, str_0)
    assert str_1 == 'E\x0cPJsDU-M>Mi<z\r        u'
    str_2 = module_0.compose(docstring_0, indent=str_0)
    assert str_2 == 'E\x0cPJsDU-M>Mi<z\r        u'
    str_3 = module_0.compose(docstring_0)
    assert str_3 == 'E\x0cPJsDU-M>Mi<z\r        u'
    module_0.parse(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    module_0.parse(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "o|*LQltrv2,'In,"
    module_0.compose(str_0)

def test_case_4():
    str_0 = "='xxwGm"
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == "='xxwGm"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'Nk `:R%RPd3zB)`cg \n'
    module_0.compose(str_0, indent=str_0)

def test_case_7():
    str_0 = '.:854\\6?'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '.:854\\6?'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = module_0.compose(docstring_0)
    assert str_1 == '.:854\\6?'
    str_2 = module_0.compose(docstring_0)
    assert str_2 == '.:854\\6?'
    none_type_0 = None
    with pytest.raises(TypeError):
        module_2.get_docstring(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_3.stack()
    var_0.__len__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_4.purge()
    docstring_0 = module_0.parse(var_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    module_0.compose(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '{\r itUE\t@C'
    str_1 = '\x0bPMHyg^#3ZlK\x0b?aml'
    docstring_0 = module_0.parse(str_1)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'PMHyg^#3ZlK\x0b?aml'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    module_0.compose(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 1537
    module_0.compose(int_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'kj_#f\n"\x0b#wL'
    module_0.compose(str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_3.currentframe()
    module_0.parse(var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '6Y_'
    module_0.compose(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '-'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '-'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    list_0 = [str_0, str_0, str_0]
    str_1 = 'L3Fw7G\r,.'
    docstring_1 = module_0.parse(str_1)
    assert docstring_1.short_description == 'L3Fw7G\r,.'
    var_0 = module_5.maybe(*list_0)
    docstring_2 = module_0.parse(str_0)
    assert docstring_2.short_description == '-'
    var_1 = var_0.__ne__(str_0)
    var_1.visit_YieldFrom(str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = '\x0c}y'
    none_type_0 = None
    var_0 = module_3.trace(str_0)
    var_0.__getitem__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = ''
    docstring_0 = module_0.parse(str_0)
    docstring_1 = module_0.parse(str_0)
    docstring_2 = module_0.parse(str_0)
    str_1 = module_0.compose(docstring_0)
    assert str_1 == ''
    docstring_0.splitlines()

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    var_0 = module_3.isgenerator(none_type_0)
    docstring_0 = module_0.parse(var_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(var_0)
    none_type_1 = None
    str_0 = '\r\x0cRd#B+cu1o'
    var_1 = module_3.isasyncgen(str_0)
    var_1.visit_AsyncWith(none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = ', optional'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == ', optional'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = 'lf?XYr'
    docstring_1 = module_0.parse(str_1)
    assert docstring_1.short_description == 'lf?XYr'
    str_2 = module_0.compose(docstring_0)
    assert str_2 == ', optional'
    str_3 = module_0.compose(docstring_1)
    assert str_3 == 'lf?XYr'
    docstring_2 = module_0.parse(str_0)
    assert docstring_2.short_description == ', optional'
    none_type_0 = None
    var_0 = module_3.getdoc(str_2)
    var_1 = var_0.format_map(none_type_0)
    var_1.replace(annotation=docstring_2)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'PP(bp\x0bZ\r0l@Si'
    module_0.compose(str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    str_0 = 'v(sKn'
    str_1 = 'n_%"e?v2%cnH96]E:Vy'
    docstring_0 = module_0.parse(str_1)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'n_%"e?v2%cnH96]E:Vy'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_2 = '0oa\x0b3]5\\S@Z&'
    docstring_1 = module_0.parse(str_2)
    assert docstring_1.short_description == '0oa\x0b3]5\\S@Z&'
    str_3 = 'j;k=bc|(\r'
    docstring_2 = module_0.parse(str_3)
    assert docstring_2.short_description == 'j;k=bc|(\r'
    docstring_3 = module_0.parse(str_0)
    assert docstring_3.short_description == 'v(sKn'
    docstring_4 = module_0.parse(str_0)
    assert docstring_4.short_description == 'v(sKn'
    var_0 = module_3.isframe(none_type_0)
    var_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = 'Q_T?nfC\t}#7B;Enu'
    var_0 = module_2.iter_child_nodes(str_0)
    var_0.visit_arguments(str_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = '.av\x0c~i|2D\\"\ng2RY~,'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '.av\x0c~i|2D\\"'
    assert docstring_0.long_description == 'g2RY~,'
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = '2\\;z)w*._\x0c\r1?>'
    docstring_1 = module_0.parse(str_1)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description == '2\\;z)w*._\x0c\r1?>'
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    var_0 = module_4.template(str_0)
    var_0.__bool__()

def test_case_25():
    str_0 = 'BJ3jXj=`\\ww<8Ce+9e'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'BJ3jXj=`\\ww<8Ce+9e'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = ',FR7'
    docstring_1 = module_0.parse(str_1)
    assert docstring_1.short_description == ',FR7'

def test_case_26():
    str_0 = 'Expected one or no arguments for a '
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'Expected one or no arguments for a '
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST

@pytest.mark.xfail(strict=True)
def test_case_27():
    var_0 = module_5.maybe()
    module_0.compose(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    var_0 = module_3.getmodule(none_type_0)
    module_0.compose(var_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = 'arg'
    none_type_0 = None
    module_3.walktree(none_type_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 's?5Wnn!3}8)Dyk0mT22W'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 's?5Wnn!3}8)Dyk0mT22W'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = module_0.compose(docstring_0)
    assert str_1 == 's?5Wnn!3}8)Dyk0mT22W'
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == 's?5Wnn!3}8)Dyk0mT22W'
    module_0.parse(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = 'p'
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(str_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description == 'p'
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    tuple_0 = ()
    docstring_2 = module_0.parse(tuple_0)
    str_1 = module_0.compose(docstring_2)
    assert str_1 == ''
    docstring_3 = module_0.parse(str_1)
    module_0.compose(tuple_0, docstring_2)

@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    var_0 = module_3.iscode(none_type_0)
    var_1 = var_0.__int__()
    var_2 = var_1.__hash__()
    var_2.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = ''
    docstring_0 = module_0.parse(str_0)
    str_1 = ''
    str_2 = "ekLLxI\x0c;[og|$NUZ'0"
    str_3 = module_0.compose(docstring_0, indent=str_2)
    assert str_3 == ''
    none_type_0 = None
    var_0 = module_3.getinnerframes(str_1)
    var_1 = var_0.__lt__(none_type_0)
    var_0.zfill(none_type_0)

def test_case_34():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_3.getclosurevars(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = 'ij0-o+!<HsZXy~+$'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'ij0-o+!<HsZXy~+$'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    none_type_0 = None
    var_0 = module_3.ismemberdescriptor(none_type_0)
    docstring_1 = module_0.parse(var_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    var_0.__getitem__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    str_0 = '$+4Vx&\x0c'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '$+4Vx&\x0c'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(none_type_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    docstring_2 = module_0.parse(none_type_0)
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    none_type_0 = None
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    var_0 = module_3.isasyncgenfunction(none_type_0)
    var_0.__reversed__()

def test_case_39():
    str_0 = '\\u'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '\\u'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    none_type_0 = None
    with pytest.raises(TypeError):
        module_3.getfullargspec(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = 'receives'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'receives'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    str_1 = '2>2RFd:ar<|\x0c@7'
    var_0 = module_3.isasyncgen(str_1)
    module_0.compose(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    var_0 = module_3.ismemberdescriptor(none_type_0)
    var_0.visit_AsyncFunctionDef(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "5y'"
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == "5y'"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    l_shift_0 = module_2.LShift()
    module_0.parse(l_shift_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    var_0 = module_3.stack()
    none_type_0 = None
    var_1 = module_3.isabstract(none_type_0)
    module_3.findsource(var_1)

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = 'returns'
    var_0 = module_3.iscode(str_0)
    var_0.apply_defaults()

@pytest.mark.xfail(strict=True)
def test_case_45():
    none_type_0 = None
    var_0 = module_3.ismethoddescriptor(none_type_0)
    module_0.compose(none_type_0, none_type_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = '3f$E.<AEb'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == '3f$E.<AEb'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == '3f$E.<AEb'
    none_type_0 = None
    docstring_2 = module_0.parse(none_type_0)
    assert f'{type(docstring_2).__module__}.{type(docstring_2).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_2.short_description is None
    assert docstring_2.long_description is None
    assert docstring_2.blank_after_short_description is False
    assert docstring_2.blank_after_long_description is False
    assert docstring_2.meta == []
    assert docstring_2.style == module_1.DocstringStyle.REST
    docstring_3 = module_0.parse(str_0)
    assert docstring_3.short_description == '3f$E.<AEb'
    docstring_4 = module_0.parse(str_0)
    assert docstring_4.short_description == '3f$E.<AEb'
    var_0 = module_3.trace(docstring_0)
    str_1 = "OWnD'R&].\ru"
    docstring_5 = module_0.parse(str_1)
    assert docstring_5.short_description == "OWnD'R&].\ru"
    str_2 = module_0.compose(docstring_4)
    assert str_2 == '3f$E.<AEb'
    var_1 = var_0.__eq__(docstring_3)
    module_0.compose(var_0, var_1, docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    none_type_0 = None
    module_0.compose(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    none_type_0 = None
    module_4.escape(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    str_0 = 'Parameters'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'Parameters'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    module_0.compose(str_0, str_0)