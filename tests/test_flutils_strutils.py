# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import flutils.strutils as module_0
import re as module_1

def test_case_0():
    str_0 = 'i'
    str_1 = module_0.as_escaped_unicode_literal(str_0)
    assert str_1 == '\\x69'

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '\r-V^+?><F=EjU8YU=C'
    str_1 = module_0.as_escaped_utf8_literal(str_0)
    assert str_1 == '\\xd\\x2d\\x56\\x5e\\x2b\\x3f\\x3e\\x3c\\x46\\x3d\\x45\\x6a\\x55\\x38\\x59\\x55\\x3d\\x43'
    str_2 = module_0.as_escaped_unicode_literal(str_1)
    assert str_2 == '\\x5c\\x78\\x64\\x5c\\x78\\x32\\x64\\x5c\\x78\\x35\\x36\\x5c\\x78\\x35\\x65\\x5c\\x78\\x32\\x62\\x5c\\x78\\x33\\x66\\x5c\\x78\\x33\\x65\\x5c\\x78\\x33\\x63\\x5c\\x78\\x34\\x36\\x5c\\x78\\x33\\x64\\x5c\\x78\\x34\\x35\\x5c\\x78\\x36\\x61\\x5c\\x78\\x35\\x35\\x5c\\x78\\x33\\x38\\x5c\\x78\\x35\\x39\\x5c\\x78\\x35\\x35\\x5c\\x78\\x33\\x64\\x5c\\x78\\x34\\x33'
    str_3 = 'i'
    str_4 = module_0.as_escaped_unicode_literal(str_3)
    assert str_4 == '\\x69'
    module_1.sub(str_0, str_1, str_0, str_1)

def test_case_2():
    str_0 = '!9,=^6jj+Cav'
    str_1 = module_0.camel_to_underscore(str_0)
    assert str_1 == '!9,=^6jj+_cav'
    str_2 = 'beta'
    str_3 = module_0.underscore_to_camel(str_2)
    assert str_3 == 'beta'

def test_case_3():
    str_0 = 'dI*Le\rz'
    str_1 = 'P2F'
    str_2 = module_0.camel_to_underscore(str_1)
    assert str_2 == 'p2_f'
    str_3 = module_0.as_escaped_unicode_literal(str_0)
    assert str_3 == '\\x64\\x49\\x2a\\x4c\\x65\\x0d\\x7a'
    str_4 = module_0.as_escaped_utf8_literal(str_0)
    assert str_4 == '\\x64\\x49\\x2a\\x4c\\x65\\xd\\x7a'
    str_5 = module_0.convert_escaped_unicode_literal(str_0)
    assert str_5 == 'dI*Le\rz'
    str_6 = module_0.camel_to_underscore(str_3)
    assert str_6 == '\\x64\\x49\\x2a\\x4c\\x65\\x0d\\x7a'
    str_7 = ''
    str_8 = module_0.as_escaped_unicode_literal(str_7)
    assert str_8 == ''
    str_9 = module_0.as_escaped_utf8_literal(str_7)
    assert str_9 == ''
    str_10 = module_0.underscore_to_camel(str_0)
    assert str_10 == 'di*le\rz'
    str_11 = 'wpm:'
    str_12 = module_0.underscore_to_camel(str_3)
    assert str_12 == '\\x64\\x49\\x2a\\x4c\\x65\\x0d\\x7a'
    none_type_0 = None
    str_13 = module_0.underscore_to_camel(str_1, none_type_0)
    assert str_13 == 'P2f'
    str_14 = ':Js>o<w'
    str_15 = "wI>WZjW'KsiA>~mNwkL"
    bool_0 = True
    str_16 = module_0.underscore_to_camel(str_15, bool_0)
    assert str_16 == "wi>wzjw'ksia>~mnwkl"
    str_17 = module_0.convert_escaped_utf8_literal(str_15)
    assert str_17 == "wI>WZjW'KsiA>~mNwkL"
    str_18 = module_0.camel_to_underscore(str_11)
    str_19 = module_0.underscore_to_camel(str_12)
    assert str_19 == '\\x64\\x49\\x2a\\x4c\\x65\\x0d\\x7a'
    str_20 = module_0.convert_escaped_utf8_literal(str_14)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'dI*Le\rz'
    str_1 = 'P2F'
    str_2 = module_0.underscore_to_camel(str_0)
    assert str_2 == 'di*le\rz'
    str_3 = module_0.camel_to_underscore(str_1)
    assert str_3 == 'p2_f'
    str_4 = '-i'
    str_5 = module_0.as_escaped_unicode_literal(str_4)
    assert str_5 == '\\x2d\\x69'
    str_6 = ''
    bool_0 = True
    str_7 = module_0.underscore_to_camel(str_6, bool_0)
    assert str_7 == ''
    str_8 = module_0.as_escaped_unicode_literal(str_6)
    assert str_8 == ''
    none_type_0 = None
    module_0.underscore_to_camel(none_type_0, str_8)

def test_case_5():
    str_0 = 'num'
    str_1 = module_0.camel_to_underscore(str_0)
    assert str_1 == 'num'

def test_case_6():
    str_0 = 'bOK#1[u;^l\n$hVkm'
    str_1 = module_0.underscore_to_camel(str_0)
    assert str_1 == 'bok#1[u;^l\n$hvkm'
    str_2 = module_0.convert_escaped_utf8_literal(str_0)
    assert str_2 == 'bOK#1[u;^l\n$hVkm'
    str_3 = '55@Fd{%>z x-(+'
    str_4 = module_0.as_escaped_unicode_literal(str_3)
    assert str_4 == '\\x35\\x35\\x40\\x46\\x64\\x7b\\x25\\x3e\\x7a\\x20\\x78\\x2d\\x28\\x2b'
    str_5 = module_0.convert_escaped_utf8_literal(str_0)
    str_6 = module_0.as_escaped_unicode_literal(str_1)
    assert str_6 == '\\x62\\x6f\\x6b\\x23\\x31\\x5b\\x75\\x3b\\x5e\\x6c\\x0a\\x24\\x68\\x76\\x6b\\x6d'
    str_7 = module_0.underscore_to_camel(str_5)
    assert str_7 == 'bok#1[u;^l\n$hvkm'
    str_8 = module_0.convert_escaped_unicode_literal(str_7)
    assert str_8 == 'bok#1[u;^l\n$hvkm'

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    module_0.convert_escaped_utf8_literal(bool_0)

def test_case_8():
    str_0 = 'YvW)iNo/$\th8z\x0bR'
    str_1 = module_0.camel_to_underscore(str_0)
    assert str_1 == 'yv_w)i_no/$\th8z\x0br'
    str_2 = module_0.convert_escaped_unicode_literal(str_0)
    assert str_2 == 'YvW)iNo/$\th8z\x0bR'
    str_3 = '__path__'
    str_4 = module_0.convert_escaped_unicode_literal(str_3)
    str_5 = module_0.underscore_to_camel(str_0)
    assert str_5 == 'yvw)ino/$\th8z\x0br'
    str_6 = module_0.as_escaped_unicode_literal(str_5)
    assert str_6 == '\\x79\\x76\\x77\\x29\\x69\\x6e\\x6f\\x2f\\x24\\x09\\x68\\x38\\x7a\\x0b\\x72'
    str_7 = "The path to the directory that contains the project's ``setup.py``\n    file.\n    "
    str_8 = module_0.camel_to_underscore(str_7)
    str_9 = 'uM,'
    str_10 = module_0.underscore_to_camel(str_9)
    assert str_10 == 'um,'
    str_11 = module_0.as_escaped_utf8_literal(str_7)
    assert str_11 == '\\x54\\x68\\x65\\x20\\x70\\x61\\x74\\x68\\x20\\x74\\x6f\\x20\\x74\\x68\\x65\\x20\\x64\\x69\\x72\\x65\\x63\\x74\\x6f\\x72\\x79\\x20\\x74\\x68\\x61\\x74\\x20\\x63\\x6f\\x6e\\x74\\x61\\x69\\x6e\\x73\\x20\\x74\\x68\\x65\\x20\\x70\\x72\\x6f\\x6a\\x65\\x63\\x74\\x27\\x73\\x20\\x60\\x60\\x73\\x65\\x74\\x75\\x70\\x2e\\x70\\x79\\x60\\x60\\xa\\x20\\x20\\x20\\x20\\x66\\x69\\x6c\\x65\\x2e\\xa\\x20\\x20\\x20\\x20'
    str_12 = module_0.underscore_to_camel(str_8)
    assert str_12 == "the path to the directory that contains the project's ``setup.py``\n    file.\n    "
    str_13 = module_0.as_escaped_utf8_literal(str_3)
    assert str_13 == '\\x5f\\x5f\\x70\\x61\\x74\\x68\\x5f\\x5f'
    str_14 = "Convert the given ``text`` into a string of escaped UTF8 hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped UTF8 hexadecimal.\n\n    Example:\n        >>> from flutils.strutils import as_literal_utf8\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_escaped_utf8_literal(t)\n        '\\\\x31\\\\x2e\\\\xe2\\\\x98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b\n        \\\\x91'\n    "
    str_15 = module_0.as_escaped_unicode_literal(str_14)
    assert str_15 == '\\x43\\x6f\\x6e\\x76\\x65\\x72\\x74\\x20\\x74\\x68\\x65\\x20\\x67\\x69\\x76\\x65\\x6e\\x20\\x60\\x60\\x74\\x65\\x78\\x74\\x60\\x60\\x20\\x69\\x6e\\x74\\x6f\\x20\\x61\\x20\\x73\\x74\\x72\\x69\\x6e\\x67\\x20\\x6f\\x66\\x20\\x65\\x73\\x63\\x61\\x70\\x65\\x64\\x20\\x55\\x54\\x46\\x38\\x20\\x68\\x65\\x78\\x61\\x64\\x65\\x63\\x69\\x6d\\x61\\x6c\\x2e\\x0a\\x0a\\x20\\x20\\x20\\x20\\x41\\x72\\x67\\x73\\x3a\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x74\\x65\\x78\\x74\\x20\\x28\\x3a\\x6f\\x62\\x6a\\x3a\\x60\\x73\\x74\\x72\\x60\\x29\\x3a\\x20\\x54\\x68\\x65\\x20\\x73\\x74\\x72\\x69\\x6e\\x67\\x20\\x74\\x6f\\x20\\x63\\x6f\\x6e\\x76\\x65\\x72\\x74\\x2e\\x0a\\x0a\\x20\\x20\\x20\\x20\\x3a\\x72\\x74\\x79\\x70\\x65\\x3a\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3a\\x6f\\x62\\x6a\\x3a\\x60\\x73\\x74\\x72\\x60\\x0a\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x41\\x20\\x73\\x74\\x72\\x69\\x6e\\x67\\x20\\x77\\x69\\x74\\x68\\x20\\x65\\x61\\x63\\x68\\x20\\x63\\x68\\x61\\x72\\x61\\x63\\x74\\x65\\x72\\x20\\x6f\\x66\\x20\\x74\\x68\\x65\\x20\\x67\\x69\\x76\\x65\\x6e\\x20\\x60\\x60\\x74\\x65\\x78\\x74\\x60\\x60\\x20\\x63\\x6f\\x6e\\x76\\x65\\x72\\x74\\x65\\x64\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x69\\x6e\\x74\\x6f\\x20\\x61\\x6e\\x20\\x65\\x73\\x63\\x61\\x70\\x65\\x64\\x20\\x55\\x54\\x46\\x38\\x20\\x68\\x65\\x78\\x61\\x64\\x65\\x63\\x69\\x6d\\x61\\x6c\\x2e\\x0a\\x0a\\x20\\x20\\x20\\x20\\x45\\x78\\x61\\x6d\\x70\\x6c\\x65\\x3a\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3e\\x3e\\x3e\\x20\\x66\\x72\\x6f\\x6d\\x20\\x66\\x6c\\x75\\x74\\x69\\x6c\\x73\\x2e\\x73\\x74\\x72\\x75\\x74\\x69\\x6c\\x73\\x20\\x69\\x6d\\x70\\x6f\\x72\\x74\\x20\\x61\\x73\\x5f\\x6c\\x69\\x74\\x65\\x72\\x61\\x6c\\x5f\\x75\\x74\\x66\\x38\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3e\\x3e\\x3e\\x20\\x74\\x20\\x3d\\x20\\x27\\x31\\x2e\\u2605\\x20\\U0001f6d1\\x27\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3e\\x3e\\x3e\\x20\\x61\\x73\\x5f\\x65\\x73\\x63\\x61\\x70\\x65\\x64\\x5f\\x75\\x74\\x66\\x38\\x5f\\x6c\\x69\\x74\\x65\\x72\\x61\\x6c\\x28\\x74\\x29\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x27\\x5c\\x5c\\x78\\x33\\x31\\x5c\\x5c\\x78\\x32\\x65\\x5c\\x5c\\x78\\x65\\x32\\x5c\\x5c\\x78\\x39\\x38\\x5c\\x5c\\x78\\x38\\x35\\x5c\\x5c\\x78\\x32\\x30\\x5c\\x5c\\x78\\x66\\x30\\x5c\\x5c\\x78\\x39\\x66\\x5c\\x5c\\x78\\x39\\x62\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x5c\\x5c\\x78\\x39\\x31\\x27\\x0a\\x20\\x20\\x20\\x20'
    str_16 = module_0.underscore_to_camel(str_14)
    assert str_16 == "convert the given ``text`` into a string of escaped utf8 hexadecimal.\n\n    args:\n         text (:obj:`str`): the string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            a string with each character of the given ``text`` converted\n            into an escaped utf8 hexadecimal.\n\n    example:\n        >>> from flutils.strutils import asLiteralUtf8\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> asEscapedUtf8Literal(t)\n        '\\\\x31\\\\x2e\\\\xe2\\\\x98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b\n        \\\\x91'\n    "
    str_17 = module_0.camel_to_underscore(str_5)
    assert str_17 == 'yvw)ino/$\th8z\x0br'
    str_18 = module_0.underscore_to_camel(str_13)
    assert str_18 == '\\x5f\\x5f\\x70\\x61\\x74\\x68\\x5f\\x5f'