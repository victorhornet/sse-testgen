# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis.providers.address as module_0

def test_case_0():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.calling_code()
    dict_0 = address_0.coordinates(address_0)

def test_case_1():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.latitude(address_0)

def test_case_2():
    dict_0 = {}
    address_0 = module_0.Address(**dict_0)
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.address()

def test_case_3():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.latitude(address_0)
    str_1 = address_0.country_code()
    list_0 = [str_1]
    str_2 = address_0.region(*list_0)

def test_case_4():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.province()

def test_case_5():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.street_name()
    str_1 = address_0.country()
    assert str_1 == 'United States'
    dict_0 = address_0.coordinates()

def test_case_6():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    var_0 = address_0.latitude(address_0)
    str_0 = address_0.country_code()
    var_1 = address_0.latitude()

def test_case_7():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.continent()
    assert str_0 == 'South America'
    dict_0 = address_0.coordinates()
    str_1 = address_0.street_name()
    str_2 = address_0.city()
    str_3 = address_0.street_number()
    str_4 = address_0.address()
    dict_1 = address_0.coordinates()
    address_1 = module_0.Address()

def test_case_8():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.street_number()

def test_case_9():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.country_code()
    str_1 = address_0.zip_code()
    str_2 = address_0.city()
    str_3 = address_0.federal_subject()
    dict_0 = address_0.coordinates()
    str_4 = address_0.country_code()
    str_5 = address_0.region()

@pytest.mark.xfail(strict=True)
def test_case_10():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = 'creaks'
    str_1 = 'PKsh$"b\n6ej=k^S/8N'
    str_2 = ''
    dict_0 = {str_0: str_0, str_1: str_0, str_2: address_0}
    address_0.prefecture(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.calling_code()
    var_0 = address_0.longitude()
    bool_0 = True
    dict_0 = address_0.coordinates(bool_0)
    int_0 = 1362
    address_0.prefecture(**int_0)

def test_case_12():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    address_1 = module_0.Address()
    str_0 = address_1.address()
    dict_0 = address_1.coordinates()
    address_2 = module_0.Address()
    dict_1 = address_1.coordinates(address_2)
    var_0 = address_0.latitude()

def test_case_13():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    var_0 = address_0.latitude(address_0)

def test_case_14():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.street_suffix()
    str_1 = address_0.street_suffix()
    str_2 = address_0.get_current_locale()
    str_3 = address_0.get_current_locale()
    address_1 = module_0.Address()
    str_4 = address_1.postal_code()
    str_5 = address_0.region()
    str_6 = address_0.get_current_locale()
    address_2 = module_0.Address()
    str_7 = address_0.address()
    str_8 = address_1.continent(address_1)
    str_9 = address_0.province()
    str_10 = address_2.postal_code()
    address_3 = module_0.Address()
    str_11 = address_1.street_suffix()
    str_12 = address_3.street_suffix()
    str_13 = address_3.postal_code()
    str_14 = address_2.street_suffix()

@pytest.mark.xfail(strict=True)
def test_case_15():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    bool_0 = True
    str_0 = address_0.country(bool_0)
    address_1 = module_0.Address()
    str_1 = address_1.continent()
    assert str_1 == 'Europe'
    dict_0 = address_0.coordinates()
    var_0 = address_0.latitude(bool_0)
    dict_1 = address_1.coordinates()
    str_2 = address_1.street_name()
    str_3 = address_0.city()
    str_4 = address_0.street_number()
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.Address(*list_0)