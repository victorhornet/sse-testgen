# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.address as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    bool_0 = True
    var_0 = address_0.longitude(bool_0)
    none_type_0 = None
    var_0.reseed(none_type_0)

def test_case_1():
    dict_0 = {}
    address_0 = module_0.Address(**dict_0)
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.longitude(dict_0)
    address_1 = module_0.Address()
    str_1 = address_1.country_code()
    address_2 = module_0.Address()
    str_2 = address_1.prefecture()
    str_3 = address_0.latitude(address_0)
    str_4 = address_0.city()
    str_5 = address_1.province()
    str_6 = address_1.country()
    assert str_6 == 'United States'
    str_7 = address_2.street_number()
    str_8 = address_2.zip_code()
    address_3 = module_0.Address()
    var_0 = address_0.latitude()

def test_case_2():
    list_0 = []
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    none_type_0 = None
    str_0 = address_0.continent(none_type_0)
    str_1 = address_0.postal_code()
    str_2 = address_0.zip_code()
    address_1 = module_0.Address()
    str_3 = address_1.zip_code()
    address_2 = module_0.Address()
    str_4 = address_0.postal_code()
    str_5 = address_0.region()
    address_3 = module_0.Address(*list_0)
    str_6 = address_3.zip_code()
    str_7 = address_0.address()
    str_8 = address_2.street_suffix()
    str_9 = address_1.prefecture()

def test_case_3():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.federal_subject()

@pytest.mark.xfail(strict=True)
def test_case_4():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.street_name()
    address_1 = module_0.Address()
    str_1 = address_1.city()
    str_2 = address_1.country(str_1)
    str_3 = ';'
    dict_0 = {str_3: str_3}
    module_0.Address(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '>='
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_1 = address_0.country()
    assert str_1 == 'United States'
    none_type_0 = None
    address_1 = module_0.Address()
    str_2 = address_1.street_number()
    str_3 = "n\rc/\nl(FE^Cy^`_Kc'-J"
    dict_0 = {str_0: none_type_0, str_3: none_type_0}
    module_0.Address(**dict_0)

def test_case_6():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.country_code()
    str_1 = address_0.zip_code()
    str_2 = address_0.city()
    str_3 = address_0.federal_subject()
    dict_0 = address_0.coordinates()
    str_4 = address_0.region()

def test_case_7():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.continent()
    str_1 = address_0.street_suffix()

def test_case_8():
    dict_0 = {}
    address_0 = module_0.Address(**dict_0)
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.postal_code()
    address_1 = module_0.Address()
    str_1 = address_1.country_code()
    address_2 = module_0.Address()
    str_2 = address_1.prefecture()
    str_3 = address_2.city()
    str_4 = address_0.city()
    str_5 = address_1.province()
    str_6 = address_1.country()
    assert str_6 == 'United States'
    str_7 = address_2.street_number()
    str_8 = address_2.zip_code()
    address_3 = module_0.Address()
    var_0 = address_0.latitude()

@pytest.mark.xfail(strict=True)
def test_case_9():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = ' cannot have a default factory'
    str_1 = 'h$"b\n6e'
    str_2 = 'NM'
    dict_0 = {str_0: str_0, str_1: address_0, str_2: str_2}
    address_0.prefecture(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.city()
    str_1 = '-[&5wl7Ap`<y'
    str_2 = address_0.postal_code()
    dict_0 = {str_1: address_0}
    str_3 = address_0.street_number()
    var_0 = address_0.latitude()
    module_0.Address(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.calling_code()
    str_1 = '\nX+;\\MH'
    str_2 = address_0.city()
    dict_0 = {str_1: str_1, str_1: str_1}
    module_0.Address(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    bool_0 = True
    var_0 = address_0.longitude(bool_0)
    none_type_0 = None
    var_0.reseed(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    list_0 = []
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.__str__()
    var_0 = address_0.latitude(address_0)
    dict_0 = address_0.coordinates()
    str_1 = address_0.federal_subject()
    address_1 = module_0.Address(*list_0)
    str_2 = address_1.continent()
    str_3 = address_0.postal_code()
    str_4 = address_1.zip_code()
    address_2 = module_0.Address(*list_0)
    str_5 = address_1.zip_code()
    address_3 = module_0.Address()
    str_6 = address_1.postal_code()
    str_7 = address_1.region(*list_0)
    str_8 = address_1.street_number()
    str_9 = address_3.zip_code()
    str_10 = address_3.address()
    str_11 = address_3.street_suffix()
    address_2.prefecture(*list_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    address_0 = module_0.Address()
    assert f'{type(address_0).__module__}.{type(address_0).__qualname__}' == 'mimesis_local.mimesis.providers.address.Address'
    assert address_0.seed is None
    assert f'{type(address_0.random).__module__}.{type(address_0.random).__qualname__}' == 'mimesis.random.Random'
    assert address_0.locale == 'en'
    str_0 = address_0.street_name()
    address_1 = module_0.Address()
    str_1 = address_1.zip_code()
    str_2 = address_1.street_name()
    str_3 = address_1.continent(str_1)
    str_4 = 'x&,<Jg;+"%'
    set_0 = {str_4, str_4, str_1, str_1}
    list_0 = [set_0, str_1, address_1, address_1]
    str_5 = 'Du '
    dict_0 = {str_5: set_0}
    address_1.federal_subject(*list_0, **dict_0)