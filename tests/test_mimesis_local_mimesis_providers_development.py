# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import mimesis_local.mimesis.providers.development as module_0

def test_case_0():
    development_0 = module_0.Development()
    str_0 = development_0.software_license()
    bool_0 = True
    development_1 = module_0.Development()
    str_1 = development_1.version(bool_0, bool_0)
    str_2 = development_1.software_license()
    str_3 = development_1.os()
    str_4 = development_1.programming_language()

def test_case_1():
    none_type_0 = None
    development_0 = module_0.Development(none_type_0)
    str_0 = development_0.os()
    bool_0 = development_0.boolean()
    assert bool_0 is False
    str_1 = development_0.version()
    bool_1 = True
    str_2 = development_0.version(pre_release=bool_1)

def test_case_2():
    none_type_0 = None
    development_0 = module_0.Development(none_type_0)
    str_0 = development_0.os()

def test_case_3():
    development_0 = module_0.Development()
    bool_0 = development_0.boolean()
    none_type_0 = development_0.reseed()
    bool_1 = development_0.boolean()
    assert bool_1 is True
    development_1 = module_0.Development()
    str_0 = development_0.software_license()
    str_1 = development_1.software_license()
    assert str_1 == 'General Public License (LGPL)'

def test_case_4():
    development_0 = module_0.Development()
    none_type_0 = development_0.reseed()
    str_0 = development_0.programming_language()
    development_1 = module_0.Development()
    str_1 = development_1.os()
    str_2 = development_0.version()
    str_3 = development_0.software_license()
    str_4 = development_0.programming_language()

def test_case_5():
    development_0 = module_0.Development()
    bool_0 = development_0.boolean()
    bool_1 = development_0.boolean()
    assert bool_1 is False

def test_case_6():
    bytes_0 = b'\xb0\xb4}QzY'
    bool_0 = False
    development_0 = module_0.Development()
    str_0 = development_0.software_license()
    development_1 = module_0.Development(bool_0)
    str_1 = development_0.version()
    str_2 = development_0.os()
    str_3 = development_0.software_license()
    development_2 = module_0.Development(bytes_0)
    str_4 = development_2.software_license()
    str_5 = development_2.version()
    assert str_5 == '1.4.6'
    str_6 = development_2.version(str_4)
    assert str_6 == '2018.3.1'
    none_type_0 = development_2.reseed()
    str_7 = development_1.os()
    bool_1 = development_2.boolean()

def test_case_7():
    development_0 = module_0.Development()
    bool_0 = development_0.boolean()
    str_0 = development_0.programming_language()
    str_1 = development_0.programming_language()
    development_1 = module_0.Development()
    str_2 = development_1.version(bool_0)
    str_3 = development_0.version()
    bool_1 = development_0.boolean()
    str_4 = development_1.programming_language()
    str_5 = development_1.version()
    bool_2 = development_1.boolean()
    assert bool_2 is True
    str_6 = development_1.software_license()
    str_7 = development_1.version()
    str_8 = development_0.software_license()
    str_9 = development_0.software_license()
    none_type_0 = development_0.reseed(str_6)
    str_10 = development_1.os()
    str_11 = development_1.programming_language()
    str_12 = development_1.version()
    bool_3 = development_0.boolean()
    str_13 = development_0.programming_language()
    development_2 = module_0.Development()
    str_14 = development_1.software_license()
    assert str_14 == 'Common Development and Distribution License (CDDL-1.0)'
    str_15 = development_1.programming_language()
    str_16 = development_2.version(bool_2)
    none_type_1 = development_2.reseed()