# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import python_string_utils_local.string_utils.generation as module_0
import collections as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -1988
    str_0 = module_0.uuid(int_0)
    module_0.roman_range(int_0)

def test_case_1():
    str_0 = module_0.uuid()
    set_0 = set()
    str_1 = module_0.uuid(set_0)

def test_case_2():
    int_0 = 1907
    str_0 = module_0.random_string(int_0)

def test_case_3():
    bool_0 = True
    str_0 = module_0.uuid(bool_0)
    chain_map_0 = module_1.ChainMap()
    var_0 = chain_map_0.__iter__()
    with pytest.raises(ValueError):
        module_0.random_string(var_0)

def test_case_4():
    str_0 = 'b.S43brt#:3*p|@`('
    bool_0 = True
    str_1 = module_0.random_string(bool_0)
    int_0 = -639
    str_2 = module_0.uuid(str_0)
    with pytest.raises(ValueError):
        module_0.secure_random_hex(int_0)

def test_case_5():
    bool_0 = False
    str_0 = module_0.uuid()
    str_1 = module_0.uuid(bool_0)
    with pytest.raises(ValueError):
        module_0.secure_random_hex(str_1)

def test_case_6():
    bool_0 = True
    str_0 = module_0.uuid()
    with pytest.raises(OverflowError):
        module_0.roman_range(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 1134
    bool_0 = True
    int_1 = 3
    generator_0 = module_0.roman_range(int_0, bool_0, int_1)
    str_0 = module_0.uuid(bool_0)
    str_1 = module_0.uuid(bool_0)
    module_0.roman_range(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    none_type_0 = None
    module_0.roman_range(bool_0, step=none_type_0)

def test_case_9():
    int_0 = -387
    with pytest.raises(ValueError):
        module_0.random_string(int_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    str_0 = module_0.secure_random_hex(bool_0)
    bool_1 = True
    str_1 = module_0.random_string(bool_1)
    str_2 = module_0.uuid()
    str_3 = module_0.uuid()
    none_type_0 = None
    module_0.roman_range(none_type_0)

def test_case_11():
    int_0 = 1134
    bool_0 = True
    int_1 = -44
    with pytest.raises(OverflowError):
        module_0.roman_range(int_0, bool_0, int_1)

def test_case_12():
    int_0 = 1134
    int_1 = 3
    with pytest.raises(OverflowError):
        module_0.roman_range(int_1, int_0)