# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.cryptographic as module_0
import platform as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    cryptographic_0 = module_0.Cryptographic()
    assert f'{type(cryptographic_0).__module__}.{type(cryptographic_0).__qualname__}' == 'mimesis_local.mimesis.providers.cryptographic.Cryptographic'
    assert cryptographic_0.seed is None
    assert f'{type(cryptographic_0.random).__module__}.{type(cryptographic_0.random).__qualname__}' == 'mimesis.random.Random'
    none_type_0 = None
    str_0 = cryptographic_0.hash(none_type_0)
    var_0 = module_1.system_alias(cryptographic_0, cryptographic_0, cryptographic_0)
    var_1 = var_0.__eq__(cryptographic_0)
    var_1.append(cryptographic_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    cryptographic_0 = module_0.Cryptographic()
    assert f'{type(cryptographic_0).__module__}.{type(cryptographic_0).__qualname__}' == 'mimesis_local.mimesis.providers.cryptographic.Cryptographic'
    assert cryptographic_0.seed is None
    assert f'{type(cryptographic_0.random).__module__}.{type(cryptographic_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = cryptographic_0.hash()
    str_1 = cryptographic_0.token_hex()
    cryptographic_1 = module_0.Cryptographic()
    bytes_0 = cryptographic_1.token_bytes()
    str_2 = cryptographic_1.mnemonic_phrase()
    str_3 = cryptographic_0.token_hex()
    none_type_0 = None
    var_0 = module_1.machine()
    var_0.__imul__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.win32_is_iot()
    var_0.__iter__()

def test_case_3():
    cryptographic_0 = module_0.Cryptographic()
    assert f'{type(cryptographic_0).__module__}.{type(cryptographic_0).__qualname__}' == 'mimesis_local.mimesis.providers.cryptographic.Cryptographic'
    assert cryptographic_0.seed is None
    assert f'{type(cryptographic_0.random).__module__}.{type(cryptographic_0.random).__qualname__}' == 'mimesis.random.Random'
    int_0 = 514
    bytes_0 = cryptographic_0.token_bytes(int_0)
    int_1 = 0
    str_0 = cryptographic_0.token_hex(int_1)
    assert str_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_4():
    cryptographic_0 = module_0.Cryptographic()
    assert f'{type(cryptographic_0).__module__}.{type(cryptographic_0).__qualname__}' == 'mimesis_local.mimesis.providers.cryptographic.Cryptographic'
    assert cryptographic_0.seed is None
    assert f'{type(cryptographic_0.random).__module__}.{type(cryptographic_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = cryptographic_0.token_hex()
    str_1 = cryptographic_0.hash()
    var_0 = cryptographic_0.token_urlsafe()
    var_1 = var_0.__iter__()
    int_0 = 1
    str_2 = cryptographic_0.mnemonic_phrase(int_0)
    bool_0 = True
    bytes_0 = cryptographic_0.token_bytes(bool_0)
    str_3 = cryptographic_0.hash()
    var_2 = var_0.__ne__(var_1)
    none_type_0 = None
    bytes_1 = cryptographic_0.token_bytes(none_type_0)
    float_0 = 886.0
    var_3 = var_1.__gt__(float_0)
    str_4 = '-f\r0\x0b,'
    dict_0 = {str_4: none_type_0, str_4: none_type_0}
    module_0.Cryptographic(*int_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    cryptographic_0 = module_0.Cryptographic()
    assert f'{type(cryptographic_0).__module__}.{type(cryptographic_0).__qualname__}' == 'mimesis_local.mimesis.providers.cryptographic.Cryptographic'
    assert cryptographic_0.seed is None
    assert f'{type(cryptographic_0.random).__module__}.{type(cryptographic_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = cryptographic_0.hash()
    cryptographic_1 = module_0.Cryptographic()
    str_1 = cryptographic_1.token_hex()
    cryptographic_2 = module_0.Cryptographic()
    bytes_0 = cryptographic_2.token_bytes()
    str_2 = cryptographic_2.mnemonic_phrase(separator=cryptographic_1)
    bool_0 = False
    str_3 = cryptographic_1.token_hex(bool_0)
    var_0 = module_1.machine()
    var_0.__imul__(bytes_0)