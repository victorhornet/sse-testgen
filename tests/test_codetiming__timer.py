# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import codetiming._timer as module_0
import dataclasses as module_1

def test_case_0():
    timer_0 = module_0.Timer()
    assert timer_0.text == 'Elapsed time: {:0.4f} seconds'
    assert module_0.Timer.text == 'Elapsed time: {:0.4f} seconds'
    timer_1 = timer_0.__enter__()
    assert f'{type(timer_1).__module__}.{type(timer_1).__qualname__}' == 'codetiming._timer.Timer'
    assert timer_1.name is None
    assert timer_1.text == 'Elapsed time: {:0.4f} seconds'
    var_0 = timer_0.__eq__(timer_0)
    with pytest.raises(module_0.TimerError):
        timer_0.start()

def test_case_1():
    timer_0 = module_0.Timer()
    assert timer_0.text == 'Elapsed time: {:0.4f} seconds'
    assert module_0.Timer.text == 'Elapsed time: {:0.4f} seconds'
    none_type_0 = timer_0.start()
    float_0 = timer_0.stop()
    assert float_0 == pytest.approx(8.720799996808637e-05, abs=0.01, rel=0.01)
    assert timer_0.last == pytest.approx(8.720799996808637e-05, abs=0.01, rel=0.01)
    with pytest.raises(module_0.TimerError):
        timer_0.stop()

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_1.field(default=none_type_0, hash=none_type_0, kw_only=none_type_0)
    var_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_3():
    timer_0 = module_0.Timer()
    assert timer_0.text == 'Elapsed time: {:0.4f} seconds'
    assert len(module_0.Timer.timers) == 0
    assert module_0.Timer.text == 'Elapsed time: {:0.4f} seconds'
    timer_0.__exit__()