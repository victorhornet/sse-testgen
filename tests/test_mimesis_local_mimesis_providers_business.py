# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.business as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    business_0 = module_0.Business()
    assert f'{type(business_0).__module__}.{type(business_0).__qualname__}' == 'mimesis_local.mimesis.providers.business.Business'
    assert business_0.seed is None
    assert f'{type(business_0.random).__module__}.{type(business_0.random).__qualname__}' == 'mimesis.random.Random'
    assert business_0.locale == 'en'
    str_0 = business_0.copyright()
    str_1 = business_0.copyright()
    int_0 = -493
    str_2 = business_0.price(int_0)
    var_0 = business_0.currency_symbol()
    var_0.company()

@pytest.mark.xfail(strict=True)
def test_case_1():
    business_0 = module_0.Business()
    assert f'{type(business_0).__module__}.{type(business_0).__qualname__}' == 'mimesis_local.mimesis.providers.business.Business'
    assert business_0.seed is None
    assert f'{type(business_0.random).__module__}.{type(business_0.random).__qualname__}' == 'mimesis.random.Random'
    assert business_0.locale == 'en'
    business_1 = module_0.Business()
    bool_0 = False
    str_0 = business_0.company_type(bool_0)
    str_1 = business_1.company_type()
    str_2 = business_0.cryptocurrency_symbol()
    var_0 = business_1.currency_symbol()
    var_0.currency_symbol()

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    business_0 = module_0.Business()
    assert f'{type(business_0).__module__}.{type(business_0).__qualname__}' == 'mimesis_local.mimesis.providers.business.Business'
    assert business_0.seed is None
    assert f'{type(business_0.random).__module__}.{type(business_0.random).__qualname__}' == 'mimesis.random.Random'
    assert business_0.locale == 'en'
    str_0 = business_0.currency_iso_code(bool_0)
    business_1 = module_0.Business()
    var_0 = business_1.currency_symbol()
    str_1 = business_1.cryptocurrency_symbol()
    str_2 = business_1.price_in_btc()
    str_3 = business_1.price()
    var_1 = business_1.currency_symbol()
    var_1.cryptocurrency_iso_code()

@pytest.mark.xfail(strict=True)
def test_case_3():
    business_0 = module_0.Business()
    assert f'{type(business_0).__module__}.{type(business_0).__qualname__}' == 'mimesis_local.mimesis.providers.business.Business'
    assert business_0.seed is None
    assert f'{type(business_0.random).__module__}.{type(business_0.random).__qualname__}' == 'mimesis.random.Random'
    assert business_0.locale == 'en'
    str_0 = business_0.currency_iso_code()
    assert str_0 == 'USD'
    business_1 = module_0.Business()
    module_0.Business(**business_1)

def test_case_4():
    business_0 = module_0.Business()
    assert f'{type(business_0).__module__}.{type(business_0).__qualname__}' == 'mimesis_local.mimesis.providers.business.Business'
    assert business_0.seed is None
    assert f'{type(business_0.random).__module__}.{type(business_0.random).__qualname__}' == 'mimesis.random.Random'
    assert business_0.locale == 'en'
    str_0 = business_0.price_in_btc()

@pytest.mark.xfail(strict=True)
def test_case_5():
    business_0 = module_0.Business()
    assert f'{type(business_0).__module__}.{type(business_0).__qualname__}' == 'mimesis_local.mimesis.providers.business.Business'
    assert business_0.seed is None
    assert f'{type(business_0.random).__module__}.{type(business_0.random).__qualname__}' == 'mimesis.random.Random'
    assert business_0.locale == 'en'
    generator_0 = business_0.override_locale()
    var_0 = business_0.currency_symbol()
    business_1 = module_0.Business()
    business_2 = module_0.Business()
    business_3 = module_0.Business()
    str_0 = var_0.__str__()
    business_4 = module_0.Business()
    str_1 = business_4.company_type()
    str_2 = business_1.currency_iso_code()
    assert str_2 == 'USD'
    str_3 = business_0.cryptocurrency_iso_code()
    str_4 = business_4.copyright()
    str_5 = business_1.currency_iso_code()
    assert str_5 == 'USD'
    business_5 = module_0.Business()
    str_6 = business_5.company_type()
    business_6 = module_0.Business()
    generator_1 = business_0.override_locale()
    var_0.cryptocurrency_iso_code()

@pytest.mark.xfail(strict=True)
def test_case_6():
    business_0 = module_0.Business()
    assert f'{type(business_0).__module__}.{type(business_0).__qualname__}' == 'mimesis_local.mimesis.providers.business.Business'
    assert business_0.seed is None
    assert f'{type(business_0.random).__module__}.{type(business_0.random).__qualname__}' == 'mimesis.random.Random'
    assert business_0.locale == 'en'
    var_0 = business_0.currency_symbol()
    var_0.currency_symbol()

@pytest.mark.xfail(strict=True)
def test_case_7():
    business_0 = module_0.Business()
    assert f'{type(business_0).__module__}.{type(business_0).__qualname__}' == 'mimesis_local.mimesis.providers.business.Business'
    assert business_0.seed is None
    assert f'{type(business_0.random).__module__}.{type(business_0.random).__qualname__}' == 'mimesis.random.Random'
    assert business_0.locale == 'en'
    str_0 = business_0.cryptocurrency_symbol()
    var_0 = business_0.currency_symbol()
    var_0.company()