# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import isort._future.dataclasses as module_0
import re as module_1
import tokenize as module_2
import inspect as module_3
import token as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.field()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'isort._future.dataclasses.Field'
    assert f'{type(module_0.Field.compare).__module__}.{type(module_0.Field.compare).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.default).__module__}.{type(module_0.Field.default).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.default_factory).__module__}.{type(module_0.Field.default_factory).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.hash).__module__}.{type(module_0.Field.hash).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.init).__module__}.{type(module_0.Field.init).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.metadata).__module__}.{type(module_0.Field.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.name).__module__}.{type(module_0.Field.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.repr).__module__}.{type(module_0.Field.repr).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.type).__module__}.{type(module_0.Field.type).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = None
    var_1 = var_0.__repr__()
    assert var_1 == 'Field(name=None,type=None,default=<isort._future.dataclasses._MISSING_TYPE object at 0x7f5a4d49bee0>,default_factory=<isort._future.dataclasses._MISSING_TYPE object at 0x7f5a4d49bee0>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),_field_type=None)'
    module_1.template(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 1668
    module_0.field(init=int_0, repr=int_0, metadata=int_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "Z@p\nAFA?7\x0bb@,t'"
    var_0 = module_0.field()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'isort._future.dataclasses.Field'
    assert f'{type(module_0.Field.compare).__module__}.{type(module_0.Field.compare).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.default).__module__}.{type(module_0.Field.default).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.default_factory).__module__}.{type(module_0.Field.default_factory).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.hash).__module__}.{type(module_0.Field.hash).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.init).__module__}.{type(module_0.Field.init).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.metadata).__module__}.{type(module_0.Field.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.name).__module__}.{type(module_0.Field.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.repr).__module__}.{type(module_0.Field.repr).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.type).__module__}.{type(module_0.Field.type).__qualname__}' == 'builtins.member_descriptor'
    var_1 = module_0.dataclass(repr=str_0, unsafe_hash=var_0)
    var_2 = var_1.__repr__()
    dict_0 = {str_0: var_2}
    module_0._HAS_DEFAULT_FACTORY_CLASS(**dict_0)

def test_case_3():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.fields(none_type_0)

def test_case_4():
    none_type_0 = None
    f_i_e_l_d__b_a_s_e_0 = module_0._FIELD_BASE(none_type_0)
    var_0 = module_2.generate_tokens(none_type_0)
    with pytest.raises(TypeError):
        module_0.astuple(var_0)

def test_case_5():
    h_a_s__d_e_f_a_u_l_t__f_a_c_t_o_r_y__c_l_a_s_s_0 = module_0._HAS_DEFAULT_FACTORY_CLASS()
    with pytest.raises(TypeError):
        module_0.asdict(h_a_s__d_e_f_a_u_l_t__f_a_c_t_o_r_y__c_l_a_s_s_0)

def test_case_6():
    frozen_instance_error_0 = module_0.FrozenInstanceError()
    none_type_0 = None
    var_0 = module_3.ismethod(frozen_instance_error_0)
    with pytest.raises(TypeError):
        module_0.make_dataclass(frozen_instance_error_0, frozen_instance_error_0, bases=frozen_instance_error_0, init=none_type_0, repr=none_type_0, frozen=frozen_instance_error_0)

def test_case_7():
    m_i_s_s_i_n_g__t_y_p_e_0 = module_0._MISSING_TYPE()
    with pytest.raises(TypeError):
        module_0.replace(m_i_s_s_i_n_g__t_y_p_e_0)

def test_case_8():
    h_a_s__d_e_f_a_u_l_t__f_a_c_t_o_r_y__c_l_a_s_s_0 = module_0._HAS_DEFAULT_FACTORY_CLASS()

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    f_i_e_l_d__b_a_s_e_0 = module_0._FIELD_BASE(none_type_0)
    var_0 = f_i_e_l_d__b_a_s_e_0.__repr__()
    frozen_instance_error_0 = module_0.FrozenInstanceError()
    none_type_1 = None
    module_2.detect_encoding(none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    dataclass_params_0 = module_0._DataclassParams(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(dataclass_params_0).__module__}.{type(dataclass_params_0).__qualname__}' == 'isort._future.dataclasses._DataclassParams'
    assert f'{type(module_0._DataclassParams.eq).__module__}.{type(module_0._DataclassParams.eq).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.frozen).__module__}.{type(module_0._DataclassParams.frozen).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.init).__module__}.{type(module_0._DataclassParams.init).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.order).__module__}.{type(module_0._DataclassParams.order).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.repr).__module__}.{type(module_0._DataclassParams.repr).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.unsafe_hash).__module__}.{type(module_0._DataclassParams.unsafe_hash).__qualname__}' == 'builtins.member_descriptor'
    module_0.InitVar(*none_type_0, **none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    var_0 = module_4.ISEOF(none_type_0)
    var_1 = module_0.is_dataclass(var_0)
    init_var_0 = module_0.InitVar()
    var_1.clear()

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    str_0 = 'YI'
    var_0 = module_0.field(default_factory=none_type_0, repr=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'isort._future.dataclasses.Field'
    assert f'{type(module_0.Field.compare).__module__}.{type(module_0.Field.compare).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.default).__module__}.{type(module_0.Field.default).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.default_factory).__module__}.{type(module_0.Field.default_factory).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.hash).__module__}.{type(module_0.Field.hash).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.init).__module__}.{type(module_0.Field.init).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.metadata).__module__}.{type(module_0.Field.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.name).__module__}.{type(module_0.Field.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.repr).__module__}.{type(module_0.Field.repr).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.type).__module__}.{type(module_0.Field.type).__qualname__}' == 'builtins.member_descriptor'
    var_1 = module_3.getabsfile(str_0, str_0)
    var_2 = var_1.__eq__(var_1)
    var_3 = module_0.field(default=none_type_0, init=none_type_0, hash=var_2)
    var_1.copy()

def test_case_13():
    str_0 = 'return NotImplemented'
    none_type_0 = None
    dataclass_params_0 = module_0._DataclassParams(str_0, str_0, str_0, none_type_0, str_0, none_type_0)
    assert f'{type(dataclass_params_0).__module__}.{type(dataclass_params_0).__qualname__}' == 'isort._future.dataclasses._DataclassParams'
    assert f'{type(module_0._DataclassParams.eq).__module__}.{type(module_0._DataclassParams.eq).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.frozen).__module__}.{type(module_0._DataclassParams.frozen).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.init).__module__}.{type(module_0._DataclassParams.init).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.order).__module__}.{type(module_0._DataclassParams.order).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.repr).__module__}.{type(module_0._DataclassParams.repr).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0._DataclassParams.unsafe_hash).__module__}.{type(module_0._DataclassParams.unsafe_hash).__qualname__}' == 'builtins.member_descriptor'
    var_0 = dataclass_params_0.__repr__()
    assert var_0 == "_DataclassParams(init='return NotImplemented',repr='return NotImplemented',eq='return NotImplemented',order=None,unsafe_hash='return NotImplemented',frozen=None)"
    init_var_0 = module_0.InitVar()
    with pytest.raises(TypeError):
        module_0.astuple(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    frozen_instance_error_0 = module_0.FrozenInstanceError()
    none_type_0 = None
    f_i_e_l_d__b_a_s_e_0 = module_0._FIELD_BASE(none_type_0)
    str_0 = "&&6'K(t_&lLkc^l>><"
    var_0 = f_i_e_l_d__b_a_s_e_0.__repr__()
    module_0.dataclass(str_0, repr=f_i_e_l_d__b_a_s_e_0, unsafe_hash=var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_0.field()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'isort._future.dataclasses.Field'
    assert f'{type(module_0.Field.compare).__module__}.{type(module_0.Field.compare).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.default).__module__}.{type(module_0.Field.default).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.default_factory).__module__}.{type(module_0.Field.default_factory).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.hash).__module__}.{type(module_0.Field.hash).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.init).__module__}.{type(module_0.Field.init).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.metadata).__module__}.{type(module_0.Field.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.name).__module__}.{type(module_0.Field.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.repr).__module__}.{type(module_0.Field.repr).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Field.type).__module__}.{type(module_0.Field.type).__qualname__}' == 'builtins.member_descriptor'
    module_0.make_dataclass(var_0, var_0, namespace=var_0, eq=var_0, frozen=var_0)