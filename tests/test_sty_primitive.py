# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sty.primitive as module_0
import collections as module_1
import sty.rendertype as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_0 = '/8NM/X&w)1^}Ue'
    none_type_0 = register_0.set_style(str_0)
    assert f'{type(register_0./8NM/X&w)1^}Ue).__module__}.{type(register_0./8NM/X&w)1^}Ue).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0./8NM/X&w)1^}Ue) == 0
    register_0.as_namedtuple()

def test_case_1():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '>Yf@\\ARm!_?v3f\rz"8/\t'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    var_0 = register_0.mute()
    var_0.set_style(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_0 = '/8NM/X&w)1^}e'
    none_type_0 = register_0.set_style(str_0)
    assert f'{type(register_0./8NM/X&w)1^}e).__module__}.{type(register_0./8NM/X&w)1^}e).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0./8NM/X&w)1^}e) == 0
    tuple_0 = register_0.get_style(str_0)
    var_0 = register_0.unmute()
    register_0.as_namedtuple()

def test_case_4():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    var_0 = register_0.as_namedtuple()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'sty.primitive.StyleRegister'
    assert len(var_0) == 0

def test_case_5():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_0 = '/8NM/X&w)1^}e'
    none_type_0 = register_0.set_style(str_0)
    assert f'{type(register_0./8NM/X&w)1^}e).__module__}.{type(register_0./8NM/X&w)1^}e).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0./8NM/X&w)1^}e) == 0
    tuple_0 = register_0.get_style(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    var_0 = register_0.as_namedtuple()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'sty.primitive.StyleRegister'
    assert len(var_0) == 0
    register_0.set_eightbit_call(var_0)

def test_case_7():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    var_0 = register_0.copy()
    dict_0 = var_0.as_dict()

@pytest.mark.xfail(strict=True)
def test_case_8():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    var_0 = register_0.mute()
    var_1 = register_0.unmute()
    var_2 = register_0.unmute()
    none_type_0 = register_0.set_renderfunc(var_2, var_2)
    var_2.as_namedtuple()

@pytest.mark.xfail(strict=True)
def test_case_9():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_0 = '/8NM/X&w)1^}Ue'
    none_type_0 = register_0.set_style(str_0)
    assert f'{type(register_0./8NM/X&w)1^}Ue).__module__}.{type(register_0./8NM/X&w)1^}Ue).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0./8NM/X&w)1^}Ue) == 0
    var_0 = register_0.mute()
    register_0.as_namedtuple()

def test_case_10():
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    var_0 = register_0.mute()
    str_0 = register_0.__call__()
    assert str_0 == ''

def test_case_11():
    str_0 = '6![}'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    none_type_0 = register_0.set_style(str_0)
    assert f'{type(register_0.6![}).__module__}.{type(register_0.6![}).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0.6![}) == 0
    dict_0 = register_0.as_dict()
    str_1 = register_0.__call__(*dict_0, **dict_0)
    assert f'{type(str_1).__module__}.{type(str_1).__qualname__}' == 'sty.primitive.Style'
    assert len(str_1) == 0
    dict_1 = register_0.as_dict()

def test_case_12():
    str_0 = '6![}'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_1 = 'rc^E_X-6E}W'
    str_2 = register_0.__call__(*str_0)
    assert str_2 == ''
    none_type_0 = register_0.set_style(str_1)
    assert f'{type(register_0.rc^E_X-6E}W).__module__}.{type(register_0.rc^E_X-6E}W).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0.rc^E_X-6E}W) == 0
    dict_0 = register_0.as_dict()
    str_3 = register_0.__call__(*dict_0, **dict_0)
    assert f'{type(str_3).__module__}.{type(str_3).__qualname__}' == 'sty.primitive.Style'
    assert len(str_3) == 0
    dict_1 = register_0.as_dict()

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'v.FDU+'
    str_1 = 'rc^E_X-6E}W'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_2 = register_0.__call__(*str_0)
    assert str_2 == ''
    none_type_0 = register_0.set_renderfunc(register_0, str_1)
    none_type_1 = register_0.set_style(str_1)
    assert f'{type(register_0.rc^E_X-6E}W).__module__}.{type(register_0.rc^E_X-6E}W).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0.rc^E_X-6E}W) == 0
    str_3 = register_0.__call__()
    assert str_3 == ''
    bytes_0 = b'/\x00x"'
    register_0.set_rgb_call(bytes_0)

def test_case_14():
    str_0 = 'v.FDU+'
    str_1 = 'rc^E_X-6E}W'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_2 = register_0.__call__(*str_0)
    assert str_2 == ''
    none_type_0 = register_0.set_renderfunc(register_0, str_1)
    none_type_1 = register_0.set_style(str_1)
    assert f'{type(register_0.rc^E_X-6E}W).__module__}.{type(register_0.rc^E_X-6E}W).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0.rc^E_X-6E}W) == 0
    str_3 = register_0.__call__()
    assert str_3 == ''
    dict_0 = {str_0: str_0, str_1: str_0}
    style_0 = module_0.Style()
    assert len(style_0) == 0
    none_type_2 = register_0.set_renderfunc(none_type_0, style_0)
    register_1 = module_0.Register()
    var_0 = register_1.unmute()
    with pytest.raises(ValueError):
        module_1.namedtuple(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '6![}'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    list_0 = [register_0]
    register_0.set_style(str_0, *list_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '6![}'
    str_1 = 'rc^E_X-6E}W'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_2 = register_0.__call__(*str_0)
    assert str_2 == ''
    none_type_0 = register_0.set_style(str_2)
    assert f'{type(register_0.).__module__}.{type(register_0.).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0.) == 0
    list_0 = [str_0, str_2, str_0]
    str_3 = register_0.__call__(*list_0)
    var_0 = register_0.mute()
    none_type_1 = register_0.set_renderfunc(str_1, var_0)
    var_0.mute()

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = '6![}'
    str_1 = 'rc^E_X-6E}W'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_2 = register_0.__call__(*str_0)
    assert str_2 == ''
    render_type_0 = module_2.RenderType()
    none_type_0 = register_0.set_renderfunc(register_0, str_1)
    tuple_0 = (render_type_0, str_1)
    list_0 = [render_type_0, tuple_0, render_type_0]
    register_0.set_style(str_1, *list_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '6![}'
    str_1 = 'rc^E_X-6E}W'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_2 = register_0.__call__(*str_0)
    assert str_2 == ''
    none_type_0 = register_0.set_renderfunc(register_0, str_1)
    none_type_1 = register_0.set_style(str_1)
    assert f'{type(register_0.rc^E_X-6E}W).__module__}.{type(register_0.rc^E_X-6E}W).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0.rc^E_X-6E}W) == 0
    style_0 = module_0.Style()
    assert len(style_0) == 0
    dict_0 = register_0.as_dict()
    str_3 = '.+\x0cq{.>s;b:D}M~a67'
    list_0 = [style_0]
    none_type_2 = register_0.set_style(str_3, *list_0)
    assert f'{type(register_0..+\x0cq{.>s;b:D}M~a67).__module__}.{type(register_0..+\x0cq{.>s;b:D}M~a67).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0..+q{.>s;b:D}M~a67) == 0
    register_0.as_namedtuple()

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = '6![}'
    str_1 = 'rc^E_X-6E}W'
    register_0 = module_0.Register()
    assert f'{type(register_0).__module__}.{type(register_0).__qualname__}' == 'sty.primitive.Register'
    assert register_0.renderfuncs == {}
    assert register_0.is_muted is False
    str_2 = register_0.__call__(*str_0)
    assert str_2 == ''
    none_type_0 = register_0.set_renderfunc(register_0, str_1)
    none_type_1 = register_0.set_style(str_1)
    assert f'{type(register_0.rc^E_X-6E}W).__module__}.{type(register_0.rc^E_X-6E}W).__qualname__}' == 'sty.primitive.Style'
    assert len(register_0.rc^E_X-6E}W) == 0
    style_0 = module_0.Style()
    assert len(style_0) == 0
    dict_0 = register_0.as_dict()
    str_3 = register_0.__call__()
    assert str_3 == ''
    bool_0 = True
    list_0 = [bool_0]
    str_4 = register_0.__call__(*list_0)
    assert str_4 is True
    var_0 = register_0.mute()
    var_0.mute()