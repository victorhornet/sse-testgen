# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import flutils_local.flutils.objutils as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, bool_0, dict_0]
    module_0.has_any_callables(dict_0, *list_0)

def test_case_1():
    bytes_0 = b'\x17]\x88\xda\xf5W\x14\xd7u\xc2\xc4J\xa53-\x8d\n\xf7b\xa9'
    bool_0 = module_0.has_any_attrs(bytes_0)

def test_case_2():
    none_type_0 = None
    bool_0 = module_0.has_any_callables(none_type_0)

def test_case_3():
    none_type_0 = None
    bool_0 = module_0.is_list_like(none_type_0)
    assert bool_0 is False
    bool_1 = module_0.has_callables(none_type_0)
    assert bool_1 is True
    str_0 = '.[pSe(s?jyi97lD/\t+AU'
    bool_2 = module_0.has_callables(none_type_0, *str_0)
    assert bool_2 is False
    bool_3 = module_0.has_callables(none_type_0)

def test_case_4():
    none_type_0 = None
    bool_0 = module_0.is_list_like(none_type_0)
    assert bool_0 is False
    bool_1 = module_0.has_callables(none_type_0)
    assert bool_1 is True
    bool_2 = module_0.has_callables(bool_1)
    assert bool_2 is True

def test_case_5():
    str_0 = '@Z '
    bool_0 = module_0.has_any_attrs(str_0)
    str_1 = '@?F!.\\`&)U'
    str_2 = 'tZLA\x0b6iJ'
    list_0 = [str_1, str_0, str_2, str_0]
    bool_1 = module_0.has_any_callables(list_0, *list_0)
    assert bool_1 is False
    bool_2 = module_0.has_callables(str_0, *list_0)
    assert bool_2 is False
    bool_3 = module_0.is_list_like(str_0)
    assert bool_3 is False
    tuple_0 = ()
    bool_4 = module_0.has_attrs(tuple_0)
    bool_5 = module_0.has_callables(tuple_0, *list_0)
    tuple_1 = (tuple_0,)
    bool_6 = module_0.has_attrs(tuple_1)
    bool_7 = module_0.has_any_callables(list_0, *list_0)
    bool_8 = module_0.is_subclass_of_any(bool_6)
    bool_9 = module_0.is_list_like(tuple_0)
    assert bool_9 is True

def test_case_6():
    bytes_0 = b'<M\x1f\x0c=k\xa3\xcb\x9f'
    bool_0 = module_0.is_list_like(bytes_0)
    assert bool_0 is False

def test_case_7():
    str_0 = '\x0c+/a6jk\n<6'
    bool_0 = module_0.has_any_attrs(str_0)
    bool_1 = module_0.has_attrs(str_0)
    bytes_0 = b"_\xf4'\xaf\xecy\x11\x17"
    list_0 = []
    str_1 = 'A'
    str_2 = '#rj[ZsdI*Le\rz,sS*\x0b'
    str_3 = '*3:[_y3ny`\rDHI0ni+[P'
    list_1 = [str_1, str_2, str_3]
    bool_2 = module_0.has_any_callables(list_0, *list_1)
    assert bool_2 is False
    none_type_0 = None
    bool_3 = module_0.has_attrs(none_type_0)
    bool_4 = module_0.has_callables(bytes_0, *list_0)
    assert bool_4 is True
    bool_5 = module_0.has_callables(str_3)
    assert bool_5 is True