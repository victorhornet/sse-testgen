# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser_local.docstring_parser.numpydoc as module_0
import tokenize as module_1

def test_case_0():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser_local.docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'

def test_case_1():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser_local.docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    none_type_0 = None
    yields_section_0 = module_0.YieldsSection(numpydoc_parser_0, none_type_0)
    assert module_0.YieldsSection.is_generator is True
    str_0 = '\\I{8)(BCk|'
    docstring_0 = numpydoc_parser_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description == '\\I{8)(BCk|'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    none_type_1 = None
    str_0 = 'q;#E^H>x\n{Vyv'
    sphinx_section_0 = module_0._SphinxSection(none_type_1, str_0)
    none_type_2 = None
    k_v_section_0 = module_0._KVSection(none_type_2, none_type_2)
    iterable_0 = sphinx_section_0.parse(str_0)
    iterable_1 = k_v_section_0.parse(none_type_1)
    k_v_section_0.encode(errors=k_v_section_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert f'{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}' == 'docstring_parser_local.docstring_parser.numpydoc.NumpydocParser'
    assert f'{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(numpydoc_parser_0.sections) == 31
    assert f'{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}' == 're.Pattern'
    var_0 = module_1.group()
    var_1 = var_0.rsplit()
    numpydoc_parser_0.add_section(var_1)

def test_case_4():
    str_0 = '8d]7*6BMPc<\nQ'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description == '8d]7*6BMPc<'
    assert docstring_0.long_description == 'Q'
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []