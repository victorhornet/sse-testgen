# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import flutils.codecs.raw_utf8_escape as module_0
import codecs as module_1

def test_case_0():
    none_type_0 = module_0.register()
    assert module_0.NAME == 'raw_utf8_escape'
    none_type_1 = module_0.register()
    str_0 = '<5v`@g1m=6DcW;l'
    tuple_0 = module_0.encode(str_0, none_type_0)

def test_case_1():
    none_type_0 = module_0.register()
    assert module_0.NAME == 'raw_utf8_escape'
    str_0 = '"d:Qg^WBM$cWh~J\t'
    tuple_0 = module_0.encode(str_0)
    tuple_1 = module_0.encode(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'Get an operating system group object.\n\n    Args:\n        name (:obj:`str` or :obj:`int`, optional): The "group name" or ``gid``.\n            Defaults to the current users\'s group.\n\n    Raises:\n        OSError: If the given ``name`` does not exist as a "group\n            name" for this operating system.\n        OSError: If the given ``name`` is a ``gid`` and it does not\n            exist.\n\n    :rtype:\n        :obj:`struct_group <grp>`\n\n        * A tuple like object.\n\n    Example:\n        >>> from flutils.pathutils import get_os_group\n        >>> get_os_group(\'bar\')\n        grp.struct_group(gr_name=\'bar\', gr_passwd=\'*\', gr_gid=2001,\n        gr_mem=[\'foo\'])\n    '
    tuple_0 = module_0.encode(str_0)
    assert module_0.NAME == 'raw_utf8_escape'
    bytes_0 = b'\x1e\xc6\xfa\x12\x9d\x10\x87i\xba)\xbb1?\xfa\x99\xc6\xc2\xfd'
    module_0.encode(bytes_0, bytes_0)

def test_case_3():
    none_type_0 = module_0.register()
    assert module_0.NAME == 'raw_utf8_escape'
    bytes_0 = b']n\x11\xf2\xaa\xeb'
    with pytest.raises(UnicodeDecodeError):
        module_0.decode(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = module_0.register()
    assert module_0.NAME == 'raw_utf8_escape'
    none_type_1 = module_0.register()
    none_type_2 = module_0.register()
    none_type_3 = module_0.register()
    module_0.decode(none_type_3)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'Get an operating system group object.\n\n    Args:\n        name (:obj:`str` or :obj:`int`, optional): The "group name" or ``gid``.\n            Defaults to the current users\'s group.\n\n    Raises:\n        OSError: If the given ``name`` does not exist as a "group\n            name" for this operating system.\n        OSError: If the given ``name`` is a ``gid`` and it does not\n            exist.\n\n    :rtype:\n        :obj:`struct_group <grp>`\n\n        * A tuple like object.\n\n    Example:\n        >>> from flutils.pathutils import get_os_group\n        >>> get_os_group(\'bar\')\n        grp.struct_group(gr_name=\'bar\', gr_passwd=\'*\', gr_gid=2001,\n        gr_mem=[\'foo\'])\n    '
    tuple_0 = module_0.encode(str_0)
    assert module_0.NAME == 'raw_utf8_escape'
    tuple_1 = module_0.encode(str_0)
    module_1.getdecoder(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = module_0.register()
    assert module_0.NAME == 'raw_utf8_escape'
    module_1.getencoder(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '[aA$['
    module_0.decode(str_0)

def test_case_8():
    bytes_0 = b'\x9d\xac\xa4\x8e\x06\x9b\xed\xa8\xd4\xb1D\x07.E\xb3\xc3O\xebV'
    with pytest.raises(UnicodeEncodeError):
        module_0.encode(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'Get an operating system group object.\n\n    Args:\n        name (:obj:`str` or :obj:`int`, optional): The "group name" or ``gid``.\n            Defaults to the current users\'s group.\n\n    Raises:\n        OSError: If the given ``name`` does not exist as a "group\n            name" for this operating system.\n        OSError: If the given ``name`` is a ``gid`` and it does not\n            exist.\n\n    :rtype:\n        :obj:`struct_group <grp>`\n\n        * A tuple like object.\n\n    Example:\n        >>> from flutils.pathutils import get_os_group\n        >>> get_os_group(\'bar\')\n        grp.struct_group(gr_name=\'bar\', gr_passwd=\'*\', gr_gid=2001,\n        gr_mem=[\'foo\'])\n    '
    bytes_0 = b'\x1e\xc6\xfa\x12\x9d\x10\x87i\xba)\xbb1?\xfa\x99\xc6\xc2\xfd'
    tuple_0 = module_0.encode(str_0)
    assert module_0.NAME == 'raw_utf8_escape'
    module_0.decode(bytes_0, str_0)

def test_case_10():
    str_0 = '&q,\t@+~2z-b5Y:|I2u'
    tuple_0 = module_0.encode(str_0)
    assert module_0.NAME == 'raw_utf8_escape'
    str_1 = "Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped Python literal.\n\n    Example:\n        >>> from flutils.strutils import as_escaped_unicode_literal\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_literal(t)\n        '\\\\x31\\\\x2e\\\\u2605\\\\x20\\\\U0001f6d1'\n    "
    none_type_0 = module_0.register()
    bytes_0 = b'\x1e\xc6\xfa\x12\x9d\x10\x87i\xba)\xbb1?\xfa\x99\xc6\xc2\xfd'
    tuple_1 = module_0.encode(str_1)
    with pytest.raises(UnicodeDecodeError):
        module_0.decode(bytes_0)