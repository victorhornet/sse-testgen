# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.choice as module_0
import collections as module_1

def test_case_0():
    choice_0 = module_0.Choice()
    assert choice_0.seed is None
    assert f'{type(choice_0.random).__module__}.{type(choice_0.random).__qualname__}' == 'mimesis.random.Random'
    with pytest.raises(TypeError):
        choice_0.__call__(choice_0)

def test_case_1():
    choice_0 = module_0.Choice()
    assert choice_0.seed is None
    assert f'{type(choice_0.random).__module__}.{type(choice_0.random).__qualname__}' == 'mimesis.random.Random'
    choice_1 = module_0.Choice()
    assert choice_1.seed is None
    assert f'{type(choice_1.random).__module__}.{type(choice_1.random).__qualname__}' == 'mimesis.random.Random'
    bool_0 = True
    none_type_0 = choice_1.reseed()
    with pytest.raises(TypeError):
        choice_1.__call__(choice_0, choice_0, bool_0)

def test_case_2():
    choice_0 = module_0.Choice()
    assert choice_0.seed is None
    assert f'{type(choice_0.random).__module__}.{type(choice_0.random).__qualname__}' == 'mimesis.random.Random'
    bytes_0 = b"\nQ\x8a\x90&S\x80\xb28'\x0c\xac\xbb\xffd\xf8"
    none_type_0 = choice_0.reseed()
    user_list_0 = module_1.UserList(bytes_0)
    var_0 = choice_0.__call__(user_list_0)
    assert var_0 == 12
    none_type_1 = choice_0.reseed()
    none_type_2 = None
    with pytest.raises(TypeError):
        choice_0.__call__(none_type_2)