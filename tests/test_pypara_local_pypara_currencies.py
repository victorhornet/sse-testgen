# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import pypara_local.pypara.currencies as module_0
import decimal as module_1
import dataclasses as module_2

def test_case_0():
    currency_registry_0 = module_0.CurrencyRegistry()
    assert f'{type(module_0.CurrencyRegistry.all).__module__}.{type(module_0.CurrencyRegistry.all).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codes).__module__}.{type(module_0.CurrencyRegistry.codes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codenames).__module__}.{type(module_0.CurrencyRegistry.codenames).__qualname__}' == 'builtins.property'
    int_0 = currency_registry_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_1():
    currency_registry_0 = module_0.CurrencyRegistry()
    assert f'{type(module_0.CurrencyRegistry.all).__module__}.{type(module_0.CurrencyRegistry.all).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codes).__module__}.{type(module_0.CurrencyRegistry.codes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codenames).__module__}.{type(module_0.CurrencyRegistry.codenames).__qualname__}' == 'builtins.property'
    module_1.Decimal(*currency_registry_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    currency_registry_0 = module_0.CurrencyRegistry()
    assert f'{type(module_0.CurrencyRegistry.all).__module__}.{type(module_0.CurrencyRegistry.all).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codes).__module__}.{type(module_0.CurrencyRegistry.codes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codenames).__module__}.{type(module_0.CurrencyRegistry.codenames).__qualname__}' == 'builtins.property'
    callable_0 = currency_registry_0.__enter__()
    none_type_0 = None
    currency_type_0 = module_0.CurrencyType.MONEY
    var_0 = module_2.dataclass(init=currency_registry_0, order=none_type_0, frozen=none_type_0)
    var_1 = var_0.__le__(callable_0)
    var_2 = var_1.__repr__()
    var_3 = var_2.__gt__(currency_type_0)
    currency_0 = module_0.Currency(currency_registry_0, var_3, var_1, var_1, var_3, none_type_0)
    var_4 = currency_0.__lt__(none_type_0)
    none_type_1 = currency_registry_0.__exit__(none_type_0, none_type_0, currency_registry_0)
    currency_lookup_error_0 = module_0.CurrencyLookupError(none_type_0)
    assert currency_lookup_error_0.code is None
    var_5 = module_2.dataclass(none_type_0, init=none_type_0, repr=none_type_0, match_args=none_type_0)
    currency_1 = module_0.Currency(none_type_0, callable_0, currency_type_0, currency_type_0, var_5, var_5)
    currency_1.quantize(currency_1)

@pytest.mark.xfail(strict=True)
def test_case_3():
    currency_registry_0 = module_0.CurrencyRegistry()
    assert f'{type(module_0.CurrencyRegistry.all).__module__}.{type(module_0.CurrencyRegistry.all).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codes).__module__}.{type(module_0.CurrencyRegistry.codes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codenames).__module__}.{type(module_0.CurrencyRegistry.codenames).__qualname__}' == 'builtins.property'
    str_0 = 'EuK\\PM;7JG'
    bool_0 = currency_registry_0.__contains__(str_0)
    assert bool_0 is False
    callable_0 = currency_registry_0.__enter__()
    bool_1 = currency_registry_0.has(str_0)
    assert bool_1 is False
    none_type_0 = None
    none_type_1 = None
    bytes_0 = b'\x9b'
    var_0 = module_2.dataclass(none_type_1, repr=bytes_0, unsafe_hash=callable_0)
    var_0.__delattr__(none_type_0)

def test_case_4():
    currency_registry_0 = module_0.CurrencyRegistry()
    assert f'{type(module_0.CurrencyRegistry.all).__module__}.{type(module_0.CurrencyRegistry.all).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codes).__module__}.{type(module_0.CurrencyRegistry.codes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.CurrencyRegistry.codenames).__module__}.{type(module_0.CurrencyRegistry.codenames).__qualname__}' == 'builtins.property'
    str_0 = '=53Z;W'
    str_1 = 'UU/AOk7|Vh}P\rQ\\'
    var_0 = currency_registry_0.get(str_1)
    float_0 = 2432.2
    var_1 = var_0.__gt__(float_0)
    with pytest.raises(module_0.CurrencyLookupError):
        currency_registry_0.__getitem__(str_0)