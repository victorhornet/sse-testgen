# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.schema as module_0
import mimesis.exceptions as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '\x0b'
    module_0.AbstractField(providers=str_0)

def test_case_1():
    abstract_field_0 = module_0.AbstractField()
    assert f'{type(abstract_field_0).__module__}.{type(abstract_field_0).__qualname__}' == 'mimesis_local.mimesis.schema.AbstractField'
    assert abstract_field_0.locale == 'en'
    assert abstract_field_0.seed is None

def test_case_2():
    abstract_field_0 = module_0.AbstractField()
    assert f'{type(abstract_field_0).__module__}.{type(abstract_field_0).__qualname__}' == 'mimesis_local.mimesis.schema.AbstractField'
    assert abstract_field_0.locale == 'en'
    assert abstract_field_0.seed is None
    var_0 = abstract_field_0.__str__()
    assert var_0 == 'AbstractField <en>'
    with pytest.raises(module_1.UndefinedField):
        abstract_field_0.__call__(key=var_0)

def test_case_3():
    abstract_field_0 = module_0.AbstractField()
    assert f'{type(abstract_field_0).__module__}.{type(abstract_field_0).__qualname__}' == 'mimesis_local.mimesis.schema.AbstractField'
    assert abstract_field_0.locale == 'en'
    assert abstract_field_0.seed is None
    str_0 = ''
    with pytest.raises(module_1.UnsupportedField):
        abstract_field_0.__call__(str_0)

def test_case_4():
    bool_0 = False
    with pytest.raises(module_1.UndefinedSchema):
        module_0.Schema(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    abstract_field_0 = module_0.AbstractField()
    assert f'{type(abstract_field_0).__module__}.{type(abstract_field_0).__qualname__}' == 'mimesis_local.mimesis.schema.AbstractField'
    assert abstract_field_0.locale == 'en'
    assert abstract_field_0.seed is None
    abstract_field_0.__call__(abstract_field_0)