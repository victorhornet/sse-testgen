# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import python-string-utils_local.string_utils.validation as module_0
import python-string-utils_local.string_utils.errors as module_1
import codecs as module_2
import re as module_3
import collections as module_4

def test_case_0():
    str_0 = ' NOQA '
    none_type_0 = None
    bool_0 = module_0.is_isbn_13(str_0, none_type_0)
    assert bool_0 is False

def test_case_1():
    none_type_0 = None
    bool_0 = module_0.is_email(none_type_0)
    assert bool_0 is False
    with pytest.raises(module_1.InvalidInputError):
        module_0.__ISBNChecker(none_type_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '.'
    bool_0 = module_0.is_isbn(str_0)
    assert bool_0 is False
    int_0 = module_0.words_count(str_0)
    assert int_0 == 0
    var_0 = module_2.make_identity_dict(str_0)
    var_0.pop(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '-IIzs:oWP,0xmQ#d*'
    bool_0 = module_0.is_string(str_0)
    bool_1 = module_0.is_credit_card(str_0)
    assert bool_1 is False
    bool_2 = module_0.is_ip_v6(bool_1)
    assert bool_2 is False
    int_0 = module_0.words_count(str_0)
    assert int_0 == 4
    module_0.is_integer(bool_2)

def test_case_4():
    none_type_0 = None
    bool_0 = module_0.is_palindrome(none_type_0)
    assert bool_0 is False

def test_case_5():
    str_0 = '2x)-'
    bool_0 = module_0.is_integer(str_0)
    assert bool_0 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    module_0.is_decimal(dict_0)

def test_case_7():
    str_0 = '\t'
    bool_0 = module_0.is_isbn(str_0)
    assert bool_0 is False
    str_1 = '%m)kG*S'
    bool_1 = module_0.is_isbn_13(str_0)
    bool_2 = module_0.is_pangram(str_1)
    bool_3 = module_0.is_decimal(str_1)
    assert bool_3 is False
    str_2 = '\n h_}a#\tI6cT'
    bool_4 = module_0.is_json(str_2)
    int_0 = module_0.words_count(str_0)
    assert int_0 == 0

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    bool_0 = module_0.is_isogram(none_type_0)
    assert bool_0 is False
    bool_1 = module_0.is_url(none_type_0)
    assert bool_1 is False
    module_2.getencoder(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    bool_0 = module_0.is_uuid(none_type_0)
    none_type_1 = None
    bool_1 = module_0.is_credit_card(none_type_1)
    assert bool_1 is False
    var_0 = module_2.iterencode(none_type_1, none_type_1)
    var_0.scan(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    set_0 = set()
    bool_0 = module_0.is_camel_case(set_0)
    assert bool_0 is False
    bool_1 = False
    bool_2 = module_0.is_ip_v6(bool_1)
    assert bool_2 is False
    bool_3 = module_0.is_email(bool_1)
    assert bool_3 is False
    bool_4 = module_0.is_isogram(bool_1)
    assert bool_4 is False
    set_0.is_isbn_10()

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '3M^SmJrnzzVj4;<'
    bool_0 = module_0.is_snake_case(str_0)
    assert bool_0 is False
    str_1 = '\r'
    bool_1 = module_0.is_decimal(str_1)
    assert bool_1 is False
    bool_2 = module_0.is_palindrome(bool_1, ignore_case=bool_1)
    assert bool_2 is False
    bool_3 = module_0.is_palindrome(str_0)
    assert bool_3 is False
    str_2 = '4n:E;s>+d"iG\t9uIEl'
    bool_4 = module_0.is_snake_case(str_2)
    bool_5 = module_0.is_number(str_0)
    none_type_0 = None
    module_2.make_identity_dict(none_type_0)

def test_case_12():
    str_0 = 'metadata'
    bool_0 = module_0.contains_html(str_0)
    assert bool_0 is False
    none_type_0 = None
    str_1 = 'd]iMS]l7cJYm6f$@H.'
    bool_1 = module_0.is_integer(str_1)
    assert bool_1 is False
    str_2 = '9&~AA`o`)Ocg'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2)
    assert f'{type(i_s_b_n_checker_0).__module__}.{type(i_s_b_n_checker_0).__qualname__}' == 'python-string-utils_local.string_utils.validation.__ISBNChecker'
    assert i_s_b_n_checker_0.input_string == '9&~AA`o`)Ocg'
    bool_2 = module_0.is_snake_case(none_type_0)
    assert bool_2 is False
    bool_3 = module_0.is_uuid(none_type_0)

def test_case_13():
    str_0 = '_tDg'
    bool_0 = module_0.is_uuid(str_0)
    bool_1 = module_0.is_full_string(str_0)
    assert bool_1 is True
    str_1 = 'l;CKTp">9\''
    bool_2 = module_0.contains_html(str_1)
    assert bool_2 is False
    str_2 = '<iU5tp^Lj\n~ae '
    bool_3 = module_0.is_pangram(bool_1)
    assert bool_3 is False
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2, str_2)
    assert f'{type(i_s_b_n_checker_0).__module__}.{type(i_s_b_n_checker_0).__qualname__}' == 'python-string-utils_local.string_utils.validation.__ISBNChecker'
    assert i_s_b_n_checker_0.input_string == '<iU5tp^Lj\n~ae '
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_0)
    bool_4 = module_0.is_json(bool_3)
    assert bool_4 is False
    bool_5 = module_0.is_full_string(i_s_b_n_checker_1)
    str_3 = 'Qe1?<x'
    int_0 = module_0.words_count(str_3)
    assert int_0 == 2
    bool_6 = i_s_b_n_checker_0.is_isbn_10()
    bool_7 = i_s_b_n_checker_0.is_isbn_10()

def test_case_14():
    none_type_0 = None
    bool_0 = module_0.is_ip(none_type_0)
    assert bool_0 is False
    bool_1 = module_0.is_ip_v6(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    float_0 = -2954.92851
    bool_0 = module_0.is_pangram(float_0)
    assert bool_0 is False
    str_0 = 'G\x0ci/0zi'
    bool_1 = False
    bool_2 = module_0.is_isbn_13(str_0, bool_1)
    assert bool_2 is False
    module_3.search(float_0, float_0, bool_0)

def test_case_16():
    str_0 = '; '
    bool_0 = module_0.is_number(str_0)
    assert bool_0 is False
    bool_1 = module_0.contains_html(str_0)
    assert bool_1 is False
    bool_2 = module_0.is_isbn_13(str_0)
    assert bool_2 is False
    none_type_0 = None
    bool_3 = module_0.is_pangram(none_type_0)
    assert bool_3 is False
    bool_4 = module_0.is_slug(str_0)
    assert bool_4 is False
    with pytest.raises(module_1.InvalidInputError):
        module_0.contains_html(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    bool_0 = module_0.is_slug(none_type_0)
    assert bool_0 is False
    set_0 = set()
    bool_1 = module_0.is_camel_case(set_0)
    assert bool_1 is False
    bool_2 = False
    bool_3 = module_0.is_ip_v6(bool_2)
    assert bool_3 is False
    bool_4 = module_0.is_email(bool_2)
    assert bool_4 is False
    bool_5 = module_0.is_isogram(bool_2)
    assert bool_5 is False
    chain_map_0 = module_4.ChainMap()
    var_0 = chain_map_0.__setitem__(bool_2, bool_5)
    chain_map_0.is_isbn_10()

def test_case_18():
    none_type_0 = None
    bool_0 = module_0.is_email(none_type_0)
    assert bool_0 is False
    str_0 = '\t'
    bool_1 = module_0.is_isbn(str_0)
    assert bool_1 is False
    with pytest.raises(module_1.InvalidInputError):
        module_0.words_count(bool_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    module_0.is_isbn_10(none_type_0)

def test_case_20():
    str_0 = '.'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    assert f'{type(i_s_b_n_checker_0).__module__}.{type(i_s_b_n_checker_0).__qualname__}' == 'python-string-utils_local.string_utils.validation.__ISBNChecker'
    assert i_s_b_n_checker_0.input_string == '.'
    bool_0 = i_s_b_n_checker_0.is_isbn_13()

def test_case_21():
    str_0 = '3'
    bool_0 = module_0.is_number(str_0)
    assert bool_0 is True
    str_1 = ']-\\h:xAHEfaQR'
    with pytest.raises(KeyError):
        module_0.is_credit_card(str_1, str_1)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '_tDg'
    bool_0 = module_0.is_full_string(str_0)
    assert bool_0 is True
    str_1 = 'l;CKTp">9\''
    bool_1 = module_0.contains_html(str_1)
    assert bool_1 is False
    none_type_0 = None
    bool_2 = module_0.is_email(none_type_0)
    assert bool_2 is False
    int_0 = module_0.words_count(str_0)
    assert int_0 == 1
    bool_3 = module_0.is_camel_case(none_type_0)
    assert bool_3 is False
    bool_4 = False
    bool_5 = module_0.is_ip_v6(bool_2)
    assert bool_5 is False
    bool_6 = module_0.is_email(str_1)
    assert bool_6 is False
    list_0 = [bool_4, bool_3]
    bool_7 = module_0.is_isogram(list_0)
    chain_map_0 = module_4.ChainMap()
    var_0 = chain_map_0.__setitem__(bool_7, bool_4)
    var_0.is_isbn_10()

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '.'
    bool_0 = module_0.is_isbn(str_0)
    assert bool_0 is False
    bool_1 = module_0.is_email(str_0)
    int_0 = module_0.words_count(str_0)
    assert int_0 == 0
    module_3.fullmatch(bool_1, bool_1, bool_0)