# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser.common as module_0
import enum as module_1
import builtins as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'Parse the docstring into its components.\n\n    :param text: docstring text to parse\n    :param style: docstring style\n    :returns: parsed docstring representation\n    '
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    module_1.unique(str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_1.unique(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ''
    docstring_example_0 = module_0.DocstringExample(str_0, str_0, str_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ''
    assert docstring_example_0.description == ''
    assert docstring_example_0.snippet == ''
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_1 = '8"}xcYH$I6sVRd&@caf<'
    docstring_deprecated_0 = module_0.DocstringDeprecated(str_0, str_0, str_1)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ''
    assert docstring_deprecated_0.description == ''
    assert docstring_deprecated_0.version == '8"}xcYH$I6sVRd&@caf<'
    str_2 = 'wnE#&G"WgT\tzU]@+'
    none_type_0 = None
    docstring_example_1 = module_0.DocstringExample(str_2, str_2, none_type_0)
    assert docstring_example_1.args == 'wnE#&G"WgT\tzU]@+'
    str_3 = '|Ua>>3$\x0be=*\x0bK'
    str_4 = 'WQ{z1\\0rEtH{:\r3Zh'
    list_0 = [str_0, str_3, str_4]
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_2)
    str_5 = '\n9y);i\nDC\x0blyM\t*'
    list_1 = [str_2, str_2, str_2, str_5]
    none_type_1 = None
    docstring_param_0 = module_0.DocstringParam(list_1, list_1, str_5, list_1, none_type_1, str_5)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['wnE#&G"WgT\tzU]@+', 'wnE#&G"WgT\tzU]@+', 'wnE#&G"WgT\tzU]@+', '\n9y);i\nDC\x0blyM\t*']
    assert docstring_param_0.description == ['wnE#&G"WgT\tzU]@+', 'wnE#&G"WgT\tzU]@+', 'wnE#&G"WgT\tzU]@+', '\n9y);i\nDC\x0blyM\t*']
    assert docstring_param_0.arg_name == '\n9y);i\nDC\x0blyM\t*'
    assert docstring_param_0.type_name == ['wnE#&G"WgT\tzU]@+', 'wnE#&G"WgT\tzU]@+', 'wnE#&G"WgT\tzU]@+', '\n9y);i\nDC\x0blyM\t*']
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == '\n9y);i\nDC\x0blyM\t*'
    docstring_param_0.__iter__(str_2)

def test_case_3():
    rendering_style_0 = module_0.RenderingStyle.CLEAN
    none_type_0 = None
    bytes_0 = b'\xb9\xd4sE\xd4\xa1\xf5F\xa1'
    docstring_returns_0 = module_0.DocstringReturns(bytes_0, none_type_0, rendering_style_0, rendering_style_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == b'\xb9\xd4sE\xd4\xa1\xf5F\xa1'
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name == module_0.RenderingStyle.CLEAN
    assert docstring_returns_0.is_generator == module_0.RenderingStyle.CLEAN
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_returns_1 = module_0.DocstringReturns(none_type_0, none_type_0, none_type_0, none_type_0)
    assert docstring_returns_1.args is None
    assert docstring_returns_1.description is None
    str_0 = "haidcTX6'P9L#0S"
    list_0 = [str_0]
    docstring_example_0 = module_0.DocstringExample(list_0, docstring_returns_1, none_type_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ["haidcTX6'P9L#0S"]
    assert docstring_example_0.description is None
    assert f'{type(docstring_example_0.snippet).__module__}.{type(docstring_example_0.snippet).__qualname__}' == 'docstring_parser.common.DocstringReturns'

def test_case_4():
    none_type_0 = None
    docstring_0 = module_0.Docstring(none_type_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    rendering_style_0 = module_0.RenderingStyle.COMPACT
    str_0 = 'sgQrR\x0b\r8Tq{'
    none_type_1 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(none_type_1, none_type_1, rendering_style_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version == module_0.RenderingStyle.COMPACT
    docstring_raises_0 = module_0.DocstringRaises(str_0, none_type_1, none_type_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == 'sgQrR\x0b\r8Tq{'
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None
    none_type_2 = None
    docstring_deprecated_1 = module_0.DocstringDeprecated(none_type_2, str_0, none_type_2)
    assert docstring_deprecated_1.args is None
    list_0 = [str_0, str_0]
    float_0 = -421.1
    bool_0 = True
    docstring_returns_0 = module_0.DocstringReturns(list_0, float_0, none_type_0, bool_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['sgQrR\x0b\r8Tq{', 'sgQrR\x0b\r8Tq{']
    assert docstring_returns_0.description == pytest.approx(-421.1, abs=0.01, rel=0.01)
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name is True
    str_1 = '<<{h;rNih)8@udu'
    docstring_example_0 = module_0.DocstringExample(docstring_deprecated_0, none_type_1, none_type_1)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert f'{type(docstring_example_0.args).__module__}.{type(docstring_example_0.args).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None
    list_1 = []
    docstring_param_0 = module_0.DocstringParam(list_1, none_type_2, str_1, docstring_raises_0, none_type_1, none_type_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == []
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == '<<{h;rNih)8@udu'
    assert f'{type(docstring_param_0.type_name).__module__}.{type(docstring_param_0.type_name).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    docstring_deprecated_2 = module_0.DocstringDeprecated(list_1, str_0, list_1)
    assert docstring_deprecated_2.args == []
    docstring_param_1 = module_0.DocstringParam(str_0, none_type_2, none_type_2, str_1, none_type_2, none_type_2)
    assert docstring_param_1.args == 'sgQrR\x0b\r8Tq{'
    assert docstring_param_1.description is None
    parse_error_0 = module_0.ParseError()
    docstring_deprecated_3 = module_0.DocstringDeprecated(str_0, none_type_2, str_0)
    assert docstring_deprecated_3.args == 'sgQrR\x0b\r8Tq{'
    docstring_param_2 = module_0.DocstringParam(none_type_2, str_0, none_type_2, str_0, docstring_param_1, str_1)
    assert docstring_param_2.args is None
    assert docstring_param_2.description == 'sgQrR\x0b\r8Tq{'
    list_2 = [str_0]
    docstring_meta_0 = module_0.DocstringMeta(list_2, str_1)
    docstring_returns_1 = module_0.DocstringReturns(list_2, str_0, str_0, list_2, list_2)
    assert docstring_returns_1.args == ['sgQrR\x0b\r8Tq{']
    assert docstring_returns_1.description == 'sgQrR\x0b\r8Tq{'
    docstring_meta_1 = module_0.DocstringMeta(list_2, none_type_1)

def test_case_5():
    parse_error_0 = module_0.ParseError()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    int_0 = 99
    docstring_style_0 = module_0.DocstringStyle.EPYDOC
    str_0 = '17dSN[!,?Ti[\tHjdN%'
    list_0 = [str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, docstring_style_0, str_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['17dSN[!,?Ti[\tHjdN%']
    assert docstring_deprecated_0.description == module_0.DocstringStyle.EPYDOC
    assert docstring_deprecated_0.version == '17dSN[!,?Ti[\tHjdN%'
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(int_0, none_type_0)
    docstring_meta_1 = module_0.DocstringMeta(none_type_0, none_type_0)
    str_1 = 'mc!"@$\rY\rW\'<2xX ^^T'
    list_1 = [str_1]
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_1, none_type_0, docstring_meta_0)
    assert docstring_deprecated_1.args == ['mc!"@$\rY\rW\'<2xX ^^T']
    docstring_style_1 = module_0.DocstringStyle.AUTO
    docstring_meta_2 = module_0.DocstringMeta(list_1, docstring_meta_0)
    str_2 = ']J\\~Yz6x'
    list_2 = [str_2, str_2]
    none_type_1 = None
    docstring_param_0 = module_0.DocstringParam(docstring_style_1, str_2, str_2, str_2, none_type_1, docstring_style_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == module_0.DocstringStyle.AUTO
    assert docstring_param_0.description == ']J\\~Yz6x'
    assert docstring_param_0.arg_name == ']J\\~Yz6x'
    assert docstring_param_0.type_name == ']J\\~Yz6x'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == module_0.DocstringStyle.AUTO
    bytes_0 = b'\xc7'
    int_1 = 886
    docstring_param_1 = module_0.DocstringParam(list_1, bytes_0, str_1, none_type_1, int_0, int_1)
    assert docstring_param_1.args == ['mc!"@$\rY\rW\'<2xX ^^T']
    assert docstring_param_1.description == b'\xc7'
    docstring_style_2 = module_0.DocstringStyle.REST
    docstring_0 = module_0.Docstring(int_0)
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_1 = module_0.Docstring()
    docstring_example_0 = module_0.DocstringExample(list_1, none_type_1, docstring_style_2)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['mc!"@$\rY\rW\'<2xX ^^T']
    assert docstring_example_0.description == module_0.DocstringStyle.REST
    assert docstring_example_0.snippet is None
    str_3 = '\tPQ\nsoUN'
    docstring_raises_0 = module_0.DocstringRaises(list_2, str_3, docstring_style_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == [']J\\~Yz6x', ']J\\~Yz6x']
    assert docstring_raises_0.description == '\tPQ\nsoUN'
    assert docstring_raises_0.type_name == module_0.DocstringStyle.AUTO
    docstring_deprecated_2 = module_0.DocstringDeprecated(list_2, str_2, str_2)
    assert docstring_deprecated_2.args == [']J\\~Yz6x', ']J\\~Yz6x']
    docstring_meta_3 = module_0.DocstringMeta(docstring_deprecated_1, str_2)
    docstring_meta_4 = module_0.DocstringMeta(list_1, docstring_meta_0)
    docstring_deprecated_3 = module_0.DocstringDeprecated(str_3, str_3, str_3)
    assert docstring_deprecated_3.args == '\tPQ\nsoUN'

@pytest.mark.xfail(strict=True)
def test_case_6():
    docstring_style_0 = module_0.DocstringStyle.NUMPYDOC
    rendering_style_0 = module_0.RenderingStyle.EXPANDED
    none_type_0 = None
    list_0 = []
    docstring_param_0 = module_0.DocstringParam(list_0, list_0, docstring_style_0, docstring_style_0, none_type_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == []
    assert docstring_param_0.description == []
    assert docstring_param_0.arg_name == module_0.DocstringStyle.NUMPYDOC
    assert docstring_param_0.type_name == module_0.DocstringStyle.NUMPYDOC
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    bool_0 = True
    docstring_returns_0 = module_0.DocstringReturns(rendering_style_0, none_type_0, none_type_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == module_0.RenderingStyle.EXPANDED
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name is None
    none_type_1 = None
    rendering_style_0.__reversed__(none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'bPcw{y;$CDJ_"'
    str_1 = ''
    list_0 = [str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, list_0, str_1)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['bPcw{y;$CDJ_"']
    assert docstring_deprecated_0.description == ['bPcw{y;$CDJ_"']
    assert docstring_deprecated_0.version == ''
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_1 = [str_0, str_0, str_1]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(list_1, str_0, str_1, list_1, none_type_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['bPcw{y;$CDJ_"', 'bPcw{y;$CDJ_"', '']
    assert docstring_param_0.description == 'bPcw{y;$CDJ_"'
    assert docstring_param_0.arg_name == ''
    assert docstring_param_0.type_name == ['bPcw{y;$CDJ_"', 'bPcw{y;$CDJ_"', '']
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    str_2 = ':?cL'
    parse_error_0 = module_0.ParseError()
    dict_0 = {str_2: str_2}
    module_0.ParseError(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'qhQ$7'
    module_1.unique(str_0)

def test_case_9():
    complex_0 = (-1532+268j)
    str_0 = 'a'
    docstring_param_0 = module_0.DocstringParam(complex_0, complex_0, str_0, str_0, complex_0, complex_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == (-1532+268j)
    assert docstring_param_0.description == (-1532+268j)
    assert docstring_param_0.arg_name == 'a'
    assert docstring_param_0.type_name == 'a'
    assert docstring_param_0.is_optional == (-1532+268j)
    assert docstring_param_0.default == (-1532+268j)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}

@pytest.mark.xfail(strict=True)
def test_case_10():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_style_0 = module_0.DocstringStyle.NUMPYDOC
    str_0 = '\tY_0>fJ}S'
    str_1 = '"Jy6=v*'
    docstring_1 = module_0.Docstring()
    list_0 = [str_0, str_1]
    docstring_example_0 = module_0.DocstringExample(docstring_0, list_0, list_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert f'{type(docstring_example_0.args).__module__}.{type(docstring_example_0.args).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_example_0.description == ['\tY_0>fJ}S', '"Jy6=v*']
    assert docstring_example_0.snippet == ['\tY_0>fJ}S', '"Jy6=v*']
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_1, str_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == ['\tY_0>fJ}S', '"Jy6=v*']
    assert docstring_raises_0.description == '"Jy6=v*'
    assert docstring_raises_0.type_name == '"Jy6=v*'
    docstring_raises_1 = module_0.DocstringRaises(docstring_0, docstring_style_0, docstring_0)
    assert f'{type(docstring_raises_1.args).__module__}.{type(docstring_raises_1.args).__qualname__}' == 'docstring_parser.common.Docstring'
    docstring_meta_0 = module_0.DocstringMeta(list_0, docstring_example_0)
    none_type_0 = None
    str_2 = '\t+TJ26'
    docstring_param_0 = module_0.DocstringParam(none_type_0, str_2, str_2, str_2, none_type_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args is None
    assert docstring_param_0.description == '\t+TJ26'
    assert docstring_param_0.arg_name == '\t+TJ26'
    assert docstring_param_0.type_name == '\t+TJ26'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    list_1 = [str_2, str_2]
    docstring_meta_1 = module_0.DocstringMeta(list_1, none_type_0)
    docstring_meta_2 = module_0.DocstringMeta(none_type_0, none_type_0)
    docstring_deprecated_0 = module_0.DocstringDeprecated(none_type_0, none_type_0, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    module_1.unique(list_1)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'xlX\\oeTMz>h{6['
    module_1.unique(str_0)

def test_case_12():
    list_0 = []
    str_0 = 'NiU^+UU\\ pZZY?F=K!7D'
    none_type_0 = None
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_0, none_type_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == []
    assert docstring_returns_0.description == 'NiU^+UU\\ pZZY?F=K!7D'
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_1 = []
    str_1 = 'Dw\x0cD#[[;`'
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_1, str_1, str_1)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description == 'Dw\x0cD#[[;`'
    assert docstring_deprecated_0.version == 'Dw\x0cD#[[;`'
    str_2 = "85k'r"
    list_2 = []
    parse_error_0 = module_0.ParseError(*list_2)
    docstring_raises_0 = module_0.DocstringRaises(list_2, str_2, str_2)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description == "85k'r"
    assert docstring_raises_0.type_name == "85k'r"
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_1, str_2, list_1)
    assert docstring_deprecated_1.args == []
    docstring_meta_0 = module_0.DocstringMeta(list_1, str_2)
    docstring_raises_1 = module_0.DocstringRaises(docstring_deprecated_1, str_2, docstring_deprecated_1)
    assert f'{type(docstring_raises_1.args).__module__}.{type(docstring_raises_1.args).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'

@pytest.mark.xfail(strict=True)
def test_case_13():
    docstring_style_0 = module_0.DocstringStyle.AUTO
    none_type_0 = None
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_returns_0 = module_0.DocstringReturns(docstring_style_0, docstring_style_0, none_type_0, docstring_style_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == module_0.DocstringStyle.AUTO
    assert docstring_returns_0.description == module_0.DocstringStyle.AUTO
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator == module_0.DocstringStyle.AUTO
    assert docstring_returns_0.return_name is None
    docstring_0.__len__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    none_type_0 = None
    docstring_returns_0 = module_0.DocstringReturns(bool_0, none_type_0, none_type_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args is True
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    module_1.unique(bool_0)

def test_case_15():
    dict_0 = {}
    docstring_returns_0 = module_0.DocstringReturns(dict_0, dict_0, dict_0, dict_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == {}
    assert docstring_returns_0.description == {}
    assert docstring_returns_0.type_name == {}
    assert docstring_returns_0.is_generator == {}
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_raises_0 = module_0.DocstringRaises(docstring_returns_0, docstring_returns_0, docstring_returns_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert f'{type(docstring_raises_0.args).__module__}.{type(docstring_raises_0.args).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert f'{type(docstring_raises_0.description).__module__}.{type(docstring_raises_0.description).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert f'{type(docstring_raises_0.type_name).__module__}.{type(docstring_raises_0.type_name).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    parse_error_0 = module_0.ParseError()

@pytest.mark.xfail(strict=True)
def test_case_16():
    rendering_style_0 = module_0.RenderingStyle.CLEAN
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(rendering_style_0, none_type_0, rendering_style_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == module_0.RenderingStyle.CLEAN
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version == module_0.RenderingStyle.CLEAN
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_0 = ''
    str_1 = 'K"=Ej>t!"2:w&b4\x0b'
    list_0 = [str_0, str_1]
    docstring_example_0 = module_0.DocstringExample(list_0, none_type_0, none_type_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['', 'K"=Ej>t!"2:w&b4\x0b']
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None
    docstring_style_0 = module_0.DocstringStyle.GOOGLE
    str_2 = 'oc6I@^rc@qeq'
    str_3 = '+*\\lF[?19o\rjv\rlJ=U|h'
    list_1 = [str_2, str_3, str_2]
    docstring_param_0 = module_0.DocstringParam(list_1, str_3, none_type_0, str_3, rendering_style_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['oc6I@^rc@qeq', '+*\\lF[?19o\rjv\rlJ=U|h', 'oc6I@^rc@qeq']
    assert docstring_param_0.description == '+*\\lF[?19o\rjv\rlJ=U|h'
    assert docstring_param_0.arg_name is None
    assert docstring_param_0.type_name == '+*\\lF[?19o\rjv\rlJ=U|h'
    assert docstring_param_0.is_optional == module_0.RenderingStyle.CLEAN
    assert docstring_param_0.default is None
    bool_0 = True
    docstring_returns_0 = module_0.DocstringReturns(none_type_0, none_type_0, none_type_0, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args is None
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name is None
    list_2 = []
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_2, none_type_0, none_type_0)
    assert docstring_deprecated_1.args == []
    docstring_returns_1 = module_0.DocstringReturns(rendering_style_0, docstring_style_0, rendering_style_0, rendering_style_0)
    assert docstring_returns_1.args == module_0.RenderingStyle.CLEAN
    assert docstring_returns_1.description == module_0.DocstringStyle.GOOGLE
    module_1.unique(docstring_deprecated_0)

def test_case_17():
    str_0 = 'o4";V^ <&'
    str_1 = 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        ValueError\n            A description of what might raise ValueError\n    '
    str_2 = 'T}VvL'
    list_0 = [str_0, str_1, str_2, str_2]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(list_0, list_0, none_type_0, str_2, list_0, str_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['o4";V^ <&', 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        ValueError\n            A description of what might raise ValueError\n    ', 'T}VvL', 'T}VvL']
    assert docstring_param_0.description == ['o4";V^ <&', 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        ValueError\n            A description of what might raise ValueError\n    ', 'T}VvL', 'T}VvL']
    assert docstring_param_0.arg_name is None
    assert docstring_param_0.type_name == 'T}VvL'
    assert docstring_param_0.is_optional == ['o4";V^ <&', 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        ValueError\n            A description of what might raise ValueError\n    ', 'T}VvL', 'T}VvL']
    assert docstring_param_0.default == 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        ValueError\n            A description of what might raise ValueError\n    '
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    parse_error_0 = module_0.ParseError()
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    with pytest.raises(AttributeError):
        docstring_0.__getattr__(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(none_type_0, none_type_0, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    rendering_style_0 = module_0.RenderingStyle.EXPANDED
    module_1.unique(rendering_style_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = '5%~m9'
    str_1 = 'yields'
    list_0 = [str_0, str_0, str_1]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, list_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['5%~m9', '5%~m9', 'yields']
    assert docstring_deprecated_0.description == '5%~m9'
    assert docstring_deprecated_0.version == ['5%~m9', '5%~m9', 'yields']
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_0, str_0, docstring_deprecated_0, str_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['5%~m9', '5%~m9', 'yields']
    assert docstring_returns_0.description == '5%~m9'
    assert docstring_returns_0.type_name == '5%~m9'
    assert f'{type(docstring_returns_0.is_generator).__module__}.{type(docstring_returns_0.is_generator).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_returns_0.return_name == '5%~m9'
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_1)
    list_1 = []
    parse_error_0 = module_0.ParseError()
    docstring_raises_0 = module_0.DocstringRaises(list_1, str_0, str_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description == '5%~m9'
    assert docstring_raises_0.type_name == '5%~m9'
    str_2 = ''
    docstring_returns_1 = module_0.DocstringReturns(list_1, str_2, str_2, list_1)
    assert docstring_returns_1.args == []
    assert docstring_returns_1.description == ''
    module_1.EnumMeta(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '<5hC/o$jx$h'
    str_1 = 'Gj1i'
    str_2 = 'Receives'
    docstring_0 = module_0.Docstring(str_2)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_3 = ":\x0bW'),D"
    str_4 = '7y\reO=!\x0bT~<g-p2WOj'
    str_5 = 'wW0`\\\x0c'
    list_0 = [str_3, str_4, str_1, str_5]
    none_type_0 = None
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_4, none_type_0, str_3)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == [":\x0bW'),D", '7y\reO=!\x0bT~<g-p2WOj', 'Gj1i', 'wW0`\\\x0c']
    assert docstring_returns_0.description == '7y\reO=!\x0bT~<g-p2WOj'
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator == ":\x0bW'),D"
    assert docstring_returns_0.return_name is None
    docstring_meta_0 = module_0.DocstringMeta(none_type_0, none_type_0)
    list_1 = [str_0, str_0, str_1, str_2]
    str_6 = 'Parse the ReST-style docstring into its components.\n\n    :returns: parsed docstring\n    '
    rendering_style_0 = module_0.RenderingStyle.EXPANDED
    bool_0 = False
    docstring_param_0 = module_0.DocstringParam(list_1, str_0, str_6, str_1, bool_0, bool_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['<5hC/o$jx$h', '<5hC/o$jx$h', 'Gj1i', 'Receives']
    assert docstring_param_0.description == '<5hC/o$jx$h'
    assert docstring_param_0.arg_name == 'Parse the ReST-style docstring into its components.\n\n    :returns: parsed docstring\n    '
    assert docstring_param_0.type_name == 'Gj1i'
    assert docstring_param_0.is_optional is False
    assert docstring_param_0.default is False
    rendering_style_0.__contains__(rendering_style_0, list_1)

def test_case_21():
    str_0 = ';b}7~-n&9TE\\'
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(none_type_0, none_type_0, none_type_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args is None
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_1 = '\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)'
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_2 = ';S\nI\x0c__`%-1\\'
    list_0 = [str_1, str_2, str_2, str_2]
    docstring_param_0 = module_0.DocstringParam(list_0, none_type_0, none_type_0, docstring_example_0, none_type_0, docstring_example_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)', ';S\nI\x0c__`%-1\\', ';S\nI\x0c__`%-1\\', ';S\nI\x0c__`%-1\\']
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name is None
    assert f'{type(docstring_param_0.type_name).__module__}.{type(docstring_param_0.type_name).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_param_0.is_optional is None
    assert f'{type(docstring_param_0.default).__module__}.{type(docstring_param_0.default).__qualname__}' == 'docstring_parser.common.DocstringExample'
    str_3 = '[-W\x0b)q1X"*```%'
    str_4 = '\x0c[4)>z'
    str_5 = '>=OP]8[J-]w-#'
    rendering_style_0 = module_0.RenderingStyle.COMPACT
    list_1 = [str_5]
    dict_0 = {str_4: list_1, str_4: str_5}
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_1, str_3, dict_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['>=OP]8[J-]w-#']
    assert docstring_deprecated_0.description == '[-W\x0b)q1X"*```%'
    assert docstring_deprecated_0.version == {'\x0c[4)>z': '>=OP]8[J-]w-#'}
    list_2 = [str_0, str_3, str_4, str_5]
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_2, str_0, str_3)
    assert docstring_deprecated_1.args == [';b}7~-n&9TE\\', '[-W\x0b)q1X"*```%', '\x0c[4)>z', '>=OP]8[J-]w-#']
    docstring_returns_0 = module_0.DocstringReturns(list_2, rendering_style_0, str_5, str_5)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == [';b}7~-n&9TE\\', '[-W\x0b)q1X"*```%', '\x0c[4)>z', '>=OP]8[J-]w-#']
    assert docstring_returns_0.description == module_0.RenderingStyle.COMPACT
    assert docstring_returns_0.type_name == '>=OP]8[J-]w-#'
    assert docstring_returns_0.is_generator == '>=OP]8[J-]w-#'
    assert docstring_returns_0.return_name is None

@pytest.mark.xfail(strict=True)
def test_case_22():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_0 = 'Qwt~\n'
    list_0 = [str_0]
    str_1 = '.'
    docstring_1 = module_0.Docstring(docstring_0)
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_1)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['Qwt~\n']
    assert docstring_deprecated_0.description == 'Qwt~\n'
    assert docstring_deprecated_0.version == '.'
    parse_error_0 = module_0.ParseError()
    str_2 = ']#'
    dict_0 = {str_1: docstring_deprecated_0, str_2: list_0}
    module_0.ParseError(*parse_error_0, **dict_0)

def test_case_23():
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(none_type_0, none_type_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_0 = []
    docstring_raises_0 = module_0.DocstringRaises(list_0, none_type_0, none_type_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, none_type_0, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    parse_error_0 = module_0.ParseError()
    docstring_meta_1 = module_0.DocstringMeta(none_type_0, none_type_0)

def test_case_24():
    list_0 = []
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_1 = module_0.Docstring(list_0)
    str_0 = 'v'
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, str_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == []
    assert docstring_example_0.description == 'v'
    assert docstring_example_0.snippet == 'v'
    docstring_meta_0 = module_0.DocstringMeta(docstring_example_0, str_0)
    parse_error_0 = module_0.ParseError(*list_0)
    docstring_example_1 = module_0.DocstringExample(list_0, list_0, list_0)
    assert docstring_example_1.args == []
    docstring_2 = module_0.Docstring()
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_0, str_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description == 'v'
    assert docstring_raises_0.type_name == 'v'
    none_type_0 = None
    parse_error_1 = module_0.ParseError()
    bool_0 = True
    docstring_example_2 = module_0.DocstringExample(docstring_2, none_type_0, none_type_0)
    assert f'{type(docstring_example_2.args).__module__}.{type(docstring_example_2.args).__qualname__}' == 'docstring_parser.common.Docstring'
    docstring_raises_1 = module_0.DocstringRaises(docstring_2, docstring_2, none_type_0)
    assert f'{type(docstring_raises_1.args).__module__}.{type(docstring_raises_1.args).__qualname__}' == 'docstring_parser.common.Docstring'
    docstring_meta_1 = module_0.DocstringMeta(list_0, docstring_example_0)
    docstring_returns_0 = module_0.DocstringReturns(none_type_0, none_type_0, docstring_2, bool_0, none_type_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args is None
    assert docstring_returns_0.description is None
    assert f'{type(docstring_returns_0.type_name).__module__}.{type(docstring_returns_0.type_name).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name is None
    docstring_meta_2 = module_0.DocstringMeta(docstring_2, none_type_0)
    bool_1 = True
    docstring_returns_1 = module_0.DocstringReturns(list_0, docstring_raises_1, none_type_0, bool_1, docstring_example_1)
    assert docstring_returns_1.args == []
    assert f'{type(docstring_returns_1.description).__module__}.{type(docstring_returns_1.description).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    docstring_meta_3 = module_0.DocstringMeta(docstring_0, docstring_returns_1)
    docstring_deprecated_0 = module_0.DocstringDeprecated(none_type_0, none_type_0, docstring_meta_3)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description is None
    assert f'{type(docstring_deprecated_0.version).__module__}.{type(docstring_deprecated_0.version).__qualname__}' == 'docstring_parser.common.DocstringMeta'
    docstring_deprecated_1 = module_0.DocstringDeprecated(docstring_0, list_0, none_type_0)
    assert f'{type(docstring_deprecated_1.args).__module__}.{type(docstring_deprecated_1.args).__qualname__}' == 'docstring_parser.common.Docstring'
    docstring_3 = module_0.Docstring()
    docstring_meta_4 = module_0.DocstringMeta(list_0, none_type_0)
    str_1 = "v2%cnH96]E:VyQ2<'/7H"
    docstring_example_3 = module_0.DocstringExample(list_0, str_1, docstring_meta_3)
    assert docstring_example_3.args == []
    docstring_deprecated_2 = module_0.DocstringDeprecated(list_0, bool_0, none_type_0)
    assert docstring_deprecated_2.args == []

@pytest.mark.xfail(strict=True)
def test_case_25():
    list_0 = []
    parse_error_0 = module_0.ParseError()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    module_0.ParseError(*list_0, **list_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = 'Receives'
    list_0 = []
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, str_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == []
    assert docstring_example_0.description == 'Receives'
    assert docstring_example_0.snippet == 'Receives'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_1 = 'f_\rG'
    dict_0 = {str_0: str_0, str_1: str_1}
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(str_0, str_1, str_0, bool_0, str_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == 'Receives'
    assert docstring_returns_0.description == 'f_\rG'
    assert docstring_returns_0.type_name == 'Receives'
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name == 'Receives'
    module_0.ParseError(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = 'Xj=`'
    none_type_0 = None
    docstring_0 = module_0.Docstring(none_type_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    list_0 = []
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_0, str_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description == 'Xj=`'
    assert docstring_raises_0.type_name == 'Xj=`'
    module_1.unique(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    list_0 = []
    docstring_example_0 = module_0.DocstringExample(list_0, list_0, list_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == []
    assert docstring_example_0.description == []
    assert docstring_example_0.snippet == []
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_0 = None
    module_1.unique(none_type_0)

def test_case_29():
    pass

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 'Base parser for numpydoc sections with key-value syntax.\n\n    E.g. sections that look like this:\n        key\n            value\n        key2 : type\n            values can also span...\n            ... multiple lines\n    '
    list_0 = [str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['Base parser for numpydoc sections with key-value syntax.\n\n    E.g. sections that look like this:\n        key\n            value\n        key2 : type\n            values can also span...\n            ... multiple lines\n    ']
    assert docstring_deprecated_0.description == 'Base parser for numpydoc sections with key-value syntax.\n\n    E.g. sections that look like this:\n        key\n            value\n        key2 : type\n            values can also span...\n            ... multiple lines\n    '
    assert docstring_deprecated_0.version == 'Base parser for numpydoc sections with key-value syntax.\n\n    E.g. sections that look like this:\n        key\n            value\n        key2 : type\n            values can also span...\n            ... multiple lines\n    '
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    module_1.EnumMeta()

def test_case_31():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'

def test_case_32():
    none_type_0 = None
    list_0 = []
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, none_type_0, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_1 = [none_type_0, none_type_0, none_type_0]
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        list_1.__contains__(list_1, none_type_0)

def test_case_33():
    str_0 = 'R:-\x0b$/b9-S}3P\ni'
    str_1 = 'j^sr&<~?C'
    list_0 = [str_0]
    docstring_param_0 = module_0.DocstringParam(list_0, str_1, list_0, str_1, str_0, str_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['R:-\x0b$/b9-S}3P\ni']
    assert docstring_param_0.description == 'j^sr&<~?C'
    assert docstring_param_0.arg_name == ['R:-\x0b$/b9-S}3P\ni']
    assert docstring_param_0.type_name == 'j^sr&<~?C'
    assert docstring_param_0.is_optional == 'R:-\x0b$/b9-S}3P\ni'
    assert docstring_param_0.default == 'j^sr&<~?C'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_2 = 'NRy'
    str_3 = '%/)02\x0cHl'
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(str_3, str_0, str_1, bool_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == '%/)02\x0cHl'
    assert docstring_returns_0.description == 'R:-\x0b$/b9-S}3P\ni'
    assert docstring_returns_0.type_name == 'j^sr&<~?C'
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name is None
    list_1 = [str_1, str_2, str_1, str_3]
    docstring_param_1 = module_0.DocstringParam(str_0, str_1, list_1, docstring_returns_0, str_3, str_0)
    assert docstring_param_1.args == 'R:-\x0b$/b9-S}3P\ni'
    assert docstring_param_1.description == 'j^sr&<~?C'
    bytes_0 = b'\xfb\x0bu//\xf3}\x06\xb9\x10\xdd\x8cND(\x00-n\x04\xf9'
    docstring_example_0 = module_0.DocstringExample(list_1, str_0, bytes_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['j^sr&<~?C', 'NRy', 'j^sr&<~?C', '%/)02\x0cHl']
    assert docstring_example_0.description == b'\xfb\x0bu//\xf3}\x06\xb9\x10\xdd\x8cND(\x00-n\x04\xf9'
    assert docstring_example_0.snippet == 'R:-\x0b$/b9-S}3P\ni'
    list_2 = [str_0, str_0, str_1]
    docstring_meta_0 = module_0.DocstringMeta(list_1, str_1)
    var_0 = list_2.__dir__()
    parse_error_0 = module_0.ParseError(*list_2)
    docstring_meta_1 = module_0.DocstringMeta(list_2, str_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    module_1.unique(none_type_0)

def test_case_35():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_0 = 'S\rO>XA1kzt@!52X02~'
    str_1 = 'X^I]MO8'
    str_2 = '-]&1D*dktq"-Zqpxa{('
    str_3 = 'Z'
    list_0 = [str_0, str_1, str_2, str_3]
    docstring_example_0 = module_0.DocstringExample(list_0, str_3, str_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['S\rO>XA1kzt@!52X02~', 'X^I]MO8', '-]&1D*dktq"-Zqpxa{(', 'Z']
    assert docstring_example_0.description == 'S\rO>XA1kzt@!52X02~'
    assert docstring_example_0.snippet == 'Z'
    str_4 = 'qi$cH/g\\&G=TaY\x0cF^yiS'
    list_1 = [str_4, str_4, str_4]
    docstring_example_1 = module_0.DocstringExample(list_1, list_1, str_4)
    assert docstring_example_1.args == ['qi$cH/g\\&G=TaY\x0cF^yiS', 'qi$cH/g\\&G=TaY\x0cF^yiS', 'qi$cH/g\\&G=TaY\x0cF^yiS']

def test_case_36():
    bool_0 = True
    dict_0 = {}
    parse_error_0 = module_0.ParseError(**dict_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    none_type_0 = None
    list_0 = []
    parse_error_1 = module_0.ParseError(*list_0)
    docstring_raises_0 = module_0.DocstringRaises(bool_0, none_type_0, bool_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args is True
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is True
    parse_error_2 = module_0.ParseError()

def test_case_37():
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(none_type_0, none_type_0, none_type_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_0 = [none_type_0, none_type_0]
    dict_0 = {}
    base_exception_0 = module_2.BaseException(*list_0, **dict_0)
    with pytest.raises(TypeError):
        dict_0.__contains__(none_type_0, none_type_0)

def test_case_38():
    str_0 = 'AVt"{q@.%C5'
    str_1 = 'Vq* @DS$'
    str_2 = ''
    str_3 = '`~\\g0py {<eVoxUkN'
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    list_0 = [str_1, str_2, str_2, str_3]
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(none_type_0, none_type_0, str_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name == 'Vq* @DS$'
    docstring_raises_1 = module_0.DocstringRaises(list_0, str_1, str_2)
    assert docstring_raises_1.args == ['Vq* @DS$', '', '', '`~\\g0py {<eVoxUkN']
    str_4 = 'eeu5O;#Zc 2OlG6}'
    list_1 = [str_0, str_4]
    docstring_raises_2 = module_0.DocstringRaises(list_1, str_0, list_1)
    assert docstring_raises_2.args == ['AVt"{q@.%C5', 'eeu5O;#Zc 2OlG6}']
    none_type_1 = None
    set_0 = {str_4, docstring_raises_2}
    docstring_1 = module_0.Docstring(set_0)
    docstring_param_0 = module_0.DocstringParam(none_type_1, str_4, docstring_raises_2, str_0, none_type_1, str_4)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args is None
    assert docstring_param_0.description == 'eeu5O;#Zc 2OlG6}'
    assert f'{type(docstring_param_0.arg_name).__module__}.{type(docstring_param_0.arg_name).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_param_0.type_name == 'AVt"{q@.%C5'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == 'eeu5O;#Zc 2OlG6}'

@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = 'bp7k;v ,.CA^\t'
    str_1 = 'O~N>&w C&+TS1.knUbS7'
    str_2 = 's`q,3@q)pysI?#'
    str_3 = '*6S#W4#?R@p)I(zu'
    list_0 = []
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_3, str_3)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description == '*6S#W4#?R@p)I(zu'
    assert docstring_raises_0.type_name == '*6S#W4#?R@p)I(zu'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_1 = [str_2, str_3, str_2]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_1, str_3, str_1)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['s`q,3@q)pysI?#', '*6S#W4#?R@p)I(zu', 's`q,3@q)pysI?#']
    assert docstring_deprecated_0.description == '*6S#W4#?R@p)I(zu'
    assert docstring_deprecated_0.version == 'O~N>&w C&+TS1.knUbS7'
    list_2 = [str_0, str_1, str_1]
    docstring_example_0 = module_0.DocstringExample(list_2, str_0, str_1)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['bp7k;v ,.CA^\t', 'O~N>&w C&+TS1.knUbS7', 'O~N>&w C&+TS1.knUbS7']
    assert docstring_example_0.description == 'O~N>&w C&+TS1.knUbS7'
    assert docstring_example_0.snippet == 'bp7k;v ,.CA^\t'
    list_2.__reversed__(str_1)

def test_case_40():
    str_0 = 'Example'
    str_1 = 'Parse the numpy-style docstring into its components.\n\n        :returns: parsed docstring\n        '
    list_0 = [str_1, str_0]
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    list_1 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(none_type_0, none_type_0, none_type_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args is None
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None
    parse_error_0 = module_0.ParseError()
    none_type_1 = None
    docstring_param_0 = module_0.DocstringParam(str_0, str_0, str_0, str_0, list_1, none_type_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == 'Example'
    assert docstring_param_0.description == 'Example'
    assert docstring_param_0.arg_name == 'Example'
    assert docstring_param_0.type_name == 'Example'
    assert docstring_param_0.is_optional == ['Example', 'Example', 'Example', 'Example']
    assert docstring_param_0.default is None
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_raises_0 = module_0.DocstringRaises(list_1, list_1, str_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == ['Example', 'Example', 'Example', 'Example']
    assert docstring_raises_0.description == ['Example', 'Example', 'Example', 'Example']
    assert docstring_raises_0.type_name == 'Example'
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(list_1, docstring_0, none_type_1, bool_0, none_type_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['Example', 'Example', 'Example', 'Example']
    assert f'{type(docstring_returns_0.description).__module__}.{type(docstring_returns_0.description).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name is None
    docstring_raises_1 = module_0.DocstringRaises(docstring_raises_0, str_0, docstring_raises_0)
    assert f'{type(docstring_raises_1.args).__module__}.{type(docstring_raises_1.args).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    docstring_meta_1 = module_0.DocstringMeta(list_1, docstring_raises_1)
    bool_1 = True
    docstring_returns_1 = module_0.DocstringReturns(list_1, str_0, none_type_0, bool_1)
    assert docstring_returns_1.args == ['Example', 'Example', 'Example', 'Example']
    assert docstring_returns_1.description == 'Example'

def test_case_41():
    none_type_0 = None
    str_0 = ''
    str_1 = '15uk'
    list_0 = [str_0, str_0, str_1]
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_1, str_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == ['', '', '15uk']
    assert docstring_raises_0.description == '15uk'
    assert docstring_raises_0.type_name == '15uk'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_2 = 'References'
    list_1 = [str_2, str_2]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_1, none_type_0, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['References', 'References']
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    docstring_example_0 = module_0.DocstringExample(list_1, none_type_0, none_type_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['References', 'References']
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None
    docstring_raises_1 = module_0.DocstringRaises(none_type_0, none_type_0, none_type_0)
    assert docstring_raises_1.args is None
    docstring_0 = module_0.Docstring(none_type_0)
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    parse_error_0 = module_0.ParseError()
    parse_error_1 = module_0.ParseError()

def test_case_42():
    runtime_error_0 = module_2.RuntimeError()
    dict_0 = {runtime_error_0: runtime_error_0, runtime_error_0: runtime_error_0}
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(dict_0, none_type_0, none_type_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert f'{type(docstring_raises_0.args).__module__}.{type(docstring_raises_0.args).__qualname__}' == 'builtins.dict'
    assert len(docstring_raises_0.args) == 1
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_style_0 = module_0.DocstringStyle.EPYDOC
    str_0 = 'v~Fw#,Dad`V*RoH'
    str_1 = 'Raise'
    none_type_1 = None
    docstring_meta_0 = module_0.DocstringMeta(none_type_1, str_0)
    str_2 = 'tkXcr3rnPOD6Jvf@md4'
    str_3 = '2'
    str_4 = '?'
    list_0 = [str_1, str_2, str_3, str_4]
    docstring_example_0 = module_0.DocstringExample(list_0, docstring_style_0, str_4)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['Raise', 'tkXcr3rnPOD6Jvf@md4', '2', '?']
    assert docstring_example_0.description == '?'
    assert docstring_example_0.snippet == module_0.DocstringStyle.EPYDOC
    list_1 = [str_0, str_1, str_2]
    bool_0 = True
    docstring_deprecated_0 = module_0.DocstringDeprecated(docstring_style_0, str_2, bool_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == module_0.DocstringStyle.EPYDOC
    assert docstring_deprecated_0.description == 'tkXcr3rnPOD6Jvf@md4'
    assert docstring_deprecated_0.version is True
    none_type_2 = None
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_1, none_type_2, str_2)
    assert docstring_deprecated_1.args == ['v~Fw#,Dad`V*RoH', 'Raise', 'tkXcr3rnPOD6Jvf@md4']

def test_case_43():
    pass

@pytest.mark.xfail(strict=True)
def test_case_44():
    rendering_style_0 = module_0.RenderingStyle.CLEAN
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    docstring_style_0 = module_0.DocstringStyle.EPYDOC
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(rendering_style_0, docstring_style_0, none_type_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == module_0.RenderingStyle.CLEAN
    assert docstring_raises_0.description == module_0.DocstringStyle.EPYDOC
    assert docstring_raises_0.type_name is None
    docstring_1 = module_0.Docstring()
    str_0 = '5m5p\\Qn$dZ)H'
    str_1 = "du>A\r\nh\x0bF4<m'g{OjOf"
    list_0 = [str_0, str_1]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, rendering_style_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['5m5p\\Qn$dZ)H', "du>A\r\nh\x0bF4<m'g{OjOf"]
    assert docstring_deprecated_0.description == '5m5p\\Qn$dZ)H'
    assert docstring_deprecated_0.version == module_0.RenderingStyle.CLEAN
    str_2 = 'nG+KQW1^!#80~#i[Id'
    list_1 = [str_2]
    module_1.unique(list_1)

@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = 'raise'
    str_1 = '~R5!'
    list_0 = [str_0, str_0, str_1, str_0]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(list_0, str_0, str_0, str_1, none_type_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['raise', 'raise', '~R5!', 'raise']
    assert docstring_param_0.description == 'raise'
    assert docstring_param_0.arg_name == 'raise'
    assert docstring_param_0.type_name == '~R5!'
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    str_2 = '\\i:%ze@H/Boe9xW 5b'
    str_3 = ''
    str_4 = ''
    list_1 = [str_2, str_3, str_3, str_4]
    docstring_returns_0 = module_0.DocstringReturns(list_1, str_3, str_4, str_2)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['\\i:%ze@H/Boe9xW 5b', '', '', '']
    assert docstring_returns_0.description == ''
    assert docstring_returns_0.type_name == ''
    assert docstring_returns_0.is_generator == '\\i:%ze@H/Boe9xW 5b'
    assert docstring_returns_0.return_name is None
    bool_0 = False
    docstring_param_1 = module_0.DocstringParam(bool_0, list_1, str_2, str_3, bool_0, str_3)
    assert docstring_param_1.args is False
    assert docstring_param_1.description == ['\\i:%ze@H/Boe9xW 5b', '', '', '']
    docstring_raises_0 = module_0.DocstringRaises(list_1, bool_0, list_1)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == ['\\i:%ze@H/Boe9xW 5b', '', '', '']
    assert docstring_raises_0.description is False
    assert docstring_raises_0.type_name == ['\\i:%ze@H/Boe9xW 5b', '', '', '']
    parse_error_0 = module_0.ParseError()
    docstring_example_0 = module_0.DocstringExample(list_1, docstring_raises_0, bool_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == ['\\i:%ze@H/Boe9xW 5b', '', '', '']
    assert docstring_example_0.description is False
    assert f'{type(docstring_example_0.snippet).__module__}.{type(docstring_example_0.snippet).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    none_type_1 = None
    str_5 = '%*D)g{'
    docstring_example_1 = module_0.DocstringExample(list_1, none_type_1, str_4)
    assert docstring_example_1.args == ['\\i:%ze@H/Boe9xW 5b', '', '', '']
    str_6 = 'j+/*afk"uVyTfD'
    str_7 = ':K,=\'9\'"JoqaQ%8V\\y'
    docstring_0 = module_0.Docstring(none_type_1)
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    list_2 = [str_5, str_6, str_7, str_5]
    docstring_example_2 = module_0.DocstringExample(list_2, docstring_returns_0, none_type_1)
    assert docstring_example_2.args == ['%*D)g{', 'j+/*afk"uVyTfD', ':K,=\'9\'"JoqaQ%8V\\y', '%*D)g{']
    docstring_raises_1 = module_0.DocstringRaises(list_2, str_5, none_type_1)
    assert docstring_raises_1.args == ['%*D)g{', 'j+/*afk"uVyTfD', ':K,=\'9\'"JoqaQ%8V\\y', '%*D)g{']
    bool_1 = False
    docstring_1 = module_0.Docstring()
    docstring_returns_1 = module_0.DocstringReturns(list_2, str_2, none_type_1, bool_1, none_type_1)
    assert docstring_returns_1.args == ['%*D)g{', 'j+/*afk"uVyTfD', ':K,=\'9\'"JoqaQ%8V\\y', '%*D)g{']
    assert docstring_returns_1.description == '\\i:%ze@H/Boe9xW 5b'
    docstring_2 = module_0.Docstring(none_type_1)
    module_1.unique(none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_46():
    none_type_0 = None
    none_type_1 = None
    list_0 = [none_type_1, none_type_1, none_type_1]
    str_0 = 'y(Hxe]FM\npZ'
    list_1 = [str_0]
    docstring_meta_0 = module_0.DocstringMeta(str_0, none_type_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_param_0 = module_0.DocstringParam(list_1, str_0, str_0, none_type_0, str_0, none_type_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['y(Hxe]FM\npZ']
    assert docstring_param_0.description == 'y(Hxe]FM\npZ'
    assert docstring_param_0.arg_name == 'y(Hxe]FM\npZ'
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional == 'y(Hxe]FM\npZ'
    assert docstring_param_0.default is None
    module_1.EnumMeta(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(list_0, none_type_0, none_type_0)
    assert f'{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}' == 'docstring_parser.common.DocstringExample'
    assert docstring_example_0.args == [True, True]
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None
    str_0 = ',JG2gM7j<\x0b+y1J:o62nY'
    list_1 = [docstring_example_0, list_0, none_type_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_1, bool_0, none_type_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    assert f'{type(docstring_deprecated_0.args).__module__}.{type(docstring_deprecated_0.args).__qualname__}' == 'builtins.list'
    assert len(docstring_deprecated_0.args) == 3
    assert docstring_deprecated_0.description is True
    assert docstring_deprecated_0.version is None
    str_1 = '!M!Ye&:g@E>*H'
    dict_0 = {str_0: list_1, str_1: docstring_example_0}
    str_2 = '53VWS0y)ulMP(=~g.<\\'
    str_3 = 'except'
    list_2 = [str_2, str_2, str_1, str_3]
    parse_error_0 = module_0.ParseError(*list_2)
    bytes_0 = b'\x97\xaf\x01P\xc0\x95\xcc\xac|\xda3\x81\x1d\xe7\xc1\x9b\xdd'
    tuple_0 = (bool_0, docstring_0, bytes_0)
    tuple_1 = (parse_error_0, list_0, tuple_0)
    docstring_returns_0 = module_0.DocstringReturns(list_2, tuple_1, docstring_0, str_3, docstring_deprecated_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args == ['53VWS0y)ulMP(=~g.<\\', '53VWS0y)ulMP(=~g.<\\', '!M!Ye&:g@E>*H', 'except']
    assert f'{type(docstring_returns_0.description).__module__}.{type(docstring_returns_0.description).__qualname__}' == 'builtins.tuple'
    assert len(docstring_returns_0.description) == 3
    assert f'{type(docstring_returns_0.type_name).__module__}.{type(docstring_returns_0.type_name).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_returns_0.is_generator == 'except'
    assert f'{type(docstring_returns_0.return_name).__module__}.{type(docstring_returns_0.return_name).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    docstring_param_0 = module_0.DocstringParam(str_0, none_type_0, str_1, str_1, str_0, docstring_deprecated_0)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ',JG2gM7j<\x0b+y1J:o62nY'
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == '!M!Ye&:g@E>*H'
    assert docstring_param_0.type_name == '!M!Ye&:g@E>*H'
    assert docstring_param_0.is_optional == ',JG2gM7j<\x0b+y1J:o62nY'
    assert f'{type(docstring_param_0.default).__module__}.{type(docstring_param_0.default).__qualname__}' == 'docstring_parser.common.DocstringDeprecated'
    module_1.EnumMeta(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    assert f'{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}' == 'builtins.property'
    str_0 = "'\rk39HQiRW0:"
    str_1 = '?<Mm%9<&+}Wo~'
    str_2 = '2>2RFd:ar<|\x0c@7'
    str_3 = 'Build docstring element.\n\n        :param text: docstring element text\n        :param title: title of section containing element\n        :return:\n        '
    list_0 = [str_0, str_1, str_2, str_3]
    module_1.unique(list_0)

def test_case_49():
    list_0 = []
    str_0 = 'SkpbVQ{/#J#fKDNL!'
    dict_0 = {}
    parse_error_0 = module_0.ParseError(**dict_0)
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.DEPRECATION_KEYWORDS == {'deprecation', 'deprecated'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert module_0.EXAMPLES_KEYWORDS == {'examples', 'example'}
    docstring_raises_0 = module_0.DocstringRaises(list_0, list_0, str_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description == []
    assert docstring_raises_0.type_name == 'SkpbVQ{/#J#fKDNL!'
    parse_error_1 = module_0.ParseError()