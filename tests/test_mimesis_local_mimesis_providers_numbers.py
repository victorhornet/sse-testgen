# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.numbers as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    numbers_0 = module_0.Numbers()
    none_type_0 = numbers_0.reseed()
    bool_0 = True
    list_0 = numbers_0.floats(precision=bool_0)
    list_1 = numbers_0.matrix(n=bool_0)
    decimal_0 = numbers_0.decimal_number()
    decimal_0.matrix(**none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1760
    numbers_0 = module_0.Numbers(int_0)
    list_0 = [numbers_0, numbers_0, numbers_0, int_0]
    dict_0 = {numbers_0: numbers_0, int_0: int_0}
    numbers_1 = module_0.Numbers()
    list_1 = numbers_1.floats()
    int_1 = numbers_1.integer_number()
    numbers_1.complexes(end_real=list_0, start_imag=dict_0)

def test_case_2():
    int_0 = 430
    numbers_0 = module_0.Numbers()
    list_0 = numbers_0.integers()
    numbers_1 = module_0.Numbers()
    list_1 = numbers_1.complexes(end_imag=int_0)
    complex_0 = numbers_1.complex_number(int_0)
    list_2 = numbers_1.decimals()
    numbers_2 = module_0.Numbers()
    none_type_0 = None
    float_0 = numbers_2.float_number(precision=none_type_0)
    list_3 = numbers_2.floats()
    bool_0 = True
    list_4 = numbers_1.decimals(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    int_0 = 315
    numbers_0 = module_0.Numbers()
    complex_0 = numbers_0.complex_number(int_0)
    numbers_1 = module_0.Numbers()
    list_0 = numbers_1.decimals(bool_0)
    numbers_1.integers(list_0, n=bool_0)

def test_case_4():
    numbers_0 = module_0.Numbers()
    decimal_0 = numbers_0.decimal_number()

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    numbers_0 = module_0.Numbers()
    numbers_0.matrix(n=bool_0, num_type=numbers_0)