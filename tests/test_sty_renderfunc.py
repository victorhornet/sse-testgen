# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import sty.renderfunc as module_0

def test_case_0():
    int_0 = 852
    str_0 = module_0.eightbit_fg(int_0)
    assert str_0 == '\x1b[38;5;852m'

def test_case_1():
    int_0 = -995
    str_0 = module_0.rgb_bg(int_0, int_0, int_0)
    assert str_0 == '\x1b[48;2;-995;-995;-995m'
    bool_0 = True
    str_1 = module_0.sgr(bool_0)
    assert str_1 == '\x1b[Truem'
    str_2 = module_0.eightbit_fg(bool_0)
    assert str_2 == '\x1b[38;5;Truem'

def test_case_2():
    none_type_0 = None
    str_0 = module_0.eightbit_bg(none_type_0)
    assert str_0 == '\x1b[48;5;Nonem'
    bool_0 = True
    str_1 = module_0.eightbit_bg(bool_0)
    assert str_1 == '\x1b[48;5;Truem'

def test_case_3():
    bool_0 = False
    str_0 = module_0.eightbit_fg(bool_0)
    assert str_0 == '\x1b[38;5;Falsem'
    bool_1 = True
    str_1 = module_0.rgb_fg(bool_1, bool_1, bool_1)
    assert str_1 == '\x1b[38;2;True;True;Truem'
    bool_2 = True
    str_2 = module_0.rgb_bg(str_1, bool_1, bool_2)
    assert str_2 == '\x1b[48;2;\x1b[38;2;True;True;Truem;True;Truem'
    str_3 = module_0.eightbit_bg(bool_1)
    assert str_3 == '\x1b[48;5;Truem'