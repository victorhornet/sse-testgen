# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import flutils.pathutils as module_0
import pwd as module_1

def test_case_0():
    str_0 = 'h5J(H?m\x0c^X'
    none_type_0 = module_0.chmod(str_0)

def test_case_1():
    str_0 = "\riPUX&iUr*O;X2\rc\\'"
    none_type_0 = module_0.chmod(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b''
    module_0.chmod(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b''
    module_0.chown(bytes_0)

def test_case_4():
    bytes_0 = b'_'
    none_type_0 = module_0.chown(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'K]!Q\x0bS&1U{+{bA}:p6'
    module_0.directory_present(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '|hp3\x0b56ij7}g_\r\nU\rh'
    module_0.directory_present(str_0, user=str_0, group=str_0)

def test_case_7():
    str_0 = 'IF.H'
    str_1 = module_0.exists_as(str_0)
    assert str_1 == ''

def test_case_8():
    str_0 = ''
    str_1 = module_0.exists_as(str_0)
    assert str_1 == 'directory'

def test_case_9():
    struct_group_0 = module_0.get_os_group()
    assert f'{type(struct_group_0).__module__}.{type(struct_group_0).__qualname__}' == 'grp.struct_group'
    assert len(struct_group_0) == 4

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'h5J(H?m\x0c^X'
    none_type_0 = None
    module_0.chown(str_0, none_type_0, str_0)

def test_case_11():
    struct_passwd_0 = module_0.get_os_user()
    assert f'{type(struct_passwd_0).__module__}.{type(struct_passwd_0).__qualname__}' == 'pwd.struct_passwd'
    assert len(struct_passwd_0) == 7

def test_case_12():
    int_0 = 2541
    with pytest.raises(OSError):
        module_0.get_os_user(int_0)

def test_case_13():
    str_0 = 'Dr*_v'
    none_type_0 = module_0.path_absent(str_0)
    none_type_1 = module_0.chmod(str_0, none_type_0)

def test_case_14():
    str_0 = 'Hr%G*'
    none_type_0 = module_0.chmod(str_0, include_parent=str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b''
    module_0.directory_present(bytes_0, bytes_0)

def test_case_16():
    str_0 = 'block device'
    with pytest.raises(OSError):
        module_0.get_os_user(str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    tuple_0 = ()
    module_0.get_os_user(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'IF.H'
    str_1 = module_0.exists_as(str_0)
    assert str_1 == ''
    module_0.chown(str_1, str_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = ''
    module_0.path_absent(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '4p'
    none_type_0 = None
    struct_group_0 = module_0.get_os_group()
    assert f'{type(struct_group_0).__module__}.{type(struct_group_0).__qualname__}' == 'grp.struct_group'
    assert len(struct_group_0) == 4
    none_type_1 = module_0.chmod(str_0, none_type_0)
    str_1 = module_0.exists_as(str_0)
    assert str_1 == ''
    module_0.chown(str_0, none_type_0, struct_group_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '/'
    module_0.directory_present(str_0, group=str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = -715
    module_0.get_os_group(int_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '/app/]/PM'
    module_0.directory_present(str_0, user=str_0, group=str_0)

def test_case_24():
    str_0 = '4p'
    none_type_0 = None
    struct_group_0 = module_0.get_os_group()
    assert f'{type(struct_group_0).__module__}.{type(struct_group_0).__qualname__}' == 'grp.struct_group'
    assert len(struct_group_0) == 4
    none_type_1 = module_0.chmod(str_0, none_type_0)
    path_0 = module_0.normalize_path(str_0)
    str_1 = module_0.exists_as(path_0)
    assert str_1 == ''
    none_type_2 = module_0.chown(str_0, include_parent=str_0)
    int_0 = 741
    none_type_3 = module_0.chmod(str_0, none_type_1)
    with pytest.raises(OSError):
        module_0.get_os_group(int_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    generator_0 = module_0.find_paths(none_type_0)
    str_0 = '4p'
    none_type_1 = module_0.path_absent(str_0)
    path_0 = module_0.normalize_path(str_0)
    str_1 = module_0.exists_as(str_0)
    assert str_1 == ''
    str_2 = '/'
    module_0.path_absent(str_2)

def test_case_26():
    str_0 = '-1'
    none_type_0 = module_0.chown(str_0, str_0)
    path_0 = module_0.normalize_path(str_0)
    str_1 = '\x0b,iDc$*|LTk(N\x0b))yx;'
    with pytest.raises(ValueError):
        module_0.directory_present(str_1)

def test_case_27():
    str_0 = 'Hr%G*'
    none_type_0 = module_0.chown(str_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = 'Dr*_v'
    generator_0 = module_0.find_paths(str_0)
    list_0 = [generator_0]
    dict_0 = {}
    module_1.struct_passwd(*list_0, **dict_0)

def test_case_29():
    str_0 = '-1'
    none_type_0 = module_0.chown(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = '-1'
    struct_passwd_0 = module_0.get_os_user()
    assert f'{type(struct_passwd_0).__module__}.{type(struct_passwd_0).__qualname__}' == 'pwd.struct_passwd'
    assert len(struct_passwd_0) == 7
    none_type_0 = module_0.path_absent(str_0)
    bool_0 = True
    none_type_1 = module_0.chown(str_0, str_0, str_0, bool_0)
    struct_passwd_1 = module_0.get_os_user()
    none_type_2 = module_0.chmod(str_0, str_0, bool_0)
    module_0.directory_present(none_type_1)