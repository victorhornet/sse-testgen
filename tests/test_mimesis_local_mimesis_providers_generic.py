# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.generic as module_0
import ast as module_1

def test_case_0():
    generic_0 = module_0.Generic()
    assert f'{type(generic_0).__module__}.{type(generic_0).__qualname__}' == 'mimesis_local.mimesis.providers.generic.Generic'
    assert generic_0.seed is None
    assert f'{type(generic_0.random).__module__}.{type(generic_0.random).__qualname__}' == 'mimesis.random.Random'
    assert generic_0.locale == 'en'
    assert f'{type(generic_0.transport).__module__}.{type(generic_0.transport).__qualname__}' == 'mimesis.providers.transport.Transport'
    assert f'{type(generic_0.code).__module__}.{type(generic_0.code).__qualname__}' == 'mimesis.providers.code.Code'
    assert f'{type(generic_0.unit_system).__module__}.{type(generic_0.unit_system).__qualname__}' == 'mimesis.providers.units.UnitSystem'
    assert f'{type(generic_0.file).__module__}.{type(generic_0.file).__qualname__}' == 'mimesis.providers.file.File'
    assert f'{type(generic_0.numbers).__module__}.{type(generic_0.numbers).__qualname__}' == 'mimesis.providers.numbers.Numbers'
    assert f'{type(generic_0.development).__module__}.{type(generic_0.development).__qualname__}' == 'mimesis.providers.development.Development'
    assert f'{type(generic_0.hardware).__module__}.{type(generic_0.hardware).__qualname__}' == 'mimesis.providers.hardware.Hardware'
    assert f'{type(generic_0.clothing).__module__}.{type(generic_0.clothing).__qualname__}' == 'mimesis.providers.clothing.Clothing'
    assert f'{type(generic_0.internet).__module__}.{type(generic_0.internet).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert f'{type(generic_0.path).__module__}.{type(generic_0.path).__qualname__}' == 'mimesis.providers.path.Path'
    assert f'{type(generic_0.payment).__module__}.{type(generic_0.payment).__qualname__}' == 'mimesis.providers.payment.Payment'
    assert f'{type(generic_0.cryptographic).__module__}.{type(generic_0.cryptographic).__qualname__}' == 'mimesis.providers.cryptographic.Cryptographic'
    assert f'{type(generic_0.structure).__module__}.{type(generic_0.structure).__qualname__}' == 'mimesis.providers.structure.Structure'
    none_type_0 = generic_0.add_providers()
    str_0 = generic_0.get_current_locale()
    list_0 = generic_0.__dir__()
    list_1 = generic_0.__dir__()
    type_0 = module_1.JoinedStr
    with pytest.raises(TypeError):
        generic_0.add_provider(type_0)

def test_case_1():
    generic_0 = module_0.Generic()
    assert f'{type(generic_0).__module__}.{type(generic_0).__qualname__}' == 'mimesis_local.mimesis.providers.generic.Generic'
    assert generic_0.seed is None
    assert f'{type(generic_0.random).__module__}.{type(generic_0.random).__qualname__}' == 'mimesis.random.Random'
    assert generic_0.locale == 'en'
    assert f'{type(generic_0.transport).__module__}.{type(generic_0.transport).__qualname__}' == 'mimesis.providers.transport.Transport'
    assert f'{type(generic_0.code).__module__}.{type(generic_0.code).__qualname__}' == 'mimesis.providers.code.Code'
    assert f'{type(generic_0.unit_system).__module__}.{type(generic_0.unit_system).__qualname__}' == 'mimesis.providers.units.UnitSystem'
    assert f'{type(generic_0.file).__module__}.{type(generic_0.file).__qualname__}' == 'mimesis.providers.file.File'
    assert f'{type(generic_0.numbers).__module__}.{type(generic_0.numbers).__qualname__}' == 'mimesis.providers.numbers.Numbers'
    assert f'{type(generic_0.development).__module__}.{type(generic_0.development).__qualname__}' == 'mimesis.providers.development.Development'
    assert f'{type(generic_0.hardware).__module__}.{type(generic_0.hardware).__qualname__}' == 'mimesis.providers.hardware.Hardware'
    assert f'{type(generic_0.clothing).__module__}.{type(generic_0.clothing).__qualname__}' == 'mimesis.providers.clothing.Clothing'
    assert f'{type(generic_0.internet).__module__}.{type(generic_0.internet).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert f'{type(generic_0.path).__module__}.{type(generic_0.path).__qualname__}' == 'mimesis.providers.path.Path'
    assert f'{type(generic_0.payment).__module__}.{type(generic_0.payment).__qualname__}' == 'mimesis.providers.payment.Payment'
    assert f'{type(generic_0.cryptographic).__module__}.{type(generic_0.cryptographic).__qualname__}' == 'mimesis.providers.cryptographic.Cryptographic'
    assert f'{type(generic_0.structure).__module__}.{type(generic_0.structure).__qualname__}' == 'mimesis.providers.structure.Structure'
    type_0 = module_1.RShift
    with pytest.raises(TypeError):
        generic_0.add_provider(type_0)

def test_case_2():
    generic_0 = module_0.Generic()
    assert f'{type(generic_0).__module__}.{type(generic_0).__qualname__}' == 'mimesis_local.mimesis.providers.generic.Generic'
    assert generic_0.seed is None
    assert f'{type(generic_0.random).__module__}.{type(generic_0.random).__qualname__}' == 'mimesis.random.Random'
    assert generic_0.locale == 'en'
    assert f'{type(generic_0.transport).__module__}.{type(generic_0.transport).__qualname__}' == 'mimesis.providers.transport.Transport'
    assert f'{type(generic_0.code).__module__}.{type(generic_0.code).__qualname__}' == 'mimesis.providers.code.Code'
    assert f'{type(generic_0.unit_system).__module__}.{type(generic_0.unit_system).__qualname__}' == 'mimesis.providers.units.UnitSystem'
    assert f'{type(generic_0.file).__module__}.{type(generic_0.file).__qualname__}' == 'mimesis.providers.file.File'
    assert f'{type(generic_0.numbers).__module__}.{type(generic_0.numbers).__qualname__}' == 'mimesis.providers.numbers.Numbers'
    assert f'{type(generic_0.development).__module__}.{type(generic_0.development).__qualname__}' == 'mimesis.providers.development.Development'
    assert f'{type(generic_0.hardware).__module__}.{type(generic_0.hardware).__qualname__}' == 'mimesis.providers.hardware.Hardware'
    assert f'{type(generic_0.clothing).__module__}.{type(generic_0.clothing).__qualname__}' == 'mimesis.providers.clothing.Clothing'
    assert f'{type(generic_0.internet).__module__}.{type(generic_0.internet).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert f'{type(generic_0.path).__module__}.{type(generic_0.path).__qualname__}' == 'mimesis.providers.path.Path'
    assert f'{type(generic_0.payment).__module__}.{type(generic_0.payment).__qualname__}' == 'mimesis.providers.payment.Payment'
    assert f'{type(generic_0.cryptographic).__module__}.{type(generic_0.cryptographic).__qualname__}' == 'mimesis.providers.cryptographic.Cryptographic'
    assert f'{type(generic_0.structure).__module__}.{type(generic_0.structure).__qualname__}' == 'mimesis.providers.structure.Structure'
    str_0 = generic_0.__str__()
    str_1 = generic_0.__str__()
    none_type_0 = None
    with pytest.raises(TypeError):
        generic_0.add_provider(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    generic_0 = module_0.Generic()
    assert f'{type(generic_0).__module__}.{type(generic_0).__qualname__}' == 'mimesis_local.mimesis.providers.generic.Generic'
    assert generic_0.seed is None
    assert f'{type(generic_0.random).__module__}.{type(generic_0.random).__qualname__}' == 'mimesis.random.Random'
    assert generic_0.locale == 'en'
    assert f'{type(generic_0.transport).__module__}.{type(generic_0.transport).__qualname__}' == 'mimesis.providers.transport.Transport'
    assert f'{type(generic_0.code).__module__}.{type(generic_0.code).__qualname__}' == 'mimesis.providers.code.Code'
    assert f'{type(generic_0.unit_system).__module__}.{type(generic_0.unit_system).__qualname__}' == 'mimesis.providers.units.UnitSystem'
    assert f'{type(generic_0.file).__module__}.{type(generic_0.file).__qualname__}' == 'mimesis.providers.file.File'
    assert f'{type(generic_0.numbers).__module__}.{type(generic_0.numbers).__qualname__}' == 'mimesis.providers.numbers.Numbers'
    assert f'{type(generic_0.development).__module__}.{type(generic_0.development).__qualname__}' == 'mimesis.providers.development.Development'
    assert f'{type(generic_0.hardware).__module__}.{type(generic_0.hardware).__qualname__}' == 'mimesis.providers.hardware.Hardware'
    assert f'{type(generic_0.clothing).__module__}.{type(generic_0.clothing).__qualname__}' == 'mimesis.providers.clothing.Clothing'
    assert f'{type(generic_0.internet).__module__}.{type(generic_0.internet).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert f'{type(generic_0.path).__module__}.{type(generic_0.path).__qualname__}' == 'mimesis.providers.path.Path'
    assert f'{type(generic_0.payment).__module__}.{type(generic_0.payment).__qualname__}' == 'mimesis.providers.payment.Payment'
    assert f'{type(generic_0.cryptographic).__module__}.{type(generic_0.cryptographic).__qualname__}' == 'mimesis.providers.cryptographic.Cryptographic'
    assert f'{type(generic_0.structure).__module__}.{type(generic_0.structure).__qualname__}' == 'mimesis.providers.structure.Structure'
    list_0 = [generic_0, generic_0, generic_0]
    generic_0.add_providers(*list_0)

def test_case_4():
    generic_0 = module_0.Generic()
    assert f'{type(generic_0).__module__}.{type(generic_0).__qualname__}' == 'mimesis_local.mimesis.providers.generic.Generic'
    assert generic_0.seed is None
    assert f'{type(generic_0.random).__module__}.{type(generic_0.random).__qualname__}' == 'mimesis.random.Random'
    assert generic_0.locale == 'en'
    assert f'{type(generic_0.transport).__module__}.{type(generic_0.transport).__qualname__}' == 'mimesis.providers.transport.Transport'
    assert f'{type(generic_0.code).__module__}.{type(generic_0.code).__qualname__}' == 'mimesis.providers.code.Code'
    assert f'{type(generic_0.unit_system).__module__}.{type(generic_0.unit_system).__qualname__}' == 'mimesis.providers.units.UnitSystem'
    assert f'{type(generic_0.file).__module__}.{type(generic_0.file).__qualname__}' == 'mimesis.providers.file.File'
    assert f'{type(generic_0.numbers).__module__}.{type(generic_0.numbers).__qualname__}' == 'mimesis.providers.numbers.Numbers'
    assert f'{type(generic_0.development).__module__}.{type(generic_0.development).__qualname__}' == 'mimesis.providers.development.Development'
    assert f'{type(generic_0.hardware).__module__}.{type(generic_0.hardware).__qualname__}' == 'mimesis.providers.hardware.Hardware'
    assert f'{type(generic_0.clothing).__module__}.{type(generic_0.clothing).__qualname__}' == 'mimesis.providers.clothing.Clothing'
    assert f'{type(generic_0.internet).__module__}.{type(generic_0.internet).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert f'{type(generic_0.path).__module__}.{type(generic_0.path).__qualname__}' == 'mimesis.providers.path.Path'
    assert f'{type(generic_0.payment).__module__}.{type(generic_0.payment).__qualname__}' == 'mimesis.providers.payment.Payment'
    assert f'{type(generic_0.cryptographic).__module__}.{type(generic_0.cryptographic).__qualname__}' == 'mimesis.providers.cryptographic.Cryptographic'
    assert f'{type(generic_0.structure).__module__}.{type(generic_0.structure).__qualname__}' == 'mimesis.providers.structure.Structure'
    none_type_0 = generic_0.add_providers()
    with pytest.raises(TypeError):
        module_1.get_docstring(none_type_0, generic_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    generic_0 = module_0.Generic()
    assert f'{type(generic_0).__module__}.{type(generic_0).__qualname__}' == 'mimesis_local.mimesis.providers.generic.Generic'
    assert generic_0.seed is None
    assert f'{type(generic_0.random).__module__}.{type(generic_0.random).__qualname__}' == 'mimesis.random.Random'
    assert generic_0.locale == 'en'
    assert f'{type(generic_0.transport).__module__}.{type(generic_0.transport).__qualname__}' == 'mimesis.providers.transport.Transport'
    assert f'{type(generic_0.code).__module__}.{type(generic_0.code).__qualname__}' == 'mimesis.providers.code.Code'
    assert f'{type(generic_0.unit_system).__module__}.{type(generic_0.unit_system).__qualname__}' == 'mimesis.providers.units.UnitSystem'
    assert f'{type(generic_0.file).__module__}.{type(generic_0.file).__qualname__}' == 'mimesis.providers.file.File'
    assert f'{type(generic_0.numbers).__module__}.{type(generic_0.numbers).__qualname__}' == 'mimesis.providers.numbers.Numbers'
    assert f'{type(generic_0.development).__module__}.{type(generic_0.development).__qualname__}' == 'mimesis.providers.development.Development'
    assert f'{type(generic_0.hardware).__module__}.{type(generic_0.hardware).__qualname__}' == 'mimesis.providers.hardware.Hardware'
    assert f'{type(generic_0.clothing).__module__}.{type(generic_0.clothing).__qualname__}' == 'mimesis.providers.clothing.Clothing'
    assert f'{type(generic_0.internet).__module__}.{type(generic_0.internet).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert f'{type(generic_0.path).__module__}.{type(generic_0.path).__qualname__}' == 'mimesis.providers.path.Path'
    assert f'{type(generic_0.payment).__module__}.{type(generic_0.payment).__qualname__}' == 'mimesis.providers.payment.Payment'
    assert f'{type(generic_0.cryptographic).__module__}.{type(generic_0.cryptographic).__qualname__}' == 'mimesis.providers.cryptographic.Cryptographic'
    assert f'{type(generic_0.structure).__module__}.{type(generic_0.structure).__qualname__}' == 'mimesis.providers.structure.Structure'
    str_0 = generic_0.__str__()
    generic_0.__getattr__(generic_0)