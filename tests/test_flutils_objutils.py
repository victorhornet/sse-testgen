# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import flutils.objutils as module_0

def test_case_0():
    str_0 = '6{pki35?[Xy*H;'
    bool_0 = module_0.has_any_callables(str_0, *str_0)
    assert bool_0 is False
    bool_1 = module_0.is_subclass_of_any(bool_0)

def test_case_1():
    str_0 = 'G'
    bool_0 = module_0.has_any_attrs(str_0)

def test_case_2():
    bool_0 = True
    str_0 = 'gob*h0G/6CO(~B5#_,B'
    bool_1 = module_0.has_callables(bool_0, *str_0)
    assert bool_1 is False

def test_case_3():
    bytes_0 = b'Y\x0c*\x91\\'
    bool_0 = module_0.has_callables(bytes_0)
    assert bool_0 is True

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    bool_0 = module_0.has_attrs(none_type_0)
    bytes_0 = b'm\xf8O\xe8'
    list_0 = [bytes_0]
    bool_1 = module_0.has_attrs(bytes_0)
    bool_2 = module_0.is_list_like(list_0)
    assert bool_2 is True
    module_0.has_any_callables(bool_2, *list_0)

def test_case_5():
    none_type_0 = None
    bool_0 = module_0.is_list_like(none_type_0)
    assert bool_0 is False
    bool_1 = module_0.has_callables(none_type_0)
    assert bool_1 is True
    bool_2 = module_0.has_callables(bool_1)
    assert bool_2 is True

def test_case_6():
    bytes_0 = b'\x1d\xb5\xea"S\xab\xbfv'
    dict_0 = {bytes_0: bytes_0}
    bool_0 = module_0.is_subclass_of_any(dict_0)

def test_case_7():
    str_0 = '__class__'
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = module_0.has_callables(str_0, *list_0)
    assert bool_0 is True

def test_case_8():
    str_0 = '__class__'
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = module_0.has_any_callables(list_0, *list_0)
    assert bool_0 is True

def test_case_9():
    none_type_0 = None
    bool_0 = module_0.is_list_like(none_type_0)
    assert bool_0 is False
    bool_1 = module_0.is_subclass_of_any(none_type_0)
    bool_2 = module_0.is_list_like(none_type_0)
    assert bool_2 is False
    bool_3 = module_0.is_list_like(bool_2)
    assert bool_3 is False
    bool_4 = module_0.has_callables(bool_3)
    assert bool_4 is True
    bool_5 = module_0.has_callables(none_type_0)
    assert bool_5 is True
    bool_6 = module_0.is_list_like(bool_2)
    assert bool_6 is False
    str_0 = '__doc__'
    list_0 = [str_0]
    bool_7 = module_0.has_any_callables(none_type_0, *list_0)
    assert bool_7 is False
    bool_8 = module_0.is_list_like(str_0)
    assert bool_8 is False
    bool_9 = module_0.has_callables(bool_3)
    assert bool_9 is True
    bool_10 = module_0.is_list_like(bool_1)
    assert bool_10 is False

def test_case_10():
    none_type_0 = None
    bool_0 = module_0.is_list_like(none_type_0)
    assert bool_0 is False
    bool_1 = module_0.is_subclass_of_any(none_type_0)
    bool_2 = module_0.is_list_like(none_type_0)
    assert bool_2 is False
    bool_3 = module_0.is_list_like(bool_2)
    assert bool_3 is False
    bool_4 = module_0.has_callables(bool_3)
    assert bool_4 is True
    bool_5 = module_0.has_callables(none_type_0)
    assert bool_5 is True
    bool_6 = module_0.has_attrs(bool_2)
    bool_7 = module_0.is_list_like(bool_2)
    assert bool_7 is False
    str_0 = '__doc__'
    list_0 = [str_0]
    bool_8 = module_0.has_any_callables(none_type_0, *list_0)
    assert bool_8 is False
    bool_9 = module_0.is_list_like(str_0)
    assert bool_9 is False
    bool_10 = module_0.has_callables(bool_5, *list_0)
    assert bool_10 is False
    bool_11 = module_0.has_callables(bool_3)
    assert bool_11 is True
    bool_12 = module_0.is_list_like(bool_1)
    assert bool_12 is False