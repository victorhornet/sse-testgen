# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis.providers.internet as module_0
import urllib.error as module_1
import mimesis.exceptions as module_2
import email.encoders as module_3
import calendar as module_4
import email as module_5

def test_case_0():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.content_type()
    i_pv4_address_0 = internet_0.ip_v4_object()
    var_0 = i_pv4_address_0.__reduce__()
    str_1 = internet_0.emoji()
    str_2 = internet_0.mac_address()
    str_3 = internet_0.user_agent()
    str_4 = internet_0.emoji()
    str_5 = internet_0.mac_address()
    var_1 = i_pv4_address_0.__repr__()
    str_6 = internet_0.http_method()
    str_7 = internet_0.__str__()
    var_2 = var_1.__dir__()
    str_8 = internet_0.user_agent()
    none_type_0 = None
    var_3 = i_pv4_address_0.__str__()
    bool_0 = False
    with pytest.raises(module_1.URLError):
        internet_0.stock_image(none_type_0, writable=bool_0)

def test_case_1():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    with pytest.raises(module_2.NonEnumerableError):
        internet_0.port(internet_0)

def test_case_2():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'

def test_case_3():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.user_agent()
    str_1 = internet_0.content_type()
    none_type_0 = internet_0.reseed(str_1)
    str_2 = internet_0.top_level_domain()
    int_0 = internet_0.http_status_code()
    i_pv4_address_0 = internet_0.ip_v4_object()
    assert f'{type(i_pv4_address_0).__module__}.{type(i_pv4_address_0).__qualname__}' == 'ipaddress.IPv4Address'

@pytest.mark.xfail(strict=True)
def test_case_4():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.ip_v4()
    str_1 = internet_0.http_method()
    assert str_1 == 'GET'
    none_type_0 = None
    module_3.encode_7or8bit(none_type_0)

def test_case_5():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    i_pv6_address_0 = internet_0.ip_v6_object()
    assert f'{type(i_pv6_address_0).__module__}.{type(i_pv6_address_0).__qualname__}' == 'ipaddress.IPv6Address'
    str_0 = internet_0.user_agent()
    str_1 = internet_0.content_type()
    none_type_0 = internet_0.reseed(str_1)
    str_2 = internet_0.top_level_domain()
    bool_0 = True
    var_0 = internet_0.hashtags(bool_0)
    str_3 = internet_0.network_protocol()
    str_4 = internet_0.ip_v4()
    i_pv6_address_1 = internet_0.ip_v6_object()

def test_case_6():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.content_type()
    i_pv4_address_0 = internet_0.ip_v4_object()
    var_0 = i_pv4_address_0.__reduce__()
    str_1 = internet_0.ip_v6()
    str_2 = internet_0.emoji()
    str_3 = internet_0.mac_address()
    str_4 = internet_0.user_agent()
    assert str_4 == 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.24'
    str_5 = internet_0.emoji()
    str_6 = internet_0.mac_address()
    var_1 = i_pv4_address_0.__repr__()
    str_7 = internet_0.http_method()
    assert str_7 == 'PUT'
    str_8 = internet_0.__str__()
    var_2 = var_1.__dir__()
    str_9 = internet_0.user_agent()
    none_type_0 = None
    var_3 = i_pv4_address_0.__str__()
    bool_0 = True
    with pytest.raises(module_1.URLError):
        internet_0.stock_image(none_type_0, writable=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.ip_v4()
    str_1 = internet_0.http_method()
    assert str_1 == 'DELETE'
    str_2 = internet_0.mac_address()
    none_type_0 = None
    module_3.encode_7or8bit(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    internet_0.home_page(internet_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.user_agent()
    str_1 = internet_0.content_type()
    none_type_0 = internet_0.reseed(str_1)
    str_2 = internet_0.top_level_domain()
    bool_0 = True
    var_0 = internet_0.hashtags(bool_0)
    none_type_0.readlines()

@pytest.mark.xfail(strict=True)
def test_case_10():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.user_agent()
    str_1 = internet_0.content_type()
    none_type_0 = internet_0.reseed(str_1)
    str_2 = internet_0.top_level_domain()
    var_0 = internet_0.hashtags()
    module_4.leapdays(internet_0, str_2)

def test_case_11():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.http_status_message()
    str_1 = internet_0.user_agent()
    str_2 = internet_0.content_type()
    none_type_0 = internet_0.reseed(str_2)
    str_3 = module_3.encode_noop(internet_0)
    int_0 = internet_0.http_status_code()
    i_pv4_address_0 = internet_0.ip_v4_object()
    assert f'{type(i_pv4_address_0).__module__}.{type(i_pv4_address_0).__qualname__}' == 'ipaddress.IPv4Address'

@pytest.mark.xfail(strict=True)
def test_case_12():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.content_type()
    i_pv4_address_0 = internet_0.ip_v4_object()
    str_1 = internet_0.ip_v6()
    str_2 = internet_0.emoji()
    str_3 = internet_0.mac_address()
    str_4 = internet_0.user_agent()
    str_5 = internet_0.emoji()
    str_6 = internet_0.mac_address()
    str_7 = internet_0.user_agent()
    str_8 = internet_0.emoji()
    str_9 = internet_0.mac_address()
    var_0 = i_pv4_address_0.__repr__()
    str_10 = internet_0.http_method()
    assert str_10 == 'CONNECT'
    str_11 = internet_0.__str__()
    var_1 = var_0.__dir__()
    str_12 = internet_0.user_agent()
    none_type_0 = None
    var_2 = i_pv4_address_0.__str__()
    bool_0 = False
    internet_0.stock_image(none_type_0, keywords=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    bool_0 = True
    str_0 = internet_0.image_placeholder(height=bool_0)
    assert str_0 == 'http://placehold.it/1920xTrue'
    str_1 = internet_0.user_agent()
    str_2 = internet_0.content_type()
    none_type_0 = internet_0.reseed()
    str_3 = internet_0.top_level_domain()
    bool_1 = True
    var_0 = internet_0.hashtags(bool_1)
    str_4 = 't'
    str_5 = 'N'
    str_6 = 'panga'
    str_7 = '\nC'
    dict_0 = {str_4: internet_0, str_5: str_6, str_7: internet_0}
    module_5.message_from_bytes(bool_1, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.content_type()
    i_pv4_address_0 = internet_0.ip_v4_object()
    str_1 = internet_0.ip_v4(str_0)
    none_type_0 = None
    str_2 = internet_0.http_method()
    module_3.encode_7or8bit(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    internet_0 = module_0.Internet()
    assert f'{type(internet_0).__module__}.{type(internet_0).__qualname__}' == 'mimesis.providers.internet.Internet'
    assert internet_0.seed is None
    assert f'{type(internet_0.random).__module__}.{type(internet_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = internet_0.content_type()
    i_pv4_address_0 = internet_0.ip_v4_object()
    assert f'{type(i_pv4_address_0).__module__}.{type(i_pv4_address_0).__qualname__}' == 'ipaddress.IPv4Address'
    str_1 = internet_0.ip_v6()
    str_2 = internet_0.emoji()
    str_3 = internet_0.mac_address()
    str_4 = internet_0.user_agent()
    str_5 = internet_0.emoji()
    str_6 = internet_0.mac_address()
    var_0 = i_pv4_address_0.__repr__()
    str_7 = internet_0.http_method()
    str_8 = internet_0.__str__()
    var_1 = var_0.__dir__()
    str_9 = internet_0.user_agent()
    var_2 = i_pv4_address_0.__str__()
    bool_0 = False
    internet_0.stock_image(var_1, writable=bool_0)