# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import flutils_local.flutils.pathutils as module_0

def test_case_0():
    str_0 = '*TOvk| ?NMsxa'
    str_1 = module_0.exists_as(str_0)
    assert str_1 == ''
    struct_group_0 = module_0.get_os_group()
    assert f'{type(struct_group_0).__module__}.{type(struct_group_0).__qualname__}' == 'grp.struct_group'
    assert len(struct_group_0) == 4
    none_type_0 = module_0.path_absent(str_0)
    struct_group_1 = module_0.get_os_group()
    struct_passwd_0 = module_0.get_os_user()
    none_type_1 = module_0.chmod(str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 144.2
    str_0 = 'h5J(H?m\x0c^X'
    none_type_0 = None
    bool_0 = False
    none_type_1 = module_0.chmod(str_0, float_0, none_type_0, bool_0)
    module_0.chown(float_0, include_parent=float_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '<ruZ \x0bG MqPn0K'
    int_0 = 3516
    bool_0 = True
    none_type_0 = module_0.chmod(str_0, mode_dir=int_0, include_parent=bool_0)
    none_type_1 = module_0.chown(str_0)
    generator_0 = module_0.find_paths(str_0)
    module_0.normalize_path(generator_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ',#D{tSky'
    generator_0 = module_0.find_paths(str_0)
    str_1 = module_0.exists_as(str_0)
    assert str_1 == ''
    none_type_0 = module_0.chown(str_0)
    generator_1 = module_0.find_paths(str_0)
    module_0.directory_present(str_0, user=generator_1)

def test_case_4():
    str_0 = '*TOvk| ?NMsxa'
    struct_group_0 = module_0.get_os_group()
    assert f'{type(struct_group_0).__module__}.{type(struct_group_0).__qualname__}' == 'grp.struct_group'
    assert len(struct_group_0) == 4
    struct_group_1 = module_0.get_os_group()
    struct_passwd_0 = module_0.get_os_user()
    str_1 = module_0.exists_as(str_0)
    assert str_1 == ''

@pytest.mark.xfail(strict=True)
def test_case_5():
    struct_group_0 = module_0.get_os_group()
    assert f'{type(struct_group_0).__module__}.{type(struct_group_0).__qualname__}' == 'grp.struct_group'
    assert len(struct_group_0) == 4
    none_type_0 = None
    module_0.directory_present(struct_group_0, none_type_0)

def test_case_6():
    str_0 = 'c-'
    with pytest.raises(OSError):
        module_0.get_os_group(str_0)

def test_case_7():
    struct_passwd_0 = module_0.get_os_user()
    assert f'{type(struct_passwd_0).__module__}.{type(struct_passwd_0).__qualname__}' == 'pwd.struct_passwd'
    assert len(struct_passwd_0) == 7

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\x96\xe63/\xabY'
    module_0.normalize_path(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -53
    str_0 = ',Y#JJ<'
    module_0.directory_present(str_0, int_0)

def test_case_10():
    str_0 = ',#D{tSky'
    generator_0 = module_0.find_paths(str_0)
    none_type_0 = module_0.chown(str_0)
    generator_1 = module_0.find_paths(none_type_0)
    generator_2 = module_0.find_paths(none_type_0)
    with pytest.raises(OSError):
        module_0.get_os_user(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "'obC\x0biYS2elj U!Y2V"
    module_0.chown(str_0, str_0)

def test_case_12():
    str_0 = '<ruZ \x0bG MqPn0K'
    str_1 = module_0.exists_as(str_0)
    assert str_1 == ''
    path_0 = module_0.normalize_path(str_0)
    int_0 = -4831
    with pytest.raises(OSError):
        module_0.get_os_user(int_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'."'
    path_0 = module_0.normalize_path(bytes_0)
    assert f'{type(path_0).__module__}.{type(path_0).__qualname__}' == 'pathlib.PosixPath'
    none_type_0 = module_0.path_absent(bytes_0)
    struct_passwd_0 = module_0.get_os_user(none_type_0)
    assert f'{type(struct_passwd_0).__module__}.{type(struct_passwd_0).__qualname__}' == 'pwd.struct_passwd'
    assert len(struct_passwd_0) == 7
    none_type_1 = module_0.chmod(bytes_0)
    str_0 = module_0.exists_as(bytes_0)
    assert str_0 == ''
    module_0.chown(str_0, none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'."'
    path_0 = module_0.normalize_path(bytes_0)
    assert f'{type(path_0).__module__}.{type(path_0).__qualname__}' == 'pathlib.PosixPath'
    none_type_0 = module_0.chmod(bytes_0)
    none_type_1 = module_0.path_absent(bytes_0)
    none_type_2 = None
    none_type_3 = module_0.chmod(bytes_0, none_type_2)
    none_type_4 = module_0.path_absent(bytes_0)
    struct_group_0 = module_0.get_os_group()
    assert f'{type(struct_group_0).__module__}.{type(struct_group_0).__qualname__}' == 'grp.struct_group'
    assert len(struct_group_0) == 4
    struct_group_1 = module_0.get_os_group()
    struct_passwd_0 = module_0.get_os_user()
    module_0.chown(bytes_0, struct_passwd_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '?{BYB\n,\\i+'
    generator_0 = module_0.find_paths(str_0)
    path_0 = module_0.normalize_path(str_0)
    int_0 = 1
    path_1 = module_0.normalize_path(str_0)
    str_1 = module_0.exists_as(path_0)
    assert str_1 == ''
    none_type_0 = None
    none_type_1 = module_0.chmod(path_0, mode_dir=none_type_0, include_parent=int_0)
    module_0.path_absent(str_1)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = ',#D{tSky'
    generator_0 = module_0.find_paths(str_0)
    path_0 = module_0.normalize_path(str_0)
    path_1 = module_0.normalize_path(str_0)
    path_2 = module_0.normalize_path(str_0)
    str_1 = module_0.exists_as(path_2)
    assert str_1 == ''
    module_0.chmod(str_1, str_0)