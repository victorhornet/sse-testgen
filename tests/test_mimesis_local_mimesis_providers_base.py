# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.base as module_0
import json.decoder as module_1
import json.encoder as module_2

def test_case_0():
    str_0 = ''
    base_data_provider_0 = module_0.BaseDataProvider(str_0, str_0)
    assert f'{type(base_data_provider_0).__module__}.{type(base_data_provider_0).__qualname__}' == 'mimesis_local.mimesis.providers.base.BaseDataProvider'
    assert base_data_provider_0.seed == ''
    assert f'{type(base_data_provider_0.random).__module__}.{type(base_data_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert base_data_provider_0.locale == 'en'
    bool_0 = False
    module_1.JSONArray(bool_0, bool_0)

def test_case_1():
    base_provider_0 = module_0.BaseProvider()

def test_case_2():
    base_provider_0 = module_0.BaseProvider()
    base_data_provider_0 = module_0.BaseDataProvider()
    assert f'{type(base_data_provider_0).__module__}.{type(base_data_provider_0).__qualname__}' == 'mimesis_local.mimesis.providers.base.BaseDataProvider'
    assert base_data_provider_0.seed is None
    assert f'{type(base_data_provider_0.random).__module__}.{type(base_data_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert base_data_provider_0.locale == 'en'
    none_type_0 = base_data_provider_0.reseed()
    str_0 = base_data_provider_0.get_current_locale()
    assert str_0 == 'en'

def test_case_3():
    none_type_0 = None
    base_data_provider_0 = module_0.BaseDataProvider(seed=none_type_0)
    assert f'{type(base_data_provider_0).__module__}.{type(base_data_provider_0).__qualname__}' == 'mimesis_local.mimesis.providers.base.BaseDataProvider'
    assert base_data_provider_0.seed is None
    assert f'{type(base_data_provider_0.random).__module__}.{type(base_data_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert base_data_provider_0.locale == 'en'
    str_0 = '\\'
    generator_0 = base_data_provider_0.override_locale(str_0)
    base_provider_0 = module_0.BaseProvider()
    none_type_1 = base_provider_0.reseed()
    bytes_0 = b'\x80\xb9\xec\xbd\xd7\xd3c!\x1c\xf5\x1b\xca'
    none_type_2 = base_provider_0.reseed(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    base_data_provider_0 = module_0.BaseDataProvider()
    assert f'{type(base_data_provider_0).__module__}.{type(base_data_provider_0).__qualname__}' == 'mimesis_local.mimesis.providers.base.BaseDataProvider'
    assert base_data_provider_0.seed is None
    assert f'{type(base_data_provider_0.random).__module__}.{type(base_data_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert base_data_provider_0.locale == 'en'
    none_type_0 = None
    base_data_provider_1 = module_0.BaseDataProvider(seed=none_type_0)
    assert base_data_provider_1.locale == 'en'
    base_provider_0 = module_0.BaseProvider(none_type_0)
    base_data_provider_2 = module_0.BaseDataProvider()
    assert base_data_provider_2.locale == 'en'
    base_data_provider_3 = module_0.BaseDataProvider()
    assert base_data_provider_3.locale == 'en'
    str_0 = base_data_provider_0.__str__()
    module_0.BaseDataProvider(str_0)

def test_case_5():
    base_data_provider_0 = module_0.BaseDataProvider()
    assert f'{type(base_data_provider_0).__module__}.{type(base_data_provider_0).__qualname__}' == 'mimesis_local.mimesis.providers.base.BaseDataProvider'
    assert base_data_provider_0.seed is None
    assert f'{type(base_data_provider_0.random).__module__}.{type(base_data_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert base_data_provider_0.locale == 'en'

@pytest.mark.xfail(strict=True)
def test_case_6():
    base_provider_0 = module_0.BaseProvider()
    str_0 = base_provider_0.__str__()
    str_1 = base_provider_0.__str__()
    none_type_0 = base_provider_0.reseed(str_1)
    var_0 = module_2.py_encode_basestring_ascii(str_1)
    var_1 = var_0.__len__()
    var_1.reseed(none_type_0)

def test_case_7():
    base_data_provider_0 = module_0.BaseDataProvider()
    assert f'{type(base_data_provider_0).__module__}.{type(base_data_provider_0).__qualname__}' == 'mimesis_local.mimesis.providers.base.BaseDataProvider'
    assert base_data_provider_0.seed is None
    assert f'{type(base_data_provider_0.random).__module__}.{type(base_data_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert base_data_provider_0.locale == 'en'
    str_0 = base_data_provider_0.get_current_locale()
    assert str_0 == 'en'
    none_type_0 = base_data_provider_0.reseed()
    str_1 = base_data_provider_0.__str__()
    generator_0 = base_data_provider_0.override_locale()