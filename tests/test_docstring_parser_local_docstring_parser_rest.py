# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser_local.docstring_parser.rest as module_0
import re as module_1
import inspect as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    str_0 = 'TVtQHW'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'TVtQHW'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    str_1 = '\\fQJ\\\nS}6A'
    docstring_1 = module_0.parse(str_1)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_1.short_description == '\\fQJ\\'
    assert docstring_1.long_description == 'S}6A'
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    docstring_2 = module_0.parse(str_1)
    assert docstring_2.short_description == '\\fQJ\\'
    assert docstring_2.long_description == 'S}6A'
    assert docstring_2.blank_after_short_description is False
    assert docstring_2.blank_after_long_description is False
    str_2 = ''
    docstring_3 = module_0.parse(str_2)
    docstring_4 = module_0.parse(str_0)
    assert docstring_4.short_description == 'TVtQHW'
    docstring_5 = module_0.parse(none_type_0)
    assert f'{type(docstring_5).__module__}.{type(docstring_5).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_5.short_description is None
    assert docstring_5.long_description is None
    assert docstring_5.blank_after_short_description is False
    assert docstring_5.blank_after_long_description is False
    assert docstring_5.meta == []
    str_3 = '\n    Define SGR styling rule.\n\n    More info about SGR parameters: https://en.wikipedia.org/wiki/ANSI_escape_code#SGR\n\n    :param num: A SGR number.\n    '
    docstring_6 = module_0.parse(str_3)
    assert f'{type(docstring_6).__module__}.{type(docstring_6).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_6.short_description == 'Define SGR styling rule.'
    assert docstring_6.long_description == 'More info about SGR parameters: https://en.wikipedia.org/wiki/ANSI_escape_code#SGR'
    assert docstring_6.blank_after_short_description is True
    assert docstring_6.blank_after_long_description is True
    assert f'{type(docstring_6.meta).__module__}.{type(docstring_6.meta).__qualname__}' == 'builtins.list'
    assert len(docstring_6.meta) == 1
    docstring_7 = module_0.parse(str_2)
    docstring_8 = module_0.parse(str_0)
    assert docstring_8.short_description == 'TVtQHW'
    docstring_9 = module_0.parse(str_1)
    assert docstring_9.short_description == '\\fQJ\\'
    assert docstring_9.long_description == 'S}6A'
    assert docstring_9.blank_after_short_description is False
    assert docstring_9.blank_after_long_description is False
    docstring_10 = module_0.parse(str_2)
    docstring_11 = module_0.parse(none_type_0)
    module_0.parse(docstring_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '__repr__'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description == '__repr__'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == '__repr__'
    module_0.parse(docstring_0)

def test_case_2():
    str_0 = '__hash__'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description == '__hash__'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    none_type_0 = None
    docstring_1 = module_0.parse(none_type_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_1.template(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ':!a:707?2n{-?HT'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert f'{type(docstring_0.meta).__module__}.{type(docstring_0.meta).__qualname__}' == 'builtins.list'
    assert len(docstring_0.meta) == 1
    str_1 = '8$ LJ/D0~V-<it0'
    docstring_1 = module_0.parse(str_1)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_1.short_description == '8$ LJ/D0~V-<it0'
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    str_2 = 'WrapModes'
    none_type_0 = None
    dict_0 = {str_1: none_type_0, str_1: none_type_0, str_0: none_type_0}
    var_0 = module_2.iscoroutinefunction(str_1)
    var_1 = var_0.__repr__()
    var_2 = var_1.__eq__(str_0)
    var_3 = var_2.__or__(str_2)
    var_3.update(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'Yw4\n?oAJ\x0c6@GyfLTP'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'Yw4'
    assert docstring_0.long_description == '?oAJ\x0c6@GyfLTP'
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    none_type_0 = None
    docstring_1 = module_0.parse(str_0)
    assert docstring_1.short_description == 'Yw4'
    assert docstring_1.long_description == '?oAJ\x0c6@GyfLTP'
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    docstring_2 = module_0.parse(str_0)
    assert docstring_2.short_description == 'Yw4'
    assert docstring_2.long_description == '?oAJ\x0c6@GyfLTP'
    assert docstring_2.blank_after_short_description is False
    assert docstring_2.blank_after_long_description is False
    docstring_3 = module_0.parse(str_0)
    assert docstring_3.short_description == 'Yw4'
    assert docstring_3.long_description == '?oAJ\x0c6@GyfLTP'
    assert docstring_3.blank_after_short_description is False
    assert docstring_3.blank_after_long_description is False
    docstring_4 = module_0.parse(none_type_0)
    assert f'{type(docstring_4).__module__}.{type(docstring_4).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_4.short_description is None
    assert docstring_4.long_description is None
    assert docstring_4.blank_after_short_description is False
    assert docstring_4.blank_after_long_description is False
    assert docstring_4.meta == []
    docstring_4.buffer_writer(str_0)