# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis.providers.base as module_0
import mimesis_local.mimesis.builtins.pl as module_1
import mimesis.enums as module_2
import mimesis.providers.date as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    base_provider_0 = module_0.BaseProvider()
    poland_spec_provider_0 = module_1.PolandSpecProvider(base_provider_0)
    assert f'{type(poland_spec_provider_0).__module__}.{type(poland_spec_provider_0).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert f'{type(poland_spec_provider_0.seed).__module__}.{type(poland_spec_provider_0.seed).__qualname__}' == 'mimesis.providers.base.BaseProvider'
    assert f'{type(poland_spec_provider_0.random).__module__}.{type(poland_spec_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_0.locale == 'pl'
    str_0 = poland_spec_provider_0.nip()
    float_0 = 890.4
    poland_spec_provider_1 = module_1.PolandSpecProvider(float_0)
    assert poland_spec_provider_1.locale == 'pl'
    str_1 = poland_spec_provider_0.nip()
    str_2 = poland_spec_provider_1.nip()
    assert str_2 == '2559865363'
    poland_spec_provider_1.pesel(float_0)

def test_case_1():
    poland_spec_provider_0 = module_1.PolandSpecProvider()
    assert f'{type(poland_spec_provider_0).__module__}.{type(poland_spec_provider_0).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert poland_spec_provider_0.seed is None
    assert f'{type(poland_spec_provider_0.random).__module__}.{type(poland_spec_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_0.locale == 'pl'
    str_0 = poland_spec_provider_0.nip()
    poland_spec_provider_1 = module_1.PolandSpecProvider()
    assert poland_spec_provider_1.locale == 'pl'
    str_1 = poland_spec_provider_1.regon()

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    gender_0 = module_2.Gender.MALE
    int_0 = 1327
    poland_spec_provider_0 = module_1.PolandSpecProvider()
    assert f'{type(poland_spec_provider_0).__module__}.{type(poland_spec_provider_0).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert poland_spec_provider_0.seed is None
    assert f'{type(poland_spec_provider_0.random).__module__}.{type(poland_spec_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_0.locale == 'pl'
    poland_spec_provider_1 = module_1.PolandSpecProvider(int_0)
    assert f'{type(poland_spec_provider_1).__module__}.{type(poland_spec_provider_1).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert poland_spec_provider_1.seed == 1327
    assert f'{type(poland_spec_provider_1.random).__module__}.{type(poland_spec_provider_1.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_1.locale == 'pl'
    str_0 = poland_spec_provider_1.pesel(none_type_0, gender_0)
    list_0 = []
    str_1 = '1>\x0c=M6D&5E(+jF#`sj6'
    dict_0 = {str_1: list_0}
    module_3.Datetime(*list_0, **dict_0)

def test_case_3():
    poland_spec_provider_0 = module_1.PolandSpecProvider()
    assert f'{type(poland_spec_provider_0).__module__}.{type(poland_spec_provider_0).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert poland_spec_provider_0.seed is None
    assert f'{type(poland_spec_provider_0.random).__module__}.{type(poland_spec_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_0.locale == 'pl'
    str_0 = poland_spec_provider_0.pesel()

def test_case_4():
    str_0 = ''
    poland_spec_provider_0 = module_1.PolandSpecProvider(str_0)
    assert f'{type(poland_spec_provider_0).__module__}.{type(poland_spec_provider_0).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert poland_spec_provider_0.seed == ''
    assert f'{type(poland_spec_provider_0.random).__module__}.{type(poland_spec_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_0.locale == 'pl'
    poland_spec_provider_1 = module_1.PolandSpecProvider()
    assert poland_spec_provider_1.seed is None
    assert f'{type(poland_spec_provider_1.random).__module__}.{type(poland_spec_provider_1.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_1.locale == 'pl'
    poland_spec_provider_2 = module_1.PolandSpecProvider()
    assert poland_spec_provider_2.seed is None
    assert f'{type(poland_spec_provider_2.random).__module__}.{type(poland_spec_provider_2.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_2.locale == 'pl'
    poland_spec_provider_3 = module_1.PolandSpecProvider()
    assert poland_spec_provider_3.seed is None
    assert f'{type(poland_spec_provider_3.random).__module__}.{type(poland_spec_provider_3.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_3.locale == 'pl'
    str_1 = poland_spec_provider_3.regon()
    str_2 = poland_spec_provider_1.nip()
    str_3 = poland_spec_provider_3.get_current_locale()
    assert str_3 == 'pl'
    str_4 = poland_spec_provider_3.regon()
    poland_spec_provider_4 = module_1.PolandSpecProvider()
    assert poland_spec_provider_4.locale == 'pl'

def test_case_5():
    poland_spec_provider_0 = module_1.PolandSpecProvider()
    assert f'{type(poland_spec_provider_0).__module__}.{type(poland_spec_provider_0).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert poland_spec_provider_0.seed is None
    assert f'{type(poland_spec_provider_0.random).__module__}.{type(poland_spec_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_0.locale == 'pl'

def test_case_6():
    gender_0 = module_2.Gender.FEMALE
    bool_0 = False
    poland_spec_provider_0 = module_1.PolandSpecProvider()
    assert f'{type(poland_spec_provider_0).__module__}.{type(poland_spec_provider_0).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert poland_spec_provider_0.seed is None
    assert f'{type(poland_spec_provider_0.random).__module__}.{type(poland_spec_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_0.locale == 'pl'
    poland_spec_provider_1 = module_1.PolandSpecProvider(gender_0)
    assert f'{type(poland_spec_provider_1).__module__}.{type(poland_spec_provider_1).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert poland_spec_provider_1.seed == module_2.Gender.FEMALE
    assert f'{type(poland_spec_provider_1.random).__module__}.{type(poland_spec_provider_1.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_1.locale == 'pl'
    str_0 = poland_spec_provider_1.nip()
    assert str_0 == '8773516336'
    poland_spec_provider_2 = module_1.PolandSpecProvider(bool_0)
    assert poland_spec_provider_2.locale == 'pl'
    poland_spec_provider_3 = module_1.PolandSpecProvider()
    assert poland_spec_provider_3.locale == 'pl'
    str_1 = poland_spec_provider_3.regon()
    str_2 = poland_spec_provider_2.pesel(gender=gender_0)
    str_3 = poland_spec_provider_2.__str__()
    assert str_3 == 'PolandSpecProvider <pl>'
    poland_spec_provider_4 = module_1.PolandSpecProvider()
    assert poland_spec_provider_4.locale == 'pl'
    str_4 = poland_spec_provider_1.get_current_locale()
    assert str_4 == 'pl'

def test_case_7():
    poland_spec_provider_0 = module_1.PolandSpecProvider()
    assert f'{type(poland_spec_provider_0).__module__}.{type(poland_spec_provider_0).__qualname__}' == 'mimesis_local.mimesis.builtins.pl.PolandSpecProvider'
    assert poland_spec_provider_0.seed is None
    assert f'{type(poland_spec_provider_0.random).__module__}.{type(poland_spec_provider_0.random).__qualname__}' == 'mimesis.random.Random'
    assert poland_spec_provider_0.locale == 'pl'
    str_0 = poland_spec_provider_0.pesel()
    poland_spec_provider_1 = module_1.PolandSpecProvider()
    assert poland_spec_provider_1.locale == 'pl'
    str_1 = poland_spec_provider_1.__str__()
    assert str_1 == 'PolandSpecProvider <pl>'
    str_2 = poland_spec_provider_1.nip()
    str_3 = poland_spec_provider_0.get_current_locale()
    assert str_3 == 'pl'
    str_4 = poland_spec_provider_1.regon()
    none_type_0 = poland_spec_provider_1.reseed()
    str_5 = poland_spec_provider_1.nip()