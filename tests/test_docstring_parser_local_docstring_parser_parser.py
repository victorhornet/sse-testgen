# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser_local.docstring_parser.parser as module_0
import builtins as module_1
import docstring_parser.common as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '='
    module_0.parse(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    runtime_error_0 = module_1.RuntimeError()
    module_0.parse(runtime_error_0)

def test_case_2():
    str_0 = "hYzkl2:cmBf' O"
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_0.short_description == "hYzkl2:cmBf' O"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []

@pytest.mark.xfail(strict=True)
def test_case_3():
    docstring_0 = module_2.Docstring()
    str_0 = ':Tk6c'
    docstring_1 = module_0.parse(str_0)
    assert f'{type(docstring_1).__module__}.{type(docstring_1).__qualname__}' == 'docstring_parser.common.Docstring'
    assert docstring_1.short_description == ':Tk6c'
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    docstring_2 = module_0.parse(str_0)
    docstring_3 = module_0.parse(str_0)
    module_0.parse(str_0, docstring_0)