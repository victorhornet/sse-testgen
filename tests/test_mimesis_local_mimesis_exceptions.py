# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.exceptions as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 6033.9295
    module_0.NonEnumerableError(float_0)

def test_case_1():
    none_type_0 = None
    non_enumerable_error_0 = module_0.NonEnumerableError(none_type_0)
    assert f'{type(non_enumerable_error_0).__module__}.{type(non_enumerable_error_0).__qualname__}' == 'mimesis_local.mimesis.exceptions.NonEnumerableError'
    assert non_enumerable_error_0.items == ''
    assert module_0.NonEnumerableError.message == 'You should use one item of: «{}» of the object mimesis.enums.{}'
    bytes_0 = b'\xd9\x81wE'
    non_enumerable_error_1 = module_0.NonEnumerableError(bytes_0)
    assert non_enumerable_error_1.name == b'\xd9\x81wE'
    assert non_enumerable_error_1.items == '217, 129, 119, 69'

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    non_enumerable_error_0 = module_0.NonEnumerableError(dict_0)
    assert non_enumerable_error_0.name == {True: True}
    assert non_enumerable_error_0.items == 'True'
    assert module_0.NonEnumerableError.message == 'You should use one item of: «{}» of the object mimesis.enums.{}'
    non_enumerable_error_0.__str__()

def test_case_3():
    undefined_schema_0 = module_0.UndefinedSchema()
    str_0 = undefined_schema_0.__str__()
    assert str_0 == 'Schema should be defined in lambda.'

@pytest.mark.xfail(strict=True)
def test_case_4():
    undefined_field_0 = module_0.UndefinedField()
    str_0 = undefined_field_0.__str__()
    assert str_0 == 'Undefined field. Filed cannot be None.'
    unsupported_locale_0 = module_0.UnsupportedLocale()
    assert f'{type(unsupported_locale_0).__module__}.{type(unsupported_locale_0).__qualname__}' == 'mimesis_local.mimesis.exceptions.UnsupportedLocale'
    assert unsupported_locale_0.locale is None
    assert unsupported_locale_0.message == 'Locale «{}» is not supported'
    type_error_0 = module_1.TypeError()
    list_0 = []
    unsupported_algorithm_0 = module_0.UnsupportedAlgorithm(*list_0)
    undefined_schema_0 = module_0.UndefinedSchema()
    module_0.UndefinedSchema(*type_error_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    unsupported_locale_0 = module_0.UnsupportedLocale()
    assert f'{type(unsupported_locale_0).__module__}.{type(unsupported_locale_0).__qualname__}' == 'mimesis_local.mimesis.exceptions.UnsupportedLocale'
    assert unsupported_locale_0.locale is None
    assert unsupported_locale_0.message == 'Locale «{}» is not supported'
    str_0 = unsupported_locale_0.__str__()
    assert str_0 == 'Locale «None» is not supported'
    str_1 = '@+kE'
    str_2 = unsupported_locale_0.__str__()
    assert str_2 == 'Locale «None» is not supported'
    unsupported_locale_1 = module_0.UnsupportedLocale(str_1)
    assert unsupported_locale_1.message == 'Locale «{}» is not supported'
    non_enumerable_error_0 = module_0.NonEnumerableError(str_1)
    assert non_enumerable_error_0.name == '@+kE'
    assert non_enumerable_error_0.items == '@, +, k, E'
    assert module_0.NonEnumerableError.message == 'You should use one item of: «{}» of the object mimesis.enums.{}'
    non_enumerable_error_0.__str__()

def test_case_6():
    key_error_0 = module_1.KeyError()
    unsupported_field_0 = module_0.UnsupportedField(key_error_0)
    assert f'{type(unsupported_field_0).__module__}.{type(unsupported_field_0).__qualname__}' == 'mimesis_local.mimesis.exceptions.UnsupportedField'
    assert f'{type(unsupported_field_0.name).__module__}.{type(unsupported_field_0.name).__qualname__}' == 'builtins.KeyError'
    assert unsupported_field_0.message == 'Field «{}» is not supported.'
    str_0 = unsupported_field_0.__str__()
    assert str_0 == 'Field «» is not supported.'

def test_case_7():
    unacceptable_field_0 = module_0.UnacceptableField()
    str_0 = unacceptable_field_0.__str__()
    assert str_0 == 'Unacceptable field format, use **provider.method**.'
    list_0 = []
    undefined_field_0 = module_0.UndefinedField(*list_0)
    unacceptable_field_1 = module_0.UnacceptableField(*list_0)
    undefined_schema_0 = module_0.UndefinedSchema()
    undefined_schema_1 = module_0.UndefinedSchema()
    undefined_schema_2 = module_0.UndefinedSchema()