# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.date as module_0
import calendar as module_1

def test_case_0():
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = datetime_0.month()
    none_type_0 = None
    datetime_1 = datetime_0.datetime(timezone=none_type_0)
    assert f'{type(datetime_1).__module__}.{type(datetime_1).__qualname__}' == 'datetime.datetime'

def test_case_1():
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = datetime_0.formatted_date()
    str_1 = datetime_0.formatted_time()

@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    dict_0 = {}
    datetime_0 = module_0.Datetime(*list_0, **dict_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = datetime_0.formatted_datetime()
    time_0 = datetime_0.time()
    str_1 = datetime_0.century()
    module_1.timegm(list_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'A'
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    datetime_0.week_date(str_0)

def test_case_4():
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = datetime_0.periodicity()
    none_type_0 = None
    str_1 = datetime_0.formatted_time(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    none_type_0 = None
    time_0 = datetime_0.time()
    str_0 = datetime_0.century()
    module_1.timegm(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    dict_0 = {}
    datetime_0 = module_0.Datetime(*list_0, **dict_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = datetime_0.formatted_datetime()
    datetime_0.bulk_create_datetimes(str_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = ';hqq7'
    str_1 = 'metadata'
    str_2 = datetime_0.day_of_week()
    str_3 = 'h\nQ'
    datetime_1 = datetime_0.datetime()
    assert f'{type(datetime_1).__module__}.{type(datetime_1).__qualname__}' == 'datetime.datetime'
    list_0 = [datetime_1]
    str_4 = 'hash'
    dict_0 = {str_0: str_0, str_1: str_0, str_3: list_0, str_4: str_1}
    datetime_0.timestamp(datetime_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    datetime_0.formatted_date(datetime_0)

def test_case_9():
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = datetime_0.formatted_date()
    str_1 = datetime_0.__str__()
    str_2 = ' '
    str_3 = datetime_0.formatted_time(str_2)
    assert str_3 == ' '

def test_case_10():
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    time_0 = datetime_0.time()
    str_0 = datetime_0.century()
    str_1 = datetime_0.__str__()
    str_2 = datetime_0.formatted_time()
    str_3 = datetime_0.get_current_locale()
    str_4 = datetime_0.formatted_datetime(str_3)
    assert str_4 == 'en'
    date_0 = datetime_0.date()

@pytest.mark.xfail(strict=True)
def test_case_11():
    list_0 = []
    dict_0 = {}
    datetime_0 = module_0.Datetime(*list_0, **dict_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = datetime_0.timestamp(dict_0, **dict_0)
    var_0 = datetime_0.date()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'datetime.date'
    var_0.datetime(end=var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    list_0 = []
    dict_0 = {}
    datetime_0 = module_0.Datetime(*list_0, **dict_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = datetime_0.formatted_datetime()
    str_1 = datetime_0.gmt_offset()
    datetime_0.bulk_create_datetimes(str_0, dict_0)

def test_case_13():
    datetime_0 = module_0.Datetime()
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'mimesis_local.mimesis.providers.date.Datetime'
    assert datetime_0.seed is None
    assert f'{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}' == 'mimesis.random.Random'
    assert datetime_0.locale == 'en'
    str_0 = datetime_0.formatted_date()
    var_0 = datetime_0.timestamp()
    datetime_1 = module_0.Datetime()
    time_0 = datetime_0.time()