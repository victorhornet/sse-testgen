# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import flutils.txtutils as module_0
import re as module_1

def test_case_0():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'

def test_case_1():
    str_0 = "u_!xOY8\taW'J\t7|js me"
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 20

def test_case_2():
    str_0 = '\x1b['
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 2

def test_case_3():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = '!XM8HLZUL\rdY'
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    int_0 = module_0.len_without_ansi(list_0)
    assert int_0 == 12

def test_case_4():
    str_0 = ''
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 0

def test_case_5():
    str_0 = ''
    var_0 = module_1.findall(str_0, str_0)
    int_0 = module_0.len_without_ansi(var_0)
    assert int_0 == 0

def test_case_6():
    str_0 = 'wIVjii'
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 6
    str_1 = '/'
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_1, expand_tabs=bool_0, fix_sentence_endings=bool_0, drop_whitespace=str_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 6
    assert ansi_text_wrapper_0.expand_tabs is False
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace == 'wIVjii'
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is False
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    var_0 = ansi_text_wrapper_0.wrap(str_0)
    assert ansi_text_wrapper_0.placeholder_len == 6

def test_case_7():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = 'X}#&~|/W#,F8P*|\nE\t'
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == 'X}#&~|/W#,F8P*| E'

def test_case_8():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = 'Unable to create the directory: %r because theparent path: %r exists as a %s.'
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == 'Unable to create the directory: %r because theparent path: %r exists\nas a %s.'

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'FwS)khNknM1;'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, fix_sentence_endings=bool_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width is True
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is True
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    ansi_text_wrapper_0.fill(str_0)

def test_case_10():
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(drop_whitespace=bool_0, break_on_hyphens=bool_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is False
    assert ansi_text_wrapper_0.break_on_hyphens is False
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is False
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = 'EvTj|3sEy`\r'
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_11():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = '\r[_'
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == ' [_'

def test_case_12():
    str_0 = '((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(initial_indent=str_0, replace_whitespace=str_0, break_long_words=str_0, drop_whitespace=str_0, break_on_hyphens=str_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace == '((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))'
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words == '((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))'
    assert ansi_text_wrapper_0.drop_whitespace == '((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))'
    assert ansi_text_wrapper_0.break_on_hyphens == '((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))'
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == '((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))((?<=[a-z0-9])[A-Z]|(?!^)[A-\nZ](?=[a-z]))'

def test_case_13():
    str_0 = 'HppIi7*\x0c'
    int_0 = 2184
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines == 2184
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_14():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = 'Return an user object representing an operating system user.\n\n    Args:\n        name (:obj:`str` or :obj:`int`, optional): The "login name" or\n            ``uid``.  Defaults to the current user\'s "login name".\n    Raises:\n        OSError: If the given ``name`` does not exist as a "login\n            name" for this operating system.\n        OSError: If the given ``name`` is an ``uid`` and it does not\n            exist.\n\n    :rtype:\n        :obj:`struct_passwd <pwd>`\n\n        * A tuple like object.\n\n    Example:\n        >>> from flutils.pathutils import get_os_user\n        >>> get_os_user(\'foo\')\n        pwd.struct_passwd(pw_name=\'foo\', pw_passwd=\'********\', pw_uid=1001,\n        pw_gid=2001, pw_gecos=\'Foo Bar\', pw_dir=\'/home/foo\',\n        pw_shell=\'/usr/local/bin/bash\')\n    '
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == 'Return an user object representing an operating system user.\nArgs:         name (:obj:`str` or :obj:`int`, optional): The "login\nname" or             ``uid``.  Defaults to the current user\'s "login\nname".     Raises:         OSError: If the given ``name`` does not\nexist as a "login             name" for this operating system.\nOSError: If the given ``name`` is an ``uid`` and it does not\nexist.      :rtype:         :obj:`struct_passwd <pwd>`          * A\ntuple like object.      Example:         >>> from flutils.pathutils\nimport get_os_user         >>> get_os_user(\'foo\')\npwd.struct_passwd(pw_name=\'foo\', pw_passwd=\'********\', pw_uid=1001,\npw_gid=2001, pw_gecos=\'Foo Bar\', pw_dir=\'/home/foo\',\npw_shell=\'/usr/local/bin/bash\')'

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'DtogZge0qC=^'
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width is False
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is False
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    ansi_text_wrapper_0.fill(str_0)

def test_case_16():
    str_0 = 'JWkzxFhEYm87CW'
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 14
    str_1 = '\t0v{0\t9!'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_1, expand_tabs=bool_0, fix_sentence_endings=bool_0, drop_whitespace=str_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 14
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is True
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace == 'JWkzxFhEYm87CW'
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_2 = ansi_text_wrapper_0.fill(str_1)
    assert str_2 == '\t0v{0\t9![...]'
    assert ansi_text_wrapper_0.placeholder_len == 6

def test_case_17():
    str_0 = 'JWkzxFhEYm87CW'
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 14
    str_1 = '0v\t9!'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_1, expand_tabs=bool_0, fix_sentence_endings=bool_0, drop_whitespace=str_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 14
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is True
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace == 'JWkzxFhEYm87CW'
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_2 = ansi_text_wrapper_0.fill(str_1)
    assert str_2 == '0v\t9!0v [...]'
    assert ansi_text_wrapper_0.placeholder_len == 6

def test_case_18():
    none_type_0 = None
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(subsequent_indent=none_type_0, expand_tabs=none_type_0, replace_whitespace=none_type_0, drop_whitespace=none_type_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is None
    assert ansi_text_wrapper_0.replace_whitespace is None
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is None
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = '1kCec}_<'
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_19():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = ''
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == ''

@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b''
    str_0 = '[l%k CBoc6);O+.f=vS'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(initial_indent=str_0, replace_whitespace=bool_0, break_long_words=bool_0, drop_whitespace=bytes_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace == b''
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_1 = "\x0c'I5]U~$+#<kVsR#\\ik"
    str_2 = ansi_text_wrapper_0.fill(str_1)
    assert str_2 == "[l%k CBoc6);O+.f=vS 'I5]U~$+#<kVsR#\\ik"
    str_3 = ansi_text_wrapper_0.fill(str_2)
    assert str_3 == "[l%k CBoc6);O+.f=vS[l%k CBoc6);O+.f=vS 'I5]U~$+#<kVsR#\\ik"
    var_0 = ansi_text_wrapper_0.fill(str_3)
    assert var_0 == '[l%k CBoc6);O+.f=vS[l%k CBoc6);O+.f=vS[l%k CBoc6);O+.f=vS [...]'
    assert ansi_text_wrapper_0.placeholder_len == 6
    module_0.len_without_ansi(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'Q\x0cn^}0\\~:U6}t'
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(subsequent_indent=str_0, expand_tabs=bool_0, break_long_words=str_0, drop_whitespace=bool_0, tabsize=str_0, max_lines=str_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is False
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words == 'Q\x0cn^}0\\~:U6}t'
    assert ansi_text_wrapper_0.drop_whitespace is False
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 'Q\x0cn^}0\\~:U6}t'
    assert ansi_text_wrapper_0.max_lines == 'Q\x0cn^}0\\~:U6}t'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_1 = 'download_url'
    ansi_text_wrapper_0.wrap(str_1)

def test_case_22():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = 'Replace the calling :term:`cherry-pick-definition package module` with\n    a :term:`cherry-picking module`.\n\n    Use this function when there is a need to :term:`cherry-pick` modules.\n    This means the loading and executing, of a module, will be postponed\n    until an attribute is accessed.\n\n    Args:\n        namespace (:obj:`dict`): This should always be set to\n            :obj:`globals() <globals>`\n\n    :rtype: :obj:`None`\n\n    .. Warning:: For projects where startup time is critical, this function\n        allows for potentially minimizing the cost of loading a module if it\n        is never used. For projects where startup time is not essential, the\n        use of this function is heavily discouraged due to error messages\n        created during loading being postponed and thus occurring out of\n        context.\n\n    Example:\n        It is recommended to first build the root package (``__init__.py``)\n        as a normally desired root package. (Make sure that no functions\n        or classes are defined.  If needed, define these in a submodule).  For\n        example (``mymodule/__init__.py``)::\n\n            """This is the mymodule docstring."""\n\n            from mymodule import mysubmoduleone\n            import mymodule.mysubmoduletwo as two\n            from mymodule.mysubmodulethree import afunction\n            from mymodule.mysubmodulethree import anotherfunction as anotherfuc\n\n            MYVAL = 123\n\n        To use the ``cherry_pick`` function, the root package module\n        (``__init__.py``) must be converted to a\n        :term:`cherry-pick-definition package module`. This example is the\n        result of rewriting the root package (above)::\n\n            """This is the mymodule docstring."""\n\n            from flutils.moduleutils import cherry_pick\n\n            MYVAL = 123\n\n            __attr_map__ = (\n                \'mymodule.mysubmoduleone\',\n                \'mymodule.mysubmoduletwo,two\',\n                \'mymodule.mysubmodulethree:afunction\',\n                \'mymodule.mysubmodulethree:anotherfunction,anotherfuc\'\n            )\n            __additional_attrs__ = dict(\n                MYVAL=MYVAL\n            )\n\n            cherry_pick(globals())\n\n        As you can see, the imports were each rewritten to a\n        :tePm:`foreign-name` and placed in the ``__attr_map__`` :obj:`tuple`.\n\n        Then, ``MYVAL`` was put in the ``__additional_attrs__`` dictionary.\n        Use this dictionary to pass any values to\n        :term:`cherry-picking module`.\n\n        And finally the ``cherry_pick`` function was called with\n        :obj:`globals() <globals>` as the only argument.\n\n        The result is the expected usage of ``mymodule``::\n\n            >> import mymodule\n            >> mymodule.anotherfunc()\n            foo bar\n\n        To test if a cherry-picked module has been loaded, or not::\n\n            >> import sys\n            >> sys.modules.get(\'mymodule.mysubmodulethree\')\n\n        If you get nothing back, it means the cherry-picked module has not been\n        loaded.\n\n        Please be aware that there are some cases when all of the\n        cherry-picked modules will be loaded automatically. Using any\n        program that automatically inspects the cherry-picking module\n        will cause the all of the cherry-picked modules to be loaded.\n        Programs such as ipython and pycharm will do this.\n    '
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == 'Replace the calling :term:`cherry-pick-definition package module` with\na :term:`cherry-picking module`.      Use this function when there is\na need to :term:`cherry-pick` modules.     This means the loading and\nexecuting, of a module, will be postponed     until an attribute is\naccessed.      Args:         namespace (:obj:`dict`): This should\nalways be set to             :obj:`globals() <globals>`      :rtype:\n:obj:`None`      .. Warning:: For projects where startup time is\ncritical, this function         allows for potentially minimizing the\ncost of loading a module if it         is never used. For projects\nwhere startup time is not essential, the         use of this function\nis heavily discouraged due to error messages         created during\nloading being postponed and thus occurring out of         context.\nExample:         It is recommended to first build the root package\n(``__init__.py``)         as a normally desired root package. (Make\nsure that no functions         or classes are defined.  If needed,\ndefine these in a submodule).  For         example\n(``mymodule/__init__.py``)::              """This is the mymodule\ndocstring."""              from mymodule import mysubmoduleone\nimport mymodule.mysubmoduletwo as two             from\nmymodule.mysubmodulethree import afunction             from\nmymodule.mysubmodulethree import anotherfunction as anotherfuc\nMYVAL = 123          To use the ``cherry_pick`` function, the root\npackage module         (``__init__.py``) must be converted to a\n:term:`cherry-pick-definition package module`. This example is the\nresult of rewriting the root package (above)::              """This is\nthe mymodule docstring."""              from flutils.moduleutils\nimport cherry_pick              MYVAL = 123              __attr_map__\n= (                 \'mymodule.mysubmoduleone\',\n\'mymodule.mysubmoduletwo,two\',\n\'mymodule.mysubmodulethree:afunction\',\n\'mymodule.mysubmodulethree:anotherfunction,anotherfuc\'             )\n__additional_attrs__ = dict(                 MYVAL=MYVAL             )\ncherry_pick(globals())          As you can see, the imports were each\nrewritten to a         :tePm:`foreign-name` and placed in the\n``__attr_map__`` :obj:`tuple`.          Then, ``MYVAL`` was put in the\n``__additional_attrs__`` dictionary.         Use this dictionary to\npass any values to         :term:`cherry-picking module`.          And\nfinally the ``cherry_pick`` function was called with\n:obj:`globals() <globals>` as the only argument.          The result\nis the expected usage of ``mymodule``::              >> import\nmymodule             >> mymodule.anotherfunc()             foo bar\nTo test if a cherry-picked module has been loaded, or not::\n>> import sys             >>\nsys.modules.get(\'mymodule.mysubmodulethree\')          If you get\nnothing back, it means the cherry-picked module has not been\nloaded.          Please be aware that there are some cases when all of\nthe         cherry-picked modules will be loaded automatically. Using\nany         program that automatically inspects the cherry-picking\nmodule         will cause the all of the cherry-picked modules to be\nloaded.         Programs such as ipython and pycharm will do this.'

def test_case_23():
    str_0 = 'loadermaintainer'
    str_1 = 'cCOM,qqQCKXs'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(subsequent_indent=str_1, expand_tabs=str_1, tabsize=bool_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs == 'cCOM,qqQCKXs'
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize is True
    assert ansi_text_wrapper_0.max_lines is True
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_2 = ansi_text_wrapper_0.fill(str_0)
    assert str_2 == 'loadermaintainer'

def test_case_24():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = "u_!xOY8\taW'J\t7|js me"
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_25():
    str_0 = ']O6j9$\x0b*Q"x0Q\n'
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 14
    str_1 = '/'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_1, expand_tabs=bool_0, fix_sentence_endings=bool_0, drop_whitespace=str_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 14
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is True
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace == ']O6j9$\x0b*Q"x0Q\n'
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    var_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_26():
    bytes_0 = b'\xb7\x9a'
    str_0 = 'MgW"y?!4q2Z5GEp0c3'
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(initial_indent=str_0, replace_whitespace=bool_0, break_long_words=bool_0, drop_whitespace=bytes_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is False
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is False
    assert ansi_text_wrapper_0.drop_whitespace == b'\xb7\x9a'
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is False
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == 'MgW"y?!4q2Z5GEp0c3MgW"y?!4q2Z5GEp0c3'
    str_2 = ansi_text_wrapper_0.fill(str_1)
    assert str_2 == 'MgW"y?!4q2Z5GEp0c3MgW"y?!4q2Z5GEp0c3MgW"y?!4q2Z5GEp0c3'
    var_0 = ansi_text_wrapper_0.fill(str_2)
    assert var_0 == 'MgW"y?!4q2Z5GEp0c3[...]'
    assert ansi_text_wrapper_0.placeholder_len == 6

def test_case_27():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = '\t'
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == ''

def test_case_28():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    str_0 = 'g?oXa\x0c8P4-$~x}?'
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    str_1 = 'Run the given command line command and return the command\'s\n    return code.\n\n    When the given ``command`` is executed, the command\'s stdout and\n    stderr outputs are captured in a pseudo terminal.  The captured\n    outputs are then added to this function\'s ``stdout`` and ``stderr``\n    IO objects.\n\n    This function will capture any ANSI escape codes in the output of\n    the given command.  This even includes ANSI colors.\n\n    Args:\n        command (str, List[str], Tuple[str]): The command to execute.\n        stdout (:obj:`typing.IO`, optional):  An input/output stream\n            that will hold the command\'s ``stdout``.  Defaults to:\n            :obj:`sys.stdout <sys.stdout>`; which will output\n            the command\'s ``stdout`` to the terminal.\n        stderr (:obj:`typing.IO`, optional):  An input/output stream\n            that will hold the command\'s ``stderr``.  Defaults to:\n            :obj:`sys.stderr <sys.stderr>`; which will output\n            the command\'s ``stderr`` to the terminal.\n        columns (int, optional): The number of character columns the pseudo\n            terminal may use.  If ``force_dimensions`` is :obj:`False`, this\n            will be the fallback columns value when the the current terminal\'s\n            column size cannot be found.  If ``force_dimensions`` is\n            :obj:`True`, this will be actual character column value.\n            Defaults to: ``80``.\n        lines (int, optional): The number of character lines the pseudo\n            terminal may use.  If ``force_dimensions`` is :obj:`False`, this\n            will be the fallback lines value when the the current terminal\'s\n            line size cannot be found.  If ``force_dimensions`` is :obj:`True`,\n            this will be actual character lines value.  Defaults to: ``24``.\n        force_dimensions (bool, optional): This controls how the given\n            ``columns`` and ``lines`` values are to be used.  A value of\n            :obj:`False` will use the given ``columns`` and ``lines`` as\n            fallback values if the current terminal dimensions cannot be\n            successfully queried.  A value of :obj:`True` will resize the\n            pseudo terminal using the given ``columns`` and ``lines`` values.\n            Defaults to: :obj:`False`.\n        interactive (bool, optional): A value of :obj:`True` will\n            interactively run the given ``command``.  Defaults to:\n            :obj:`False`.\n        **kwargs: Any additional key-word-arguments used with\n            :obj:`Popen <subprocess.Popen>`.  ``stdout`` and ``stderr``\n            will not be used if given in ``**kwargs``.  Defaults to: ``{}``.\n\n    Returns:\n        int: The return value from running the given ``command``\n\n    Raises:\n        RuntimeError: When using ``interactive=True`` and the ``bash``\n            executable cannot be located.\n        OSError: Any errors raised when tring to read the pseudo terminal.\n\n    Example:\n        An example using :obj:`~flutils.cmdutils.run` in code::\n\n            from flutils.cmdutils import run\n            from io import BytesIO\n            import sys\n            import os\n\n            home = os.path.expanduser(\'~\')\n            with BytesIO() as stream:\n                return_code = run(\n                    \'ls "%s"\' % home,\n                    stdout=stream,\n                    stderr=stream\n                )\n                text = stdout.getvalue()\n            text = text.decode(sys.getdefaultencoding())\n            if return_code == 0:\n                print(text)\n            else:\n                print(\'Error: %s\' % text)\n    '
    str_2 = ansi_text_wrapper_0.fill(str_1)
    assert str_2 == 'Run the given command line command and return the command\'s     return\ncode.      When the given ``command`` is executed, the command\'s\nstdout and     stderr outputs are captured in a pseudo terminal.  The\ncaptured     outputs are then added to this function\'s ``stdout`` and\n``stderr``     IO objects.      This function will capture any ANSI\nescape codes in the output of     the given command.  This even\nincludes ANSI colors.      Args:         command (str, List[str],\nTuple[str]): The command to execute.         stdout (:obj:`typing.IO`,\noptional):  An input/output stream             that will hold the\ncommand\'s ``stdout``.  Defaults to:             :obj:`sys.stdout\n<sys.stdout>`; which will output             the command\'s ``stdout``\nto the terminal.         stderr (:obj:`typing.IO`, optional):  An\ninput/output stream             that will hold the command\'s\n``stderr``.  Defaults to:             :obj:`sys.stderr <sys.stderr>`;\nwhich will output             the command\'s ``stderr`` to the\nterminal.         columns (int, optional): The number of character\ncolumns the pseudo             terminal may use.  If\n``force_dimensions`` is :obj:`False`, this             will be the\nfallback columns value when the the current terminal\'s\ncolumn size cannot be found.  If ``force_dimensions`` is\n:obj:`True`, this will be actual character column value.\nDefaults to: ``80``.         lines (int, optional): The number of\ncharacter lines the pseudo             terminal may use.  If\n``force_dimensions`` is :obj:`False`, this             will be the\nfallback lines value when the the current terminal\'s             line\nsize cannot be found.  If ``force_dimensions`` is :obj:`True`,\nthis will be actual character lines value.  Defaults to: ``24``.\nforce_dimensions (bool, optional): This controls how the given\n``columns`` and ``lines`` values are to be used.  A value of\n:obj:`False` will use the given ``columns`` and ``lines`` as\nfallback values if the current terminal dimensions cannot be\nsuccessfully queried.  A value of :obj:`True` will resize the\npseudo terminal using the given ``columns`` and ``lines`` values.\nDefaults to: :obj:`False`.         interactive (bool, optional): A\nvalue of :obj:`True` will             interactively run the given\n``command``.  Defaults to:             :obj:`False`.         **kwargs:\nAny additional key-word-arguments used with             :obj:`Popen\n<subprocess.Popen>`.  ``stdout`` and ``stderr``             will not\nbe used if given in ``**kwargs``.  Defaults to: ``{}``.      Returns:\nint: The return value from running the given ``command``      Raises:\nRuntimeError: When using ``interactive=True`` and the ``bash``\nexecutable cannot be located.         OSError: Any errors raised when\ntring to read the pseudo terminal.      Example:         An example\nusing :obj:`~flutils.cmdutils.run` in code::              from\nflutils.cmdutils import run             from io import BytesIO\nimport sys             import os              home =\nos.path.expanduser(\'~\')             with BytesIO() as stream:\nreturn_code = run(                     \'ls "%s"\' % home,\nstdout=stream,                     stderr=stream                 )\ntext = stdout.getvalue()             text =\ntext.decode(sys.getdefaultencoding())             if return_code == 0:\nprint(text)             else:                 print(\'Error: %s\' %\ntext)'