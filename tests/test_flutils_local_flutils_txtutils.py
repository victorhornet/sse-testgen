# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import re as module_0
import flutils_local.flutils.txtutils as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'w_UM+Z\x0bv\nH\x0cW^W.3Ze'
    var_0 = module_0.match(str_0, str_0)
    var_1 = var_0.__bool__()
    module_1.len_without_ansi(var_1)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ''
    int_0 = module_1.len_without_ansi(str_0)
    assert int_0 == 0
    int_1 = module_1.len_without_ansi(str_0)
    assert int_1 == 0
    str_1 = ',repr='
    int_2 = module_1.len_without_ansi(str_1)
    assert int_2 == 6
    bool_0 = True
    module_1.len_without_ansi(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    bool_0 = True
    ansi_text_wrapper_0 = module_1.AnsiTextWrapper(initial_indent=none_type_0, replace_whitespace=bool_0, fix_sentence_endings=none_type_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils_local.flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is None
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert f'{type(module_1.AnsiTextWrapper.initial_indent).__module__}.{type(module_1.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_1.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_1.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_1.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_1.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_1.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_1.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_1.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_1.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_1.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_1.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_1.AnsiTextWrapper.placeholder).__module__}.{type(module_1.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.AnsiTextWrapper.placeholder_len).__module__}.{type(module_1.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_1.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_1.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_1.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    none_type_1 = None
    module_0.compile(none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    none_type_0 = None
    ansi_text_wrapper_0 = module_1.AnsiTextWrapper(subsequent_indent=bool_0, drop_whitespace=bool_0, break_on_hyphens=none_type_0, tabsize=none_type_0, max_lines=bool_0)
    assert f'{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}' == 'flutils_local.flutils.txtutils.AnsiTextWrapper'
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is None
    assert ansi_text_wrapper_0.tabsize is None
    assert ansi_text_wrapper_0.max_lines is True
    assert f'{type(module_1.AnsiTextWrapper.initial_indent).__module__}.{type(module_1.AnsiTextWrapper.initial_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_1.AnsiTextWrapper.initial_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_1.AnsiTextWrapper.initial_indent_len.attrname == 'initial_indent_len'
    assert f'{type(module_1.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_1.AnsiTextWrapper.initial_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_1.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_1.AnsiTextWrapper.subsequent_indent).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_1.AnsiTextWrapper.subsequent_indent_len).__qualname__}' == 'functools.cached_property'
    assert module_1.AnsiTextWrapper.subsequent_indent_len.attrname == 'subsequent_indent_len'
    assert f'{type(module_1.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_1.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}' == '_thread.RLock'
    assert f'{type(module_1.AnsiTextWrapper.placeholder).__module__}.{type(module_1.AnsiTextWrapper.placeholder).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.AnsiTextWrapper.placeholder_len).__module__}.{type(module_1.AnsiTextWrapper.placeholder_len).__qualname__}' == 'functools.cached_property'
    assert module_1.AnsiTextWrapper.placeholder_len.attrname == 'placeholder_len'
    assert f'{type(module_1.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_1.AnsiTextWrapper.placeholder_len.lock).__qualname__}' == '_thread.RLock'
    ansi_text_wrapper_0.fill(none_type_0)