# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser_local.docstring_parser.google as module_0
import tokenize as module_1
import inspect as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 1
    module_0.parse(int_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.maybe()
    var_1 = module_2.isasyncgenfunction(var_0)
    google_parser_0 = module_0.GoogleParser(title_colon=var_1)
    assert f'{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}' == 'docstring_parser_local.docstring_parser.google.GoogleParser'
    assert f'{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is False
    assert f'{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}' == 're.Pattern'
    var_0.visit_Assert(var_1)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    module_0.SectionBase()

@pytest.mark.xfail(strict=True)
def test_case_3():
    google_parser_0 = module_0.GoogleParser()
    assert f'{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}' == 'docstring_parser_local.docstring_parser.google.GoogleParser'
    assert f'{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}' == 'builtins.dict'
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is True
    assert f'{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}' == 're.Pattern'
    google_parser_0.add_section(google_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '>ad\x0bv[\\Jl?;5+?]?P\nG'
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description == '>ad\x0bv[\\Jl?;5+?]?P'
    assert docstring_0.long_description == 'G'
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    var_0 = module_2.isdatadescriptor(str_0)
    var_0.visit_Match(docstring_0)

def test_case_5():
    str_0 = ' return '
    docstring_0 = module_0.parse(str_0)
    assert f'{type(docstring_0).__module__}.{type(docstring_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_0.short_description == 'return '
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []