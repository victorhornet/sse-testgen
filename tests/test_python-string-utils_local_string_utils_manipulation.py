# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import python_string_utils_local.string_utils.manipulation as module_0
import builtins as module_1
import base64 as module_2
import python_string_utils_local.string_utils.errors as module_3

def test_case_0():
    str_0 = '_FIELD_CLASSVAR'
    bool_0 = module_0.booleanize(str_0)
    assert bool_0 is False

def test_case_1():
    int_0 = 2066
    str_0 = module_0.roman_encode(int_0)
    assert str_0 == 'MMLXVI'
    str_1 = ',default='
    str_2 = module_0.strip_html(str_1)
    assert str_2 == ',default='

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'lVeZ[(uvrl\n[`b'
    str_1 = module_0.asciify(str_0)
    assert str_1 == 'lVeZ[(uvrl\n[`b'
    module_0.roman_encode(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '\nI\x0cm"bGJ;\' t'
    module_0.roman_decode(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    exception_0 = module_1.Exception(*list_0)
    module_0.roman_decode(exception_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'X%a%;bvY'
    module_0.decompress(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    string_compressor_0 = module_0.__StringCompressor()
    assert f'{type(module_0.__StringCompressor.compress).__module__}.{type(module_0.__StringCompressor.compress).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.__StringCompressor.decompress).__module__}.{type(module_0.__StringCompressor.decompress).__qualname__}' == 'builtins.method'
    module_0.decompress(string_compressor_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ' \x0bG MqPn0K19J3*'
    str_1 = module_0.shuffle(str_0)
    str_2 = module_0.snake_case_to_camel(str_1)
    str_3 = module_0.prettify(str_0)
    assert str_3 == 'G MqPn0K19J3*'
    none_type_0 = None
    str_4 = module_0.strip_html(str_2)
    module_2.a85decode(none_type_0, adobe=none_type_0)

def test_case_8():
    bytes_0 = b'\xa6\xd2'
    str_0 = '<$W\\\r)n2'
    str_1 = module_0.strip_margin(str_0)
    assert str_1 == '<$W\\\r)n2'
    with pytest.raises(module_3.InvalidInputError):
        module_0.__StringFormatter(bytes_0)

def test_case_9():
    str_0 = ''
    str_1 = module_0.asciify(str_0)
    assert str_1 == ''
    none_type_0 = None
    with pytest.raises(module_3.InvalidInputError):
        module_0.reverse(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'Cannot overwrite attribute __hash__ in class '
    str_1 = module_0.prettify(str_0)
    assert str_1 == 'Cannot overwrite attribute __hash__ in class'
    str_2 = "GVk/'[+rVSm;UzEx:r"
    bool_0 = False
    var_0 = module_0.camel_case_to_snake(str_2)
    assert var_0 == "GVk/'[+rVSm;UzEx:r"
    str_3 = module_0.strip_html(str_2, bool_0)
    assert str_3 == "GVk/'[+rVSm;UzEx:r"
    module_2.b16encode(bool_0)

def test_case_11():
    bool_0 = True
    with pytest.raises(module_3.InvalidInputError):
        module_0.camel_case_to_snake(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'TK>'
    str_1 = module_0.snake_case_to_camel(str_0)
    assert str_1 == 'TK>'
    str_2 = module_0.strip_html(str_0)
    assert str_2 == 'TK>'
    module_0.roman_encode(str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'wme[3g1Ju.F2mx6g '
    str_1 = module_0.snake_case_to_camel(str_0)
    assert str_1 == 'wme[3g1Ju.F2mx6g '
    str_2 = 'w]\n}\x0b[^h=c=?5DU4-K~'
    str_3 = module_0.shuffle(str_2)
    module_0.roman_decode(str_3)

def test_case_14():
    none_type_0 = None
    invalid_input_error_0 = module_3.InvalidInputError(none_type_0)
    with pytest.raises(module_3.InvalidInputError):
        module_0.shuffle(invalid_input_error_0)

def test_case_15():
    string_compressor_0 = module_0.__StringCompressor()
    assert f'{type(module_0.__StringCompressor.compress).__module__}.{type(module_0.__StringCompressor.compress).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.__StringCompressor.decompress).__module__}.{type(module_0.__StringCompressor.decompress).__qualname__}' == 'builtins.method'
    with pytest.raises(module_3.InvalidInputError):
        module_0.strip_html(string_compressor_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '_ZR@leg`}7kd'
    str_1 = module_0.slugify(str_0)
    assert str_1 == 'zr-leg-7kd'
    roman_numbers_0 = module_0.__RomanNumbers()
    assert f'{type(module_0.__RomanNumbers.encode).__module__}.{type(module_0.__RomanNumbers.encode).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.__RomanNumbers.decode).__module__}.{type(module_0.__RomanNumbers.decode).__qualname__}' == 'builtins.method'
    module_0.roman_decode(str_1)

def test_case_17():
    none_type_0 = None
    with pytest.raises(module_3.InvalidInputError):
        module_0.slugify(none_type_0)

def test_case_18():
    str_0 = ' \x0bG MqPn0K19J3*'
    str_1 = module_0.snake_case_to_camel(str_0)
    assert str_1 == ' \x0bG MqPn0K19J3*'
    int_0 = 2066
    str_2 = module_0.roman_encode(int_0)
    assert str_2 == 'MMLXVI'
    str_3 = 'cf9K4(p'
    str_4 = module_0.prettify(str_3)
    assert str_4 == 'Cf9K4(p'
    str_5 = module_0.prettify(str_4)
    str_6 = module_0.shuffle(str_5)
    none_type_0 = None
    str_7 = module_0.slugify(str_1)
    assert str_7 == 'g-mqpn0k19j3'
    with pytest.raises(module_3.InvalidInputError):
        module_0.strip_margin(none_type_0)

def test_case_19():
    str_0 = "E'-"
    str_1 = module_0.snake_case_to_camel(str_0)
    assert str_1 == "E'-"
    int_0 = 2066
    str_2 = module_0.roman_encode(int_0)
    assert str_2 == 'MMLXVI'
    str_3 = 'Pf9K4\\.hp'
    str_4 = module_0.prettify(str_3)
    assert str_4 == 'Pf9K4\\. Hp'
    str_5 = module_0.snake_case_to_camel(str_0, str_0)
    str_6 = ',default='
    str_7 = module_0.strip_html(str_6)
    assert str_7 == ',default='
    str_8 = module_0.snake_case_to_camel(str_3, str_7)
    assert str_8 == 'Pf9K4\\.hp'

@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = -3485
    str_0 = 'B\\8`}}r"Q\r)fL9\nd#'
    str_1 = module_0.shuffle(str_0)
    list_0 = [int_0, int_0, int_0]
    value_error_0 = module_1.ValueError(*list_0)
    module_0.compress(int_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '_ZR@leg`}7kd'
    module_0.roman_decode(str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = ''
    str_1 = module_0.reverse(str_0)
    assert str_1 == ''
    str_2 = 'Mwbec(lAin'
    str_3 = module_0.shuffle(str_2)
    module_0.compress(str_3, str_2)

def test_case_23():
    none_type_0 = None
    with pytest.raises(module_3.InvalidInputError):
        module_0.booleanize(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = '?#TGr#\rG]/5NY\nq,'
    str_1 = module_0.prettify(str_0)
    assert str_1 == '?#TGr#\rG] / 5NY\nq,'
    str_2 = "GVk/'[+rVSm;UzEx:r"
    bool_0 = False
    str_3 = module_0.strip_html(str_2, bool_0)
    assert str_3 == "GVk/'[+rVSm;UzEx:r"
    str_4 = 'omkt 5~m'
    module_0.roman_decode(str_4)

def test_case_25():
    none_type_0 = None
    with pytest.raises(module_3.InvalidInputError):
        module_0.asciify(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = 'TKY'
    str_1 = '}:g\rh#>W\rV\\Vj~F'
    str_2 = module_0.prettify(str_1)
    assert str_2 == '}: g\rh#>W\rV\\Vj~F'
    str_3 = 'I'
    int_0 = module_0.roman_decode(str_3)
    assert int_0 == 1
    module_0.roman_decode(str_0)