# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.science as module_0
import mimesis.providers.base as module_1

def test_case_0():
    science_0 = module_0.Science()
    assert f'{type(science_0).__module__}.{type(science_0).__qualname__}' == 'mimesis_local.mimesis.providers.science.Science'
    assert science_0.seed is None
    assert f'{type(science_0.random).__module__}.{type(science_0.random).__qualname__}' == 'mimesis.random.Random'
    assert science_0.locale == 'en'
    int_0 = science_0.atomic_number()
    var_0 = science_0.chemical_element()

def test_case_1():
    science_0 = module_0.Science()
    assert f'{type(science_0).__module__}.{type(science_0).__qualname__}' == 'mimesis_local.mimesis.providers.science.Science'
    assert science_0.seed is None
    assert f'{type(science_0.random).__module__}.{type(science_0.random).__qualname__}' == 'mimesis.random.Random'
    assert science_0.locale == 'en'
    int_0 = science_0.atomic_number()
    none_type_0 = None
    var_0 = science_0.chemical_element(none_type_0)
    science_1 = module_0.Science()

@pytest.mark.xfail(strict=True)
def test_case_2():
    base_data_provider_0 = module_1.BaseDataProvider()
    science_0 = module_0.Science()
    assert f'{type(science_0).__module__}.{type(science_0).__qualname__}' == 'mimesis_local.mimesis.providers.science.Science'
    assert science_0.seed is None
    assert f'{type(science_0.random).__module__}.{type(science_0.random).__qualname__}' == 'mimesis.random.Random'
    assert science_0.locale == 'en'
    str_0 = science_0.rna_sequence()
    generator_0 = base_data_provider_0.override_locale()
    module_0.Science(*generator_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 4653.1844
    science_0 = module_0.Science()
    assert f'{type(science_0).__module__}.{type(science_0).__qualname__}' == 'mimesis_local.mimesis.providers.science.Science'
    assert science_0.seed is None
    assert f'{type(science_0.random).__module__}.{type(science_0.random).__qualname__}' == 'mimesis.random.Random'
    assert science_0.locale == 'en'
    none_type_0 = science_0.reseed()
    science_0.dna_sequence(float_0)