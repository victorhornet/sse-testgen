# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.person as module_0
import re as module_1
import enum as module_2

def test_case_0():
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    person_0 = module_0.Person(**dict_0)
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    int_0 = 1832
    str_0 = person_0.social_media_profile()
    str_1 = person_0.political_views()
    module_1.compile(int_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\x06\x96\xcba'
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    person_0.height(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    enum_dict_0 = module_2._EnumDict()
    person_0 = module_0.Person(**enum_dict_0)
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = person_0.last_name()
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.Person(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    person_0 = module_0.Person(**dict_0)
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = person_0.last_name()
    str_1 = person_0.language()
    str_2 = person_0.occupation()
    person_0.social_media_profile(str_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'\x06\x96\xcba'
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = person_0.political_views()
    str_1 = person_0.worldview()
    person_0.height(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = module_2._EnumDict()
    person_0 = module_0.Person(**dict_0)
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = person_0.last_name()
    int_0 = person_0.work_experience()
    str_1 = person_0.language()
    str_2 = person_0.occupation()
    person_0.social_media_profile(str_1)

def test_case_7():
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    bool_0 = False
    int_0 = person_0.age(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\x06\x96\xcba'
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = person_0.political_views()
    str_1 = person_0.worldview()
    int_0 = -2055
    int_1 = person_0.weight(int_0)
    var_0 = module_1.template(bytes_0)
    var_0.__bool__()

@pytest.mark.xfail(strict=True)
def test_case_9():
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = person_0.university()
    str_1 = person_0.gender()
    person_0.social_media_profile(person_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = person_0.university()
    str_1 = person_0.identifier()
    person_0.social_media_profile(person_0)

def test_case_11():
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = person_0.political_views()
    str_1 = person_0.worldview()
    int_0 = -2055
    int_1 = person_0.weight(int_0)
    str_2 = person_0.views_on()
    str_3 = person_0.sexual_orientation()
    assert str_3 == 'Heterosexual'
    str_4 = person_0.password()
    int_2 = person_0.age()
    str_5 = person_0.nationality()
    str_6 = person_0.email()
    str_7 = person_0.views_on()
    none_type_0 = None
    str_8 = person_0.last_name(none_type_0)
    str_9 = person_0.language()
    none_type_1 = person_0.reseed()
    int_3 = person_0.work_experience()

def test_case_12():
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    var_0 = person_0.gender()
    str_0 = person_0.academic_degree()

@pytest.mark.xfail(strict=True)
def test_case_13():
    person_0 = module_0.Person()
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = module_1.purge()
    str_1 = person_0.sex()
    person_0.social_media_profile(person_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    enum_dict_0 = module_2._EnumDict()
    person_0 = module_0.Person(**enum_dict_0)
    assert f'{type(person_0).__module__}.{type(person_0).__qualname__}' == 'mimesis_local.mimesis.providers.person.Person'
    assert person_0.seed is None
    assert f'{type(person_0.random).__module__}.{type(person_0.random).__qualname__}' == 'mimesis.random.Random'
    assert person_0.locale == 'en'
    str_0 = person_0.last_name()
    int_0 = person_0.work_experience()
    str_1 = person_0.occupation()
    str_2 = person_0.social_media_profile()
    none_type_0 = None
    module_1.compile(person_0, none_type_0)