# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import codetiming._timers as module_0

def test_case_0():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = 'Timer is running. Use .stop() to stop it'
    timers_0.min(str_0)

def test_case_2():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    timers_1 = module_0.Timers()
    assert len(timers_1) == 0
    str_0 = 'sU|CK\x0c)B@v&'
    with pytest.raises(KeyError):
        timers_1.stdev(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    none_type_0 = timers_0.clear()
    none_type_1 = timers_0.clear()
    timers_0.min(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '\nx)Z<~i_`\\2M-[&5'
    dict_0 = {str_0: str_0}
    module_0.Timers(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = 'name'
    timers_0.count(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    timers_0.total(timers_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = ''
    timers_0.max(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    timers_0.mean(timers_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    timers_0.median(timers_0)