# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import codetiming._timers as module_0

def test_case_0():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = 'Timer is running. Use .stop() to stop it'
    timers_0.min(str_0)

def test_case_2():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    timers_1 = module_0.Timers()
    assert len(timers_1) == 0
    str_0 = 'sU|CK\x0c)B@v&'
    with pytest.raises(KeyError):
        timers_1.stdev(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    timers_1 = module_0.Timers()
    assert len(timers_1) == 0
    none_type_0 = timers_0.clear()
    var_0 = timers_0.clear()
    timers_0.min(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '\nx)Z<~i_`\\2M-[&5'
    dict_0 = {str_0: str_0}
    module_0.Timers(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    none_type_0 = timers_0.clear()
    var_0 = timers_0.clear()
    str_0 = 'seconds'
    timers_0.count(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = '9j0'
    timers_0.total(str_0)

def test_case_7():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = ';oXp8.P\nQ>8V<`@\n;N'
    int_0 = 1820
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(str_0)
    assert float_0 == 1820

def test_case_8():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = ';oXp8.P\nQ>8V<`@\n;N'
    int_0 = 1820
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.mean(str_0)
    assert float_0 == 1820

@pytest.mark.xfail(strict=True)
def test_case_9():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    var_0 = timers_0.__len__()
    assert var_0 == 0
    timers_0.median(var_0)

def test_case_10():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = ';oXp8.P\nQ>8V<`@\n;N'
    int_0 = 1820
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(str_0)
    float_1 = timers_0.min(str_0)
    assert float_1 == 1820
    float_2 = timers_0.mean(str_0)
    assert float_2 == 1820
    var_0 = timers_0.pop(int_0, none_type_0)
    float_3 = timers_0.median(str_0)
    assert float_3 == 1820

def test_case_11():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = ';oXp8.P\nQ>8V<`@\n;N'
    int_0 = 1820
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(str_0)
    assert float_0 == 1820

@pytest.mark.xfail(strict=True)
def test_case_12():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    int_0 = 1828
    str_0 = '3bbwfH8wl9P;O8E~'
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    none_type_1 = timers_0.add(str_0, int_0)
    float_0 = timers_0.stdev(str_0)
    assert float_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    float_1 = timers_0.max(str_0)
    assert float_1 == 1828
    float_2 = timers_0.mean(str_0)
    assert float_2 == 1828
    timers_0.pop(int_0)

def test_case_13():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = ';oXp8.P\nQ>8V<`@\n;N'
    int_0 = 1820
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.median(str_0)
    assert float_0 == 1820