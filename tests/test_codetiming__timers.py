# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import codetiming._timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    none_type_0 = None
    timers_0.count(none_type_0)


def test_case_2():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "N:D:T<zQvu+]Ua:S\\I"
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


def test_case_3():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    int_0 = 1301
    str_0 = "9]:|qP][^"
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(str_0)
    assert float_0 == 1301


@pytest.mark.xfail(strict=True)
def test_case_4():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    timers_1 = module_0.Timers()
    assert len(timers_1) == 0
    none_type_0 = timers_1.clear()
    bool_0 = True
    timers_1.total(bool_0)


def test_case_5():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    int_0 = 1301
    str_0 = "9]:|qP][^"
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(str_0)
    assert float_0 == 1301
    float_1 = timers_0.max(str_0)
    assert float_1 == 1301
    float_2 = timers_0.stdev(str_0)
    with pytest.raises(TypeError):
        timers_0.__setitem__(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    timers_1 = timers_0.__ror__(timers_0)
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}"
        == "codetiming._timers.Timers"
    )
    assert len(timers_1) == 0
    bool_0 = True
    timers_1.total(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "*$s^#M5&JZv"
    timers_0.min(str_0)


def test_case_8():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    int_0 = 1301
    str_0 = "9]:|qP][^"
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.mean(str_0)
    assert float_0 == 1301


def test_case_9():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    int_0 = 1275
    str_0 = "@%P$F-b8S+\x0c5Z"
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.median(str_0)
    assert float_0 == 1275


def test_case_10():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    int_0 = 1301
    str_0 = "9]:|qP][^"
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(str_0)
    float_1 = timers_0.mean(str_0)
    assert float_1 == 1301


def test_case_11():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    int_0 = 1301
    str_0 = "9]:|qP][^"
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(str_0)
    assert float_0 == 1301


@pytest.mark.xfail(strict=True)
def test_case_12():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    int_0 = 1301
    float_0 = -196.0
    str_0 = "9]:|qP][^"
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    none_type_1 = timers_0.add(float_0, int_0)
    none_type_2 = timers_0.add(str_0, int_0)
    float_1 = timers_0.min(str_0)
    assert float_1 == 1301
    float_2 = timers_0.max(str_0)
    assert float_2 == 1301
    float_3 = timers_0.stdev(str_0)
    assert float_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    float_4 = timers_0.mean(str_0)
    assert float_4 == 1301
    var_0 = timers_0.__contains__(none_type_0)
    var_0.translate(*var_0)
