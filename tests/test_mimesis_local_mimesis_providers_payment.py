# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import mimesis_local.mimesis.providers.payment as module_0
import re as module_1
import mimesis.exceptions as module_2

def test_case_0():
    payment_0 = module_0.Payment()
    assert f'{type(payment_0).__module__}.{type(payment_0).__qualname__}' == 'mimesis_local.mimesis.providers.payment.Payment'
    assert payment_0.seed is None
    assert f'{type(payment_0.random).__module__}.{type(payment_0.random).__qualname__}' == 'mimesis.random.Random'
    int_0 = payment_0.cvv()
    str_0 = payment_0.bitcoin_address()
    str_1 = payment_0.credit_card_network()

def test_case_1():
    payment_0 = module_0.Payment()
    assert f'{type(payment_0).__module__}.{type(payment_0).__qualname__}' == 'mimesis_local.mimesis.providers.payment.Payment'
    assert payment_0.seed is None
    assert f'{type(payment_0.random).__module__}.{type(payment_0.random).__qualname__}' == 'mimesis.random.Random'
    dict_0 = payment_0.credit_card_owner()
    int_0 = payment_0.cid()
    str_0 = payment_0.paypal()
    int_1 = payment_0.cid()

def test_case_2():
    payment_0 = module_0.Payment()
    assert f'{type(payment_0).__module__}.{type(payment_0).__qualname__}' == 'mimesis_local.mimesis.providers.payment.Payment'
    assert payment_0.seed is None
    assert f'{type(payment_0.random).__module__}.{type(payment_0.random).__qualname__}' == 'mimesis.random.Random'
    dict_0 = payment_0.credit_card_owner()
    str_0 = payment_0.paypal()
    str_1 = payment_0.paypal()

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_1.fullmatch(none_type_0, none_type_0, none_type_0)

def test_case_4():
    payment_0 = module_0.Payment()
    assert f'{type(payment_0).__module__}.{type(payment_0).__qualname__}' == 'mimesis_local.mimesis.providers.payment.Payment'
    assert payment_0.seed is None
    assert f'{type(payment_0.random).__module__}.{type(payment_0.random).__qualname__}' == 'mimesis.random.Random'
    dict_0 = payment_0.credit_card_owner()
    int_0 = payment_0.cid()
    str_0 = payment_0.paypal()
    str_1 = payment_0.paypal()

def test_case_5():
    payment_0 = module_0.Payment()
    assert f'{type(payment_0).__module__}.{type(payment_0).__qualname__}' == 'mimesis_local.mimesis.providers.payment.Payment'
    assert payment_0.seed is None
    assert f'{type(payment_0.random).__module__}.{type(payment_0.random).__qualname__}' == 'mimesis.random.Random'
    str_0 = payment_0.paypal()
    str_1 = payment_0.paypal()
    dict_0 = payment_0.credit_card_owner()
    str_2 = payment_0.paypal()
    str_3 = payment_0.paypal()
    str_4 = payment_0.ethereum_address()

def test_case_6():
    payment_0 = module_0.Payment()
    assert f'{type(payment_0).__module__}.{type(payment_0).__qualname__}' == 'mimesis_local.mimesis.providers.payment.Payment'
    assert payment_0.seed is None
    assert f'{type(payment_0.random).__module__}.{type(payment_0.random).__qualname__}' == 'mimesis.random.Random'
    int_0 = payment_0.cid()
    with pytest.raises(module_2.NonEnumerableError):
        payment_0.credit_card_number(payment_0)