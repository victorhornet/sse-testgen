# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import docstring_parser_local.docstring_parser.common as module_0
import builtins as module_1

def test_case_0():
    str_0 = '(\n~_p|'
    docstring_raises_0 = module_0.DocstringRaises(str_0, str_0, str_0)
    assert f'{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.DocstringRaises'
    assert docstring_raises_0.args == '(\n~_p|'
    assert docstring_raises_0.description == '(\n~_p|'
    assert docstring_raises_0.type_name == '(\n~_p|'
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    docstring_0 = module_0.Docstring()
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'

def test_case_1():
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    docstring_1 = module_0.Docstring()
    str_0 = '__ge__'
    list_0 = [str_0, str_0]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(list_0, docstring_0, str_0, str_0, none_type_0, docstring_1)
    assert f'{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.DocstringParam'
    assert docstring_param_0.args == ['__ge__', '__ge__']
    assert f'{type(docstring_param_0.description).__module__}.{type(docstring_param_0.description).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'
    assert docstring_param_0.arg_name == '__ge__'
    assert docstring_param_0.type_name == '__ge__'
    assert docstring_param_0.is_optional is None
    assert f'{type(docstring_param_0.default).__module__}.{type(docstring_param_0.default).__qualname__}' == 'docstring_parser_local.docstring_parser.common.Docstring'

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    str_0 = 'return NotImplemented'
    docstring_returns_0 = module_0.DocstringReturns(none_type_0, str_0, str_0, str_0)
    assert f'{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.DocstringReturns'
    assert docstring_returns_0.args is None
    assert docstring_returns_0.description == 'return NotImplemented'
    assert docstring_returns_0.type_name == 'return NotImplemented'
    assert docstring_returns_0.is_generator == 'return NotImplemented'
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    str_1 = ' is a field but has no type annotation'
    str_2 = 'RW+7*X]D}2Ow0\tr-'
    dict_0 = {str_1: str_1, str_2: str_2, str_1: str_1}
    module_0.ParseError(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    docstring_0 = module_0.Docstring()
    assert module_0.PARAM_KEYWORDS == {'attribute', 'key', 'argument', 'arg', 'parameter', 'param', 'keyword'}
    assert module_0.RAISES_KEYWORDS == {'exception', 'raise', 'raises', 'except'}
    assert module_0.RETURNS_KEYWORDS == {'returns', 'return'}
    assert module_0.YIELDS_KEYWORDS == {'yields', 'yield'}
    assert f'{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}' == 'builtins.property'
    str_0 = 'dataclass'
    list_0 = [str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, list_0)
    assert f'{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}' == 'docstring_parser_local.docstring_parser.common.DocstringDeprecated'
    assert docstring_deprecated_0.args == ['dataclass']
    assert docstring_deprecated_0.description == 'dataclass'
    assert docstring_deprecated_0.version == ['dataclass']
    module_1.Exception(**none_type_0)