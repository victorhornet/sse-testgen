# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import pypara_local.pypara.monetary as module_0
import decimal as module_1
import pypara_local.pypara.currencies as module_2

def test_case_0():
    price_0 = module_0.Price()
    assert f'{type(module_0.Price.money).__module__}.{type(module_0.Price.money).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Price.of).__module__}.{type(module_0.Price.of).__qualname__}' == 'builtins.method'
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    var_0 = none_money_0.__round__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    bool_0 = none_money_0.as_boolean()
    assert bool_0 is False

def test_case_1():
    price_0 = module_0.Price()
    assert f'{type(module_0.Price.money).__module__}.{type(module_0.Price.money).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Price.of).__module__}.{type(module_0.Price.of).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_2():
    division_by_zero_0 = module_1.DivisionByZero()
    none_type_0 = None
    module_0.IncompatibleCurrencyError(division_by_zero_0, none_type_0)

def test_case_3():
    money_0 = module_0.Money()
    assert f'{type(module_0.Money.of).__module__}.{type(module_0.Money.of).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Money.price).__module__}.{type(module_0.Money.price).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        money_0.as_float()

def test_case_4():
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    price_0 = none_money_0.positive()
    assert f'{type(price_0).__module__}.{type(price_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_0 = none_money_0.scalar_add(none_money_0)
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    bool_0 = none_money_0.__eq__(price_0)
    assert bool_0 is True
    money_1 = none_money_0.round()
    assert f'{type(money_1).__module__}.{type(money_1).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    bool_1 = money_0.as_boolean()
    assert bool_1 is False

@pytest.mark.xfail(strict=True)
def test_case_5():
    price_0 = module_0.Price()
    assert f'{type(module_0.Price.money).__module__}.{type(module_0.Price.money).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Price.of).__module__}.{type(module_0.Price.of).__qualname__}' == 'builtins.method'
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    money_0 = none_money_0.subtract(none_money_0)
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    none_money_0.as_integer()

def test_case_6():
    int_0 = 0
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    bool_0 = none_money_0.as_boolean()
    assert bool_0 is False
    money_0 = none_money_0.multiply(int_0)
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    var_0 = money_0.__round__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_1 = money_0.__truediv__(var_0)
    assert f'{type(money_1).__module__}.{type(money_1).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_2 = none_money_0.with_qty(money_0)
    assert f'{type(money_2).__module__}.{type(money_2).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    bool_1 = money_2.__gt__(money_0)
    assert bool_1 is False
    money_3 = money_1.scalar_add(int_0)
    assert f'{type(money_3).__module__}.{type(money_3).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_4 = money_3.__floordiv__(int_0)
    assert f'{type(money_4).__module__}.{type(money_4).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    bool_2 = money_3.lte(money_4)

@pytest.mark.xfail(strict=True)
def test_case_7():
    price_0 = module_0.Price()
    assert f'{type(module_0.Price.money).__module__}.{type(module_0.Price.money).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Price.of).__module__}.{type(module_0.Price.of).__qualname__}' == 'builtins.method'
    none_type_0 = None
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    bool_0 = price_0.__le__(none_type_0)
    money_0 = none_money_0.with_qty(none_type_0)
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_0.as_integer()

@pytest.mark.xfail(strict=True)
def test_case_8():
    price_0 = module_0.Price()
    assert f'{type(module_0.Price.money).__module__}.{type(module_0.Price.money).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Price.of).__module__}.{type(module_0.Price.of).__qualname__}' == 'builtins.method'
    money_0 = price_0.__sub__(price_0)
    module_0.SomePrice()

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_price_0 = module_0.NonePrice()
    assert f'{type(module_0.NonePrice.money).__module__}.{type(module_0.NonePrice.money).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    price_0 = none_price_0.abs()
    assert f'{type(price_0).__module__}.{type(price_0).__qualname__}' == 'pypara_local.pypara.monetary.NonePrice'
    none_price_0.as_float()

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_price_0 = module_0.NonePrice()
    assert f'{type(module_0.NonePrice.money).__module__}.{type(module_0.NonePrice.money).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    none_price_0.as_float()

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_price_0 = module_0.NonePrice()
    assert f'{type(module_0.NonePrice.money).__module__}.{type(module_0.NonePrice.money).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    none_type_0 = None
    none_price_0.subtract(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 0
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    bool_0 = none_money_0.as_boolean()
    assert bool_0 is False
    money_0 = none_money_0.multiply(int_0)
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    var_0 = money_0.__round__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_1 = money_0.__truediv__(var_0)
    assert f'{type(money_1).__module__}.{type(money_1).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    price_0 = var_0.round()
    list_0 = [var_0]
    currency_0 = module_2.Currency(list_0, price_0, list_0, int_0, var_0, var_0)
    var_1 = currency_0.__repr__()
    var_2 = var_1.__ge__(bool_0)
    var_3 = var_2.__lt__(money_1)
    int_1 = 139
    currency_1 = module_2.Currency(int_0, bool_0, int_0, var_1, var_3, int_1)
    var_4 = var_3.__gt__(var_0)
    var_5 = var_4.__lt__(money_1)
    var_6 = var_5.__lt__(var_0)
    var_7 = var_6.__repr__()
    var_8 = var_4.__lt__(bool_0)
    money_2 = money_1.with_dov(bool_0)
    assert f'{type(money_2).__module__}.{type(money_2).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_3 = money_1.multiply(int_1)
    money_4 = money_3.abs()
    assert f'{type(money_4).__module__}.{type(money_4).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    var_7.abs()

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    bool_0 = none_money_0.__gt__(none_money_0)
    assert bool_0 is False
    money_0 = none_money_0.__pos__()
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    none_price_0 = module_0.NonePrice()
    assert f'{type(module_0.NonePrice.money).__module__}.{type(module_0.NonePrice.money).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    none_price_0.as_integer()

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_price_0 = module_0.NonePrice()
    assert f'{type(module_0.NonePrice.money).__module__}.{type(module_0.NonePrice.money).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    price_0 = none_price_0.negative()
    assert f'{type(price_0).__module__}.{type(price_0).__qualname__}' == 'pypara_local.pypara.monetary.NonePrice'
    price_0.__int__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 0
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    bool_0 = none_money_0.as_boolean()
    assert bool_0 is False
    money_0 = none_money_0.multiply(int_0)
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    var_0 = money_0.__round__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    bool_1 = False
    money_1 = none_money_0.scalar_subtract(bool_1)
    assert f'{type(money_1).__module__}.{type(money_1).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_2 = money_0.__truediv__(var_0)
    assert f'{type(money_2).__module__}.{type(money_2).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_3 = none_money_0.with_qty(money_0)
    assert f'{type(money_3).__module__}.{type(money_3).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    int_1 = -1156
    money_4 = none_money_0.__mul__(int_1)
    assert f'{type(money_4).__module__}.{type(money_4).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_3.__int__()

@pytest.mark.xfail(strict=True)
def test_case_16():
    price_0 = module_0.Price()
    assert f'{type(module_0.Price.money).__module__}.{type(module_0.Price.money).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Price.of).__module__}.{type(module_0.Price.of).__qualname__}' == 'builtins.method'
    none_type_0 = None
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    money_0 = none_money_0.__round__()
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    none_money_0.lt(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    price_0 = module_0.Price()
    assert f'{type(module_0.Price.money).__module__}.{type(module_0.Price.money).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Price.of).__module__}.{type(module_0.Price.of).__qualname__}' == 'builtins.method'
    none_type_0 = None
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    money_0 = none_money_0.with_qty(none_type_0)
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    var_0 = none_money_0.__round__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    price_1 = price_0.__mul__(price_0)
    monetary_operation_exception_0 = module_0.MonetaryOperationException()
    float_0 = price_0.__float__()
    module_0.SomePrice()

@pytest.mark.xfail(strict=True)
def test_case_18():
    price_0 = module_0.Price()
    assert f'{type(module_0.Price.money).__module__}.{type(module_0.Price.money).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Price.of).__module__}.{type(module_0.Price.of).__qualname__}' == 'builtins.method'
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    bool_0 = none_money_0.as_boolean()
    assert bool_0 is False
    money_0 = none_money_0.multiply(bool_0)
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    price_0.__round__()

@pytest.mark.xfail(strict=True)
def test_case_19():
    money_0 = module_0.Money()
    assert f'{type(module_0.Money.of).__module__}.{type(module_0.Money.of).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Money.price).__module__}.{type(module_0.Money.price).__qualname__}' == 'builtins.property'
    money_1 = money_0.__abs__()
    money_2 = money_0.__truediv__(money_1)
    money_1.__neg__()

@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = 0
    none_money_0 = module_0.NoneMoney()
    assert f'{type(module_0.NoneMoney.price).__module__}.{type(module_0.NoneMoney.price).__qualname__}' == 'builtins.property'
    bool_0 = none_money_0.as_boolean()
    assert bool_0 is False
    money_0 = none_money_0.add(none_money_0)
    assert f'{type(money_0).__module__}.{type(money_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_1 = none_money_0.multiply(int_0)
    assert f'{type(money_1).__module__}.{type(money_1).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    var_0 = money_1.__round__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    money_2 = money_1.__truediv__(var_0)
    assert f'{type(money_2).__module__}.{type(money_2).__qualname__}' == 'pypara_local.pypara.monetary.NoneMoney'
    price_0 = var_0.round()
    bool_1 = money_2.__gt__(money_1)
    assert bool_1 is False
    module_0.SomeMoney()