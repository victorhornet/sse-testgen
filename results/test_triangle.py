# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import triangle as module_0


def test_case_0():
    bool_0 = True
    bool_1 = True
    str_0 = module_0.triangle(bool_0, bool_1, bool_0)
    assert str_0 == "Equilateral triangle"


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.triangle(bool_0, set_0, none_type_0)


def test_case_2():
    int_0 = -2308
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    str_0 = module_0.triangle(bool_1, none_type_0, bool_1)
    assert str_0 == "Isosceles triangle"
    str_1 = module_0.triangle(int_0, int_0, bool_0)
    assert str_1 == "Isosceles triangle"


def test_case_3():
    bool_0 = False
    bool_1 = True
    str_0 = module_0.triangle(bool_0, bool_0, bool_1)
    assert str_0 == "Isosceles triangle"
    none_type_0 = None
    str_1 = module_0.triangle(none_type_0, none_type_0, bool_0)
    assert str_1 == "Isosceles triangle"
    str_2 = module_0.triangle(bool_0, bool_0, bool_0)
    assert str_2 == "Equilateral triangle"
    str_3 = module_0.triangle(none_type_0, bool_1, bool_0)
    assert str_3 == "Scalene triangle"


def test_case_4():
    int_0 = 2160
    int_1 = -2562
    str_0 = module_0.triangle(int_0, int_0, int_1)
    assert str_0 == "Isosceles triangle"
    bytes_0 = b"\xc14\x10-\xed\xf4"
    int_2 = 1148
    str_1 = module_0.triangle(int_2, int_0, int_0)
    assert str_1 == "Isosceles triangle"
    none_type_0 = None
    str_2 = module_0.triangle(int_0, bytes_0, none_type_0)
    assert str_2 == "Scalene triangle"
    bool_0 = False
    int_3 = -3660
    str_3 = module_0.triangle(bool_0, bool_0, int_0)
    assert str_3 == "Isosceles triangle"
    str_4 = module_0.triangle(bool_0, int_3, int_0)
    assert str_4 == "Scalene triangle"
    str_5 = module_0.triangle(int_0, int_0, int_0)
    assert str_5 == "Equilateral triangle"
